<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[私有成员语法 FAQ]]></title>
    <url>%2F2018%2F10%2F28%2F%E7%A7%81%E6%9C%89%E6%88%90%E5%91%98%E8%AF%AD%E6%B3%95FAQ%2F</url>
    <content type="text"><![CDATA[翻译自 tc39/proposal-class-fields 译者按：社区一直以来有一个声音，就是反对使用 # 声明私有成员。但是很多质疑的声音过于浅薄、人云亦云。其实 TC39 早就对此类呼声做过回应，并且归纳了一篇 FAQ。翻译这篇文章的同时，我会进行一定的扩展（有些问题的描述不够清晰），目的是让大家取得一定的共识。我认为，只有你知其然，且知其所以然，你的质疑才是有力量的。 译者按：首先要明确的一点是，委员会对于私有成员很多设计上的抉择是基于 ES 不存在类型检查，为此做了很多权衡和让步。这篇文章在很多地方也会提及这个不同的基本面。 # 是怎么回事？# 是 _ 的替代方案。 123456class A &#123; _hidden = 0; m() &#123; return this._hidden; &#125;&#125; 之前大家习惯使用 _ 创建类的私有成员，但这仅仅是社区共识，实际上这个成员是暴露的。 123456class B &#123; #hidden = 0; m() &#123; return this.#hidden; &#125;&#125; 现在使用 # 创建类的私有成员，在语言层面上对该成员进行了隐藏。 由于兼容性问题，我们不能去改变 _ 的工作机制。 译者按：如果将私有成员的语义赋予 _，之前使用 _ 声明公共成员的代码就出问题了；而且就算你之前使用 _ 是用来声明私有成员的，你能保证你心中的语义和现阶段的语义完全一致么？所以为了慎重起见，将之前的一种错误语法（之前类成员以 # 开头会报语法错误，这样保证了以前不存在这样的代码）加以利用，变成私有成员语法。 为什么不能通过 this.x 访问？ 译者按：这个问题的意思是，如果类 A 有私有成员 #x（其中 # 是声明私有，x 才是成员名），为什么内部不能通过 this.x 访问该成员，而一定要写成 this.#x？ 译者按：以下是一系列问题，问题 -&gt; 解答 -&gt; 延伸问题 -&gt; 解答 … 有 x 这个私有成员，不意味着不能有 x 这个公共成员，因此访问私有成员不能是一个普通的查找。 这是 JS 的一个问题，因为它缺少静态类型。静态类型语言使用类型声明区分外部公共/内部私有的情况，而不需要标识符。但是动态类型语言没有足够的静态信息区分这些情况。 延伸问题 1：那么为什么这个提案允许一个类同时存在私有成员 #x 和公共成员 x ？ 如果私有成员和公共成员冲突，会破坏其“封装性”。 私有成员很重要的一点是子类不需要知道它们。应该允许子类声明成员 x，即使父类有一个同名的私有成员。 译者按：感觉第二点有点文不对题。 其他支持私有成员的语言通常是允许的。如下是完全合法的 Java 代码： 1234567class Base &#123; private int x = 0;&#125;class Derived extends Base &#123; public int x = 0;&#125; 译者按：所谓的“封装性”（encapsulation / hard private）是很重要的概念，最底下会有说明。最简单的解释是，外部不能以任意方式获取私有成员的任何信息。假设，公共成员和私有成员冲突，而 x 是 obj 的私有成员，这时候外部存在 obj.x。如果公私冲突，这里将会报错，外部就嗅探到了 obj 存在 x 这个私有成员。这就违背了“封装性”。 延伸问题 2：为什么不使用运行时检测，来决定访问的是私有成员还是公共成员？属性访问的语义已经很复杂了，我们不想仅仅为了这个特性让每次属性访问都更慢。 译者按：属性访问的复杂性可以从 toFastProperties 和 toFastProperties 如何使对象的属性更快 管窥一二 它（运行时检测）还可能让类的方法被非实例（比如普通对象）欺骗，使其在非实例的字段上进行操作，从而造成私有成员的泄漏。这条评论 是一个例子。 译者按：如果不结合以上的例子，上面这句话其实很难理解。所以我觉得有必要扩展一下，虽然有很多人认为这个例子没有说服力。 首先我希望你了解 Java，因为我会拿 Java 的代码做对比。 其次我再明确一下，这个问题的根本在于 ES 没有静态类型检测，而 TS 就不存在此类烦恼。 12345678910111213141516171819202122232425&gt; public class Main &#123;&gt; public static void main(String[] args)&#123;&gt; A a1 = new A(1);&gt; A a2 = new A(2);&gt; a1.swap(a2);&gt; a1.say();&gt; a2.say();&gt; &#125;&gt; &#125;&gt;&gt; class A &#123;&gt; private int p;&gt; A(int p) &#123;&gt; this.p = p;&gt; &#125;&gt; public void swap(A a) &#123;&gt; int tmp = this.p;&gt; this.p = a.p;&gt; a.p = tmp;&gt; &#125;&gt; public void say() &#123;&gt; System.out.println(this.p);&gt; &#125;&gt; &#125;&gt; 以上的例子是一段正常的 Java 代码，它的逻辑很简单：声明类 A，A 存在一个公共方法，允许实例和另一个实例交换私有成员 p。 把这部分逻辑转换为 JS 代码，并且使用 private 声明 12345678910111213&gt; class A &#123;&gt; private p;&gt; constructor(p) &#123; this.p = p &#125;&gt; swap(a) &#123;&gt; let tmp = a.p;&gt; a.p = this.p;&gt; this.p = tmp;&gt; &#125;&gt; say() &#123;&gt; console.log(this.p);&gt; &#125;&gt; &#125;&gt; 乍一看是没有问题的，但 swap 有一个陷阱：如果传入的对象不是 A 的实例，或者说只是一个普通的对象，是不是就可以把私有成员 p 偷出来了？ JS 是不能做类型检查的，那我们怎么声明传入的 a 必须是 A 的实例呢？现有的方案就是检测在函数体中是否存在对入参的私有成员的访问。比如上例中，函数中如果存在 a.#p，那么 a 就必须是 A 的实例。否则就会报 TypeError: attempted to get private field on non-instance 这就是为什么对私有成员的访问必须在语法层面上体现，而不能是简单的运行时检测。 延伸问题 3：当类中声明了私有成员 x 时，为什么不让 obj.x 总是代表对私有成员的访问？ 译者按：这个问题的意思是当某个类声明了私有成员 x，那么类中所有的成员表达式 sth.x 都表示是对 sth 的私有成员 x 的访问。我觉得这是一个蠢问题，谁赞成？谁反对？ 类方法经常操作不是实例的对象。当 obj 不是实例的时候，如果 obj.x 突然间不再指的是 obj 的公共字段 x，仅仅是因为在类的某个地方声明了私有成员 x，那就太奇怪了。 延伸问题 4：为什么不赋予 this 关键字特殊的语义？ 译者按：这个问题针对前一个答案，你说 obj.x 不能做这种简单粗暴的处理，那么 this.x 可以咯？ this 已经是 JS 混乱的原因之一了；我们不想让它变的更糟。同时，这还存在一个严重的重构风险：如果 const thiz = this; thiz.x 和 this.x 存在不同的语义，将会带来很大的困扰。 而且除了 this，传入的实例的私有成员将无法访问（比如延伸问题 2 的 js 示例中传入的 a）。 延伸问题 5：为什么不禁止除 this 之外的对象对私有成员的访问？举个栗子，这样一来甚至可以使用 x 替代 this.x 表示对私有属性的访问？ 译者按：这个问题再做了一次延伸，上面提到传入的实例的私有成员不能访问，这个问题是：不能访问就不能访问呗，有什么关系？ 这个提案的目的是允许同类实例之间私有属性的互相访问。另外，使用裸标识符（即使用 x 代替 this.x）不是 JS 的常见做法（除了 with，而 with 的设计也通常被认为是一个错误）。 译者按：一系列延伸问题到此结束，这类问题弄懂了基本上就掌握私有成员的核心语义和设计原则了。 为什么 this.#x 可以访问私有属性，而 this[#x]不行？ 这会让属性访问的语义更复杂。 动态访问违背了 私有 的概念。举个栗子： 1234567891011class Dict extends null &#123; #data = something_secret; add(key, value) &#123; this[key] = value; &#125; get(key) &#123; return this[key]; &#125;&#125;new Dict().get("#data"); // 返回了私有属性 延伸问题 1：赋予 this.#x 和 this[#x] 不同的语义是否破坏了当前语法的稳定性？不完全是，但这确实是个问题。不过从某个角度上来说，this.#x 在当前的语法中是非法的，这已经破坏了当前语法的稳定性。 另一方面，this.#x 和 this[#x] 之间的差异比你看到的还要大，这也是当前提案的不足。 为什么不能是 this#x，把 . 去掉？这是可行的，但是如果我们再简化为 #x 就会出问题。 译者按：这个说法很简单，我直接列在下面 栗子： 12345678&gt; class X &#123;&gt; #y&gt; z() &#123;&gt; w()&gt; #y() // 会被解析为w()#y&gt; &#125;&gt; &#125;&gt; 泛言之，因为 this.# 的语义更为清晰，委员会基本都支持这种写法。 译者按：这也是被认为没有说服力的一个说辞，因为委员会把 this#x 极端化成了 #x，然后描述 #x 的不足，却没有直接给出 this#x 的不足。 为什么不是 private x？这种声明方式是其他语言使用的(尤其是 Java)，这意味着使用 this.x 访问该私有成员。 假设 obj 是类实例，在类外部使用 obj.x 表达式，JS 将会静默地创建或访问公共成员，而不是抛出一个错误，这将会是 bug 的主要潜在来源。 它还使声明和访问对称，就像公共成员一样： 1234567class A &#123; pub = 0; #priv = 1; m() &#123; return this.pub + this.#priv; &#125;&#125; 译者按：这里说明了为什么使用 # 不使用 private 的主要原因。我们理一下： 如果我们使用 private 12345678910&gt; class A &#123;&gt; private p;&gt; say() &#123;&gt; console.log(this.p);&gt; &#125;&gt; &#125;&gt; const a = new A;&gt; console.log(a.p);&gt; a.p = 1;&gt; 例子当中，对属性的创建如果不抛错，是否就会创建一个公共字段？如果创建了公共字段，调用 a.say() 打印的是公共字段还是私有字段？是不是打印哪个都感觉不对？可能你会说，那就抛错好了？那这样就是运行时检测，这个问题在上面有过描述。 为什么这个提案要允许不同实例间访问私有成员？其他语言也是这样的吗？因为这个功能非常有用，举个栗子：判断 Point 是否相等的 equals 方法。 实际上，其他语言由于同样的原因也是这样设计的；举个栗子，以下是合法的 Java 代码 12345class Point &#123; private int x = 0; private int y = 0; public boolean equals(Point p) &#123; return this.x == p.x &amp;&amp; this.y == p.y; &#125;&#125; Unicode 这么多符号，为什么恰恰是 # ？没人说 # 是最漂亮最直观的符号，我们用的是排除法： @ 是最初的选择，但是被 decorators 占用了。委员会考虑过交换 decorators 和 private 的符号（因为它们都还在提案阶段），但最终还是决定尊重社区的习惯。 _ 对现有的项目代码存在兼容问题，因为之前一直允许 _ 作为成员变量名的开头。 其他之前用于中缀运算符，而非前缀运算符的。假设是可以的，比如%, ^, &amp;, ?。考虑到我们的语法有点独特 —— x.%y 当前是非法的，所以不存在二义性。但无论如何，简写会带来问题。举个栗子，以下代码看上去像是将符号作为中缀运算福： 1234567class Foo &#123; %x; method() &#123; calculate().my().value() %x.print() &#125;&#125; 如上，开发人员看上去像是希望调用 this.%x 上的 print 方法。但实际上，将会执行取余的操作！ 其他不属于 ASCII 或者 IDStart 的 Unicode 字符也可以使用，但对于许多用户来说，他们很难在普通的键盘上找到对应的字符。 最后，唯一的选项是更长的符号序列，但比起单个字符似乎不太理想。 译者按：委员会还是举了省略分号时的例子，可是上面也说了，就算是 #，也同样存在问题。 为什么这个提案不允许外部通过一些机制用于反射/访问私有成员（比如说测试的时候）？其他语言也是这样的吗？这样做会违反“封装性”。其他语言允许并不是一个充分的理由，尤其是在某些语言（例如 C++）中，是通过直接修改内存实现的，而且这也不是一个必需的功能。 你所谓的“封装性”和“硬隐私”是什么意思？意味着私有成员是完全内部的：没有任何类外部的 JS 代码可以探测和影响到它们的存在，它们的成员名，它们的值，除非类自己选择暴露他们。（包括子类和父类之间也是完全封装的）。 意味着反射方法们，比如说 getOwnPropertySymbols 也不能暴露私有成员。 意味着如果一个类有一个私有成员 x，在类外部实例化类对象 obj，这时候通过 obj.x 访问的应该是公共成员 x，而不是访问私有成员或者抛出错误。注意这里的现象和 Java 并不一致，因为 Java 可以在编译时进行类型检查并且禁止通过成员名动态访问内容，除非是反射接口。 为什么这个提案会将封装性作为目的？ 库的作者们发现，库的使用者们开始依赖任何接口的公开部分，而非文档上的那部分（即希望使用者们关注的部分）。一般情况下，他们并不认为他们可以随意的破坏使用者的页面和应用，即使使用者没有参照他们的建议作业。因此，他们希望有真正的私有化可以隐藏实现细节。 虽然使用实例闭包或者 WeakMaps 已经可以模拟真实的封装（如下），但是两种方式和类结合都过于浪费，而且还涉及了内存使用的语义，也许这很让人惊讶。此外, 实例闭包的方式还禁止同类的实例间共享私有成员（如上]），而 WeakMaps 的方式还存在一个暴露私有数据的潜在风险，并且运行效率更低。 隐藏但不封装也可以通过使用 Symbol 作为属性名实现（如下）。 当前提案正在努力推进硬隐私，使 decorators 或者其他机制提供给类一个可选的逃生通道。我们计划在此阶段收集反馈，以确定这是否是正确的语义。 查看这个 issue 了解更多。 使用 WeakMap 如何模拟封装？12345678910111213141516const Person = (function() &#123; const privates = new WeakMap(); let ids = 0; return class Person &#123; constructor(name) &#123; this.name = name; privates.set(this, &#123; id: ids++ &#125;); &#125; equals(otherPerson) &#123; return privates.get(this).id === privates.get(otherPerson).id; &#125; &#125;;&#125;)();let alice = new Person("Alice");let bob = new Person("Bob");alice.equals(bob); // false 然而这里还是存在一个潜在的问题。假设我们在构造时添加一个回调函数： 1234567891011121314151617181920const Person = (function() &#123; const privates = new WeakMap(); let ids = 0; return class Person &#123; constructor(name, makeGreeting) &#123; this.name = name; privates.set(this, &#123; id: ids++, makeGreeting &#125;); &#125; equals(otherPerson) &#123; return privates.get(this).id === privates.get(otherPerson).id; &#125; greet(otherPerson) &#123; return privates.get(this).makeGreeting(otherPerson.name); &#125; &#125;;&#125;)();let alice = new Person("Alice", name =&gt; `Hello, $&#123;name&#125;!`);let bob = new Person("Bob", name =&gt; `Hi, $&#123;name&#125;.`);alice.equals(bob); // falsealice.greet(bob); // === 'Hello, Bob!' 乍看好像没有问题，但是： 123456let mallory = new Person("Mallory", function(name) &#123; this.id = 0; return `o/ $&#123;name&#125;`;&#125;);mallory.greet(bob); // === 'o/ Bob'mallory.equals(alice); // true. 错了！ 你怎么使用 Symbols 提供隐藏但不封装的属性？123456789101112131415161718const Person = (function() &#123; const _id = Symbol("id"); let ids = 0; return class Person &#123; constructor(name) &#123; this.name = name; this[_id] = ids++; &#125; equals(otherPerson) &#123; return this[_id] === otherPerson[_id]; &#125; &#125;;&#125;)();let alice = new Person("Alice");let bob = new Person("Bob");alice.equals(bob); // falsealice[Object.getOwnPropertySymbols(alice)[0]]; // == 0，alice 的 id. 译者按：FAQ 到此结束，可能有的地方会比较晦涩，多看几遍写几个 demo 基本就懂了。我觉得技术存在 看山是山 -&gt; 看山不是山 -&gt; 看山还是山 这样一个渐进的过程，翻译这篇 FAQ 也并非为 # 辩护，只是现在很多质疑还停留在 看山是山 这样一个阶段。我希望这篇 FAQ 可以让你 看山不是山，最后达到 看山还是山 的境界：问题还是存在问题，不过是站在更全面和系统的角度去思考问题。]]></content>
      <categories>
        <category>翻译</category>
        <category>前端</category>
        <category>ES</category>
      </categories>
      <tags>
        <tag>翻译</tag>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TC39 标准追踪：babel 中的 decorators]]></title>
    <url>%2F2018%2F09%2F22%2FTC39%20%E6%A0%87%E5%87%86%E8%BF%BD%E8%B8%AA%EF%BC%9Ababel%20%E4%B8%AD%E7%9A%84%20decorators%2F</url>
    <content type="text"><![CDATA[翻译自 TC39 Standards Track Decorators in Babel &emsp;&emsp;Babel 7.1.0 终于支持了新的 decorators 提案：你可以通过使用 @babel/plugin-proposal-decorators 进行体验。 历史的进程&emsp;&emsp;decorators 的第一个方案是由Yehuda Katz在三年前提出的。TypeScript 也在1.5 版本（2015）与 ES6 特性一起发布了 decorators。一些主流的前端框架，比如 angular 和 MobX，也开始用 decorators 加强开发体验：这让 decorators 更加流行，却让社区误以为 decorators 是一个稳定的特性。 &emsp;&emsp;Babel 在5.0 版本实现了 decorators。但是在 Babel 6 移除了它，因为它并不稳定。为此 Logan Smyth 创建了非官方插件 babel-plugin-transform-decorators-legacy，这个插件的实现和 Babel 5 保持一致。直到 Babel 7 alpha 发布，这个插件才重新回到 Babel 的官方库中。该插件仍然使用旧提案的语义，因为新的语义还不够明确。 &emsp;&emsp;从那时候开始，Daniel Ehrenberg 和 Brian Terlson 开始协助 Yehuda Katz 整理新的 decorators 提案，他们几乎重写了这份提案。但即便如此，仍然无法保证面面俱到，迄今为止的实现方式还是不够兼容。 &emsp;&emsp;Babel 7.0.0 为 @babel/plugin-proposal-decorators 引入了一个配置项：legacy，但是当时它只存在 true 这一个合法的值。这个突破性的变化用于日后新旧版本的平滑过渡。 &emsp;&emsp;Babel 7.1.0 提供了对新提案的支持，而且 @babel/plugin-proposal-decorators 默认启用新的实现。 &emsp;&emsp;新提案同时支持对私有成员和私有方法进行装饰，但这些特性在 Babel 中尚未实现，或许很快就会实现了。 新提案有哪些变化？&emsp;&emsp;虽然新提案看上去和旧提案很像，但几个关键的差别导致了两者的不兼容。 语法&emsp;&emsp;旧提案支持任意的左值表达式作为 decorators 的 body（即@后面的内容）。举个例子，这是合法的代码： 1234567class MyClass &#123; @getDecorators().methods[name] foo() &#123;&#125; @decorator [bar]() &#123;&#125;&#125; &emsp;&emsp;这个语法有个问题：[…] 符号同时作为 decorators body 中的属性访问符（即 methods[name] 中的 [name] ）和类方法的计算属性名（即 [bar]() {} 中的 [bar] ）。为了防止语义模糊，新提案中只允许 . 作为属性访问符。如果你想实现诸如@getDecorators().methods[name]的功能，需要借助圆括号： 1234567class MyClass &#123; @(getDecorators().methods[name]) foo() &#123;&#125; @decorator [bar]() &#123;&#125;&#125; 译者按：以上的例子我按个人的理解做了调整。而且据我测试，第一个例子中的第二个 decorator 的写法在旧提案中是错误的。因为 [bar] 会作为 decorators body 的 token 而非 class method 的 name。那么 class method 就不存在 name，会报 unexpected token 的语法错误。 对象 decorators&emsp;&emsp;旧提案除了支持类 decorators、类成员 decorators，还支持对象 decorators： 123456const myObj = &#123; @dec1 foo: 3, @dec2 bar() &#123;&#125;&#125;; &emsp;&emsp;鉴于当前的对象 decorators 语义存在不兼容性，该特性从提案从被移除了。如果你在代码中使用了此特性，请保持关注，因为在后续的 提案 中可能被再次引入。 decorators 参数&emsp;&emsp;第三个关键的改动是 decorators 的参数列表 &emsp;&emsp;在旧提案中，类成员 decorators 接收三个参数，target（类的原型）、key（成员名）、property descriptor（属性描述符）—— 类似于 Object.defineProperty 的参数列表。而类 decorators 仅接收 constructor 这一个参数。 &emsp;&emsp;新提案在这点上要强大的多：成员 decorators 接收一个对象，这个对象包含以下属性，你可以对其进行任意的修改：descriptor(原 descriptor)、key(成员名)、placement(属性的位置，static、prototype、own)、kind(属性的类型，field、method)。 &emsp;&emsp;类 decorators 同样接收一个对象，通过这个对象可以访问到所有的类成员 decorators 的入参，这个特性确保了在创建类之前还可以对类成员做进一步的修改。 译者按：这部分才是最重大的修改，也是不兼容的核心原因。如果要一一列出比较,应该独立成一篇 blog，所以此处不做赘述。 升级方式&emsp;&emsp;由于不兼容，如果项目中采用了新提案，就不能使用旧的 decorators：因为现存的库（MobX， Angular 等）都没有引入新特性，这会导致迁移过程非常慢。鉴于这个问题，我们发布了一个工具包，你可以在你的代码中使用它包装原有的 decorators 作为变通的方案。先运行这个工具包，然后你就可以在 Babel 的 config 中配置新提案了。 &emsp;&emsp;你可以这样更新你的文件 12npm install wrap-legacy-decorators -Dnpx wrap-legacy-decorators src/file-with-decorators.js --decorators-before-export --write &emsp;&emsp;如果你的代码运行在 node 环境，或者你使用 webpack 或者 rollup 打包你的代码，你可以引入外部依赖而不是在每个文件中都注入工具包提供的包装函数。 12npm install decorators-compatnpx wrap-legacy-decorators src/file-with-decorators.js --decorators-before-export --external-helpers --write &emsp;&emsp;更多的信息，你可以参考这个文档。 已知问题&emsp;&emsp;新提案并非是面面俱到的：decorators 是个非常大的特性，要完整的定义它非常的复杂。 Exported Classes 的 decorators 应该放在哪里？ tc39/proposal-decorators#69 &emsp;&emsp;decorators 提案在这个问题上反复摇摆：decorators 应该放在关键字 export 的前面还是后面？ 123456export @decorator class MyClass &#123;&#125;// or@decoratorexport class MyClass &#123;&#125; &emsp;&emsp;这里潜在的一个问题是：export 关键字是类的一部分还是一个“包装器”。第一个例子中，因为 decorators 必须放在声明的开头，所以它应该放在 decorators 后面；第二个例子中，因为 decorators 是声明的一部分，所以它应该放在 decorators 前面。 对于私有成员，decorators 应该采用怎样的安全策略？&emsp;&emsp;decorators 引发了一个重要的安全问题：如果私有成员可以被装饰，那么成员名会泄露。这里需要考虑不同的安全等级： decorators 不能泄露私有成员名，不然恶意代码可以从 decorators 中窃取此信息 私有成员的 decorators 是可信的，类 decorators 是不可信的？ 硬隐私 意味着私有成员只能在类内部访问：那么 decorators 应该访问私有成员名吗？还是只能装饰公有成员？ &emsp;&emsp;这些问题在解决前需要进一步讨论，这也是 Babel 的意义所在。 Babel 充当的角色&emsp;&emsp;随着 Babel 7 的发布，我们开始利用我们在 JS 生态中的地位，通过让开发人员对于不同版本的提案进行体验和给予反馈以帮助提案作者进行决策。 &emsp;&emsp;出于这个原因，更新 @babel/plugin-proposal-decorators 之后，我们引入了新的选项：decoratorsBeforeExport。通过这个选项，你可以尝试切换 export @decorator class C {} 和 @decorator export default class 这两种不同的语法。 &emsp;&emsp;我们还将引入另一个选项来自定义隐私策略。这些选项是必填项，直到 TC39 做出最终的决定，而这个决定将成为默认项。 &emsp;&emsp;如果你是直接使用我们的解析器（@babel/parser，以前的 babylon），你也可以在版本 7.0.0 中使用 decoratorsBeforeExport 这个选项。 123const ast = babylon.parse(code, &#123; plugins: [["decorators", &#123; decoratorsBeforeExport: true &#125;]]&#125;); 使用方式1npm install @babel/plugin-proposal-decorators -D 123456&#123; "plugins": [ "@babel/plugin-proposal-decorators", &#123; "decoratorsBeforeExport": true &#125; ]&#125; &emsp;&emsp;查看 @babel/plugin-proposal-decorators 了解更多的选项。 你的角色&emsp;&emsp;作为一个 JS 开发人员，你可以和我们一起勾勒这个语言的未来。你可以尝试 decorators 提供的各种各样的语义，并给予提案作者一定的反馈。我们需要知道它用于真实项目的情况！你也可以通过阅读 提案仓库 中的讨论和会议纪要了解为何这样设计。 &emsp;&emsp;如果你现在就想体验 decorators，你可以在我们的 线上解释器 通过设置不同的 presets 选项体验它。]]></content>
      <categories>
        <category>翻译</category>
        <category>前端</category>
        <category>ES</category>
      </categories>
      <tags>
        <tag>翻译</tag>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[聊一聊promise的前世今生]]></title>
    <url>%2F2018%2F05%2F22%2F%E8%81%8A%E4%B8%80%E8%81%8Apromise%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;promise 的概念已经出现很久了，浏览器、nodejs 都已经全部实现 promise 了。现在来聊，是不是有点过时了？ &emsp;&emsp;确实，如果不扯淡，这篇随笔根本不会有太多内容。所以，我就尽可能的，多扯一扯，聊一聊 promise 的另一面。 &emsp;&emsp;大家应该都知道怎么创建一个 promise 123var promise = new Promise(resolve =&gt; &#123; setTimeout(() =&gt; resolve("tarol"), 3000);&#125;); &emsp;&emsp;如果从业时间长一点，会知道以前的 promise 不是这么创建的。比如如果你用过 jquery，jquery 在 1.5 引入 deferred 的概念，里面是这样创建 promise 的 12var defer = $.Deferred();var promise = defer.promise(); &emsp;&emsp;如果你用过 angular，里面有个 promise service 叫$q，它又是这么创建 promise 的 12var defer = $q.defer();var promise = defer.promise; &emsp;&emsp;好了，这里已经有三种创建 promise 的方式了。其中第一种是现在最常见的，第二种和第三种看上去很像，但却有细微的差别。比如 jquery 里面是通过执行函数 promise()返回 promise，而 angular 中 defer 的属性就是 promise。如果你还有兴趣，那么我从头开始讲。 &emsp;&emsp;promise 的引入是为了规范化异步操作，随着前端的逻辑越来越复杂，异步操作的问题越来越亟待解决。首先大量的异步操作形成了 N 级的大括号，俗称“回调地狱”；其次 callback 的写法没有标准，nodejs 里面的 callback 一般是(err, data) =&gt; {…}，jquery 里面的 success callback 又是 data =&gt; {…}。在这种场景下，很多异步流程控制的类库应运而生。 &emsp;&emsp;作为前端，一般最早接触 promise 的概念是在 jquery 的 1.5 版本发布的 deferred objects。但是前端最早引入 promise 的概念的却不是 jquery，而是 dojo，而且 promise 之所以叫 promise 也是因为 dojo。Promises/A 标准的撰写者 KrisZyp 于 09 年在 google 的 CommonJS 讨论组发了一个贴子，讨论了 promise API 的设计思路。他声称想将这类 API 命名为 future，但是 dojo 已经实现的 deferred 机制中用到了 promise 这个术语，所以还是继续使用 promise 为此机制命名。之后便有了 CommonJS 社区的这个 proposal，即 Promises/A。如果你对什么是 deferred，什么是 promise 还存在疑问，不要急，先跳过，后面会讲到。 &emsp;&emsp;Promises/A 是一个非常简单的 proposal，它只阐述了 promise 的基本运行规则 promise 对象存在三种状态：unfulfilled, fulfilled 和 failed 一旦 promise 由 unfulfilled 切换为 fulfilled 或者 failed 状态，它的状态不可再改变 proposal 没有定义如何创建 promise promise 对象必须包含 then 方法：then(fulfilledHandler, errorHandler, progressHandler) 交互式 promise 对象作为 promise 对象的扩展，需要包含 get 方法和 call 方法：get(propertyName)、call(functionName, arg1, arg2, …) &emsp;&emsp;如果你研究过现在浏览器或 nodejs 的 promise，你会发现 Promises/A 好像处处相似，但又处处不同。比如三种状态是这个叫法吗？progressHandler 没见过啊！get、call 又是什么鬼？前面两个问题可以先放一放，因为后面会做出解答。第三个问题这里解释下，什么是 get，什么是 call，它们的设计初衷是什么，应用场景是什么？虽然现在你轻易见不到它们了，但是了解它们有助于理解后面的部分内容。 &emsp;&emsp;一般来说，promise 调用链存在两条管道，一条是 promise 链，就是下图一中的多个 promise，一条是回调函数中的值链，就是下图二中的多个 value 或 reason。 &emsp;&emsp;现在我们都知道，值链中前一个 callback（callback1）的返回值是后一个 callback（callback2）的入参（这里仅讨论简单值类型的 fulfilled 的情况）。但是如果我 callback1 返回的是 a，而 callback2 的入参我希望是 a.b 呢？或许你可以说那我 callback1 返回 a.b 就是了，那如果 callback1 和 callback2 都是固定的业务算法，它们的入参和返回都是固定的，不能随便修改，那又怎么办呢？如果 promise 只支持 then，那么我们需要在两个 then 之间插入一个新的 then：promise.then(callback1).then(a =&gt; a.b).then(callback2)。而 get 解决的就是这个问题，有了 get 后，可以这么写：promise.then(callback1).get(‘b’).then(callback2)，这样 promise 链条中就可以减少一些奇怪的东西。同理，当 a.b 是一个函数，而 callback2 期望的入参是 a.b(c)，那么可以这样写：promise.then(callback1).call(‘b’, c).then(callback2)。 &emsp;&emsp;我们回到之前的话题，现在常见的 promise 和 Promise/A 到底是什么关系，为什么会有花非花雾非雾的感觉？原因很简单，常见的 promise 是参照 Promises/A 的进阶版——Promises/A+定义的。 &emsp;&emsp;Promises/A 存在一些很明显的问题，如果你了解 TC39 process 或者 RFC 等标准审核流程，你会发现： 首先 Promise/A 里面用语不规范，尤其是对术语的使用 只描述 API 的用途，没有详细的算法 &emsp;&emsp;Promises/A+就是基于这样的问题产生的，要说明的是 Promises/A+的维护者不再是前面提到的 KrisZyp，而是由一个组织维护的。 &emsp;&emsp;组织的成员如下，其中圈出来的另一个 Kris 需要留意一下，之后还会提到他。 &emsp;&emsp;Promises/A+在 Promises/A 的基础上做了如下几点修正： 移除了 then 的第三个入参 progressHandler，所以你见不到了 移除了交互式 promise 的 API：get 和 call，所以你用不了了 规定 promise2 = promise1.then(…)中允许 promise1 === promise2，但是文档必须对此情况进行说明 promise 的三种状态术语化：pending，fulfilled，rejected 规定 fulfilled 传递的参数叫 value，rejected 传递的参数叫 reason 严格区分 thenable 和 promise，thenable 作为 promise 的鸭子类型存在，thenable 是什么、鸭子类型是什么，下面会解释 使用正式且标准的语言描述了 then 方法的逻辑算法，promises-aplus 还提供了验证实现的 test case &emsp;&emsp;Promises/A+没有新增任何 API，而且删掉了 Promises/A 的部分冗余设计。这样一来，Promises/A+其实只规定了，promise 对象必须包含指定算法的方法 then。接下来我会归整下所谓的 then 算法，以及它存在哪些不常见的调用方式。 &emsp;&emsp;then 的基本调用方式：promise.then(onFulfilled, onRejected)，我默认你已经掌握了基础的 then 调用，所以常见的场景以下不做举例。 onFulfilled 和 onRejected 都是可选的，如果省略了或者类型不是函数，前面流过来的 value 或者 reason 直接流到下一个 callback，我们举两个极端的例子 123456Promise.resolve("resolve") .then() .then(value =&gt; console.log(value)); // resolvePromise.reject("reject") .then() .then(void 0, reason =&gt; console.log(reason)); //reason &emsp;&emsp;&emsp;这个特性决定了我们现在可以这样写异常处理 12345Promise.reject("reason") .then(v =&gt; v) .then(v =&gt; v) .then(v =&gt; v) .catch(reason =&gt; console.log(reason)); //reason &emsp;&emsp;&emsp;但是如果你在 then 链条中，插入一个空的 onRejected，reason 就流不到 catch 了。因为 onRejected 返回了 undefined，下一个 promise 处于 fulfilled 态 12345Promise.reject("reason") .then(v =&gt; v) .then(v =&gt; v) .then(v =&gt; v, () =&gt; &#123;&#125;) .catch(reason =&gt; console.log(reason)); onFulfilled 或 onRejected 只能调用一次，且只能以函数的形式被调用，对应的是不能以属性方法的方式被调用，比如 123456789var name = "tarol";var person = &#123; name: "okal", say: function() &#123; console.log(this.name); &#125;&#125;;person.say(); //okalPromise.resolve("value").then(person.say); //tarol &emsp;&emsp;&emsp;如果你想第二行还是打印出’okal’，请使用 bind 1Promise.resolve("value").then(person.say.bind(person)); //okal onFulfilled 或者 onRejected 中抛出异常，则 promise2 状态置为 rejected 1var promise2 = promise1.then(onFulfilled, onRejected); 上面的例子中，onFulfilled 或者 onRejected 如果返回了任意值 x（如果不存在 return 语句，则是返回 undefined），则进入解析过程[Resolve]，解析过程[Resolve]算法如下： 如果 x 是 promise，则 promise2 的状态取决于 x 的状态 那么你会想，如果 x === promise2 呢？promise2 的状态取决于本身的状态？这就像把 obj 的原型设置为自身一样肯定是不允许的。所以其实在第一条规则之前，还有一条：如果 x === promise2，抛出 TypeError。之所以把这条规则放到下面，是用前一条规则引出这条规则的必要性 如果 x 不是对象，promise2 置为 fulfilled，value 为 x 如果 x 是对象 访问 x.then 时，如果抛出异常，则 promise2 置为 rejected，reason 为抛出的异常 12345678var obj = &#123; get then() &#123; throw "err"; &#125;&#125;;Promise.resolve("value") .then(v =&gt; obj) .catch(reason =&gt; console.log(reason)); // err 如果 then 不是函数，则同 3 12345678Promise.resolve("value") .then(v =&gt; &#123; return &#123; name: "tarol", then: void 0 &#125;; &#125;) .then(v =&gt; console.log(v.name)); //tarol &emsp;&emsp;&emsp;如果 then 是函数，那么 x 就是一个 thenable，then 会被立即调用，传入参数 resolve 和 reject，并绑定 x 作为 this。 如果执行过程中调用了 resolve(y)，那么进入下一个解析过程[Resolve]，可以看出解析过程实际上是一个递归函数 如果调用了 reject(r)，那么 promise2 置为 rejected，reason 为 r 调用 resolve 或 reject 后，后面的代码依然会运行 12345678910Promise.resolve("value") .then(v =&gt; &#123; return &#123; then: (resolve, reject) =&gt; &#123; resolve(v); console.log("continue"); // continue &#125; &#125;; &#125;) .then(v =&gt; console.log(v)); // value 如果既调用了 resolve、又调用了 reject，仅第一个调用有效 12345678910Promise.resolve("value") .then(v =&gt; &#123; return &#123; then: (resolve, reject) =&gt; &#123; resolve("resolve"); reject("reject"); &#125; &#125;; &#125;) .then(v =&gt; console.log(v), r =&gt; console.log(r)); // resolve 如果抛出了异常，而抛出的时机在 resolve 或 reject 前，promise2 置为 rejected，reason 为异常本身。如果抛出的时机在 resolve 或 reject 之后，则忽略这个异常。以下 case 在 chrome 66 上运行失败，promise 处于 pending 状态不切换，但是在 nodejs v8.11.1 上运行成功 12345678910Promise.resolve("value") .then(v =&gt; &#123; return &#123; then: (resolve, reject) =&gt; &#123; resolve("resolve"); throw "err"; &#125; &#125;; &#125;) .then(v =&gt; console.log(v), r =&gt; console.log(r)); // resolve 12345678910Promise.resolve("value") .then(v =&gt; &#123; return &#123; then: (resolve, reject) =&gt; &#123; throw "err"; resolve("resolve"); &#125; &#125;; &#125;) .then(v =&gt; console.log(v), r =&gt; console.log(r)); // err &emsp;&emsp;上面的例子中涉及到一个重要的概念，就是 thenable。简单的说，thenable 是 promise 的鸭子类型。什么是鸭子类型？搜索引擎可以告诉你更详尽的解释，长话短说就是“行为像鸭子那么它就是鸭子”，即类型的判断取决于对象的行为（对象暴露的方法）。放到 promise 中就是，一个对象如果存在 then 方法，那么它就是 thenable 对象，可以作为特殊类型（promise 和 thenable）进入 promise 的值链。 &emsp;&emsp;promise 和 thenble 如此相像，但是为什么在解析过程[Resolve]中交由不同的分支处理？那是因为虽然 promise 和 thenable 开放的接口一样，但过程角色不一样。promise 中 then 的实现是由 Promises/A+规定的（见 then 算法），入参 onFulfilled 和 onRejected 是由开发者实现的。而 thenable 中 then 是由开发者实现的，入参 resolve 和 reject 的实现是由 Promises/A+规定的（见 then 算法 3.3.3）。thenable 的提出其实是为了可扩展性，其他的类库只要实现了符合 Promises/A+规定的 thenable，都可以无缝衔接到 Promises/A+的实现库中。 &emsp;&emsp;Promises/A+先介绍到这里了。如果你细心，你会发现前面漏掉了一个关键的内容，就是之前反复提到的如何创建 promise。Promise/A+中并没有提及，而在当下来说，new Promise(resolver)的创建方式仿佛再正常不过了，普及程度让人忘了还有 deferred.promise 这种方式。那么 Promise 构造器又是谁提出来的，它为什么击败了 deferred 成为了 promise 的主流创建方式？ &emsp;&emsp;首先提出 Promise 构造器的标准大名鼎鼎，就是 es6。现在你见到的 promise，一般都是 es6 的实现。es6 不仅规定了 Promise 构造函数，还规定了 Promise.all、Promise.race、Promise.reject、Promise.resolve、Promise.prototype.catch、Promise.prototype.then 一系列耳熟能详的 API（Promise.try、Promise.prototype.finally 尚未正式成为 es 标准），其中 then 的算法就是将 Promises/A+的算法使用 es 的标准写法规范了下来，即将 Promises/A+的逻辑算法转化为了 es 中基于解释器 API 的具体算法。 &emsp;&emsp;那么为什么 es6 放弃了大行其道的 deferred，最终敲定了 Promise 构造器的创建方式呢？我们写两个 demo 感受下不同 1234567var Q = require("q");var deferred = Q.defer();deferred.promise.then(v =&gt; console.log(v));setTimeout(() =&gt; deferred.resolve("tarol"), 3000); 12345var p = new Promise(resolve =&gt; &#123; setTimeout(() =&gt; resolve("tarol"), 3000);&#125;);p.then(v =&gt; console.log(v)); &emsp;&emsp;前者是 deferred 方式，需要依赖类库 Q；后者是 es6 方式，可以在 nodejs 环境直接运行。 &emsp;&emsp;如果你习惯使用 deferred，你会觉得 es6 的方式非常不合理： &emsp;&emsp;首先，promise 的产生的原因之一是为了解决回调地狱的问题，而 Promise 构造器的方式在构造函数中直接注入了一个函数，如果这个函数在复杂点，同样存在一堆大括号。 &emsp;&emsp;其次，promise 基于订阅发布模式实现，deferred.resolve/reject 可以理解为发布器/触发器（trigger），deferred.promise.then 可以理解为订阅器（on）。在多模块编程时，我可以在一个公共模块创建 deferred，然后在 A 模块引用公共模块的触发器触发状态的切换，在 B 模块引用公共模块使用订阅器添加监听者，这样很方便的实现了两个没有联系的模块间互相通信。而 es6 的方式，触发器在 promise 构造时就生成了并且立即进入触发阶段（即创建 promise 到 promise 被 fulfill 或者 reject 之间的过程），自由度减少了很多。 &emsp;&emsp;我一度很反感这种创建方式，认为这是一种束缚，直到我看到了 bluebird（Promise/A+的实现库）讨论组中某个帖子的解释。大概说一下，回帖人的意思是，promise 首先应该是一个异步流程控制的解决方案，流程控制包括了正常的数据流和异常流程处理。而 deferred 的方式存在一个致命的缺陷，就是 promise 链的第一个 promise（deferred.promise）的触发阶段抛出的异常是不交由 promise 自动处理的。我写几个 demo 解释下这句话 12345678910var Q = require("q");var deferred = Q.defer();deferred.promise .then(v =&gt; &#123; throw "err"; &#125;) .catch(reason =&gt; console.log(reason)); // errsetTimeout(() =&gt; deferred.resolve("tarol")); &emsp;&emsp;以上是一个正常的异常流程处理，在值链中抛出了异常，自动触发下一个 promise 的 onRejected。但是如果在 deferred.promise 触发阶段的业务流程中抛出了异常呢？ 123456789var Q = require("q");var deferred = Q.defer();deferred.promise.catch(reason =&gt; console.log(reason)); // 不触发setTimeout(() =&gt; &#123; throw "err"; deferred.resolve("tarol");&#125;); &emsp;&emsp;这个异常将抛出到最外层，而不是由 promise 进行流程控制，如果想让 promise 处理抛出的异常，必须这么写 12345678910111213var Q = require("q");var deferred = Q.defer();deferred.promise.catch(reason =&gt; console.log(reason)); // errsetTimeout(() =&gt; &#123; try &#123; throw "err"; &#125; catch (e) &#123; deferred.reject(e); &#125;&#125;); &emsp;&emsp;deferred 的问题就在这里了，在 deferred.promise 触发阶段抛出的异常，不会自动交由 promise 链进行控制。而 es6 的方式就简单了 12345var p = new Promise(() =&gt; &#123; throw "err";&#125;);p.catch(r =&gt; console.log(r)); // err &emsp;&emsp;可见，TC39 在设计 Promise 接口时，首先考虑的是将 Promise 看作一个异步流程控制的工具，而非一个订阅发布的事件模块，所以最终定下了 new Promise(resolver)这样一种创建方式。 &emsp;&emsp;但是如果你说：我不听，我不听，deferred 就是比 new Promise 好，而且我的 promise 在触发阶段是不会抛出异常的。那好，还有另外一套标准满足你，那就是 Promises/B 和 Promises/D。其中 Promises/D 可以看做 Promises/B 的升级版，就如同 Promises/A+之于 Promises/A。这两个标准的撰写者都是同一个人，就是上面 Promises/A+组织中圈起来的大胡子，他不仅维护了这两个标准，还写了一个实现库，就是上面提到的 Q，同时 angular 中的$q 也是参照 Q 实现的。 Promises/B 和 Promises/D（以下统称为 Promises/B）都位于 CommonJS 社区，但是由于没有被社区采用，处于废弃的状态。而 Q 却是一个长期维护的类库，所以 Q 的实现和两个标准已经有所脱离，请知悉。 &emsp;&emsp;Promises/B 和 es6 可以说是 Promises/A+的两个分支，基于不同的设计理念在 Promises/A+的基础上设计了两套不同的 promise 规则。鉴于 Promises/A+在创建 promise 上的空白，Promises/B 同样提供了创建 promise 的方法，而且是大量创建 promise 的方法。以下这些方法都由实现 Promises/B 的模块提供，而不是 Promises/B 中 promise 对象的方法。 when(value, callback, errback_opt)：类似于 es6 中 Promise.resolve(value).then(callback, errback_opt) asap(value, callback, errback_opt)：基本逻辑同 when，但是 when 中 callback 的调用会放在 setTimeout(callback, 0)中，而 asap 中 callback 是直接调用，该接口在 Q 中已经废弃 enqueue(task Function)：将一个 callback 插入队列并执行，其实就是 fn =&gt; setTimeout(fn, 0)，该接口在 Q 中已经废弃 get(object, name)：类似于 Promise.resolve(object[name]) post(object, name, args)：类似于 Promise.resolve(object[name].apply(object, args)) put(object, name, value)：类似于 Promise.resolve({then: resolve =&gt; object[name] = value; resolve()})，该接口在 Q 中重命名为 set del(object, name)：类似于 Promise.resolve({then: resolve =&gt; delete object[name]; resolve()})，该接口在 Q 中 alias 为 delete makePromise：创建一个流程控制类的 promise，并自定义其 verbs 方法，verbs 方法指以上的 get、post、put、del defer：创建一个 deferred，包含一个延时类的 promise reject：创建一个 rejected 的流程控制类 promise ref：创建一个 resolve 的流程控制类 promise，该接口在 Q 中重命名为 fulfill isPromise：判断一个对象是否是 promise method：传入 verbs 返回对应的函数，如 method(‘get’)即是上面 4 中的 get，已废弃 &emsp;&emsp;不知道以上 API 的应用场景和具体用法不要紧，我们先总结一下。Promises/B 和 es6 理念上最大的出入在于，es6 更多的把 promise 定义为一个异步流程控制的模块，而 Promises/B 更多的把 promise 作为一个流程控制的模块。所以 Promises/B 在创建一个 promise 的时候，可以选择使用 makePromise 创建一个纯粹的操作数据的流程控制的 promise，而 get、post、put、del、reject、ref 等都是通过调用 makePromise 实现的，是 makePromise 的上层 API；也可以使用 defer 创建一个 deferred，包含 promise 这个属性，对应一个延时类的 promise。 &emsp;&emsp;延时类的 promise 经过前面的解释基本都了解用法和场景，那对数据进行流程控制的 promise 呢？在上面 Promises/A 部分说明了 get 和 call 两个 API 的用法和场景，Promises/B 的 get 对应的就是 Promises/A 的 get，call 对应的是 post。put/set 是 Promises/B 新增的，和前二者一样，在操作数据时进行流程控制。比如在严格模式下，如果对象 a 的属性 b 的 writable 是 false。这时对 a.b 赋值，是会抛出异常的，如果异常未被捕获，那么会影响后续代码的运行。 1234567891011"use strict";var a = &#123;&#125;;Object.defineProperty(a, "name", &#123; value: "tarol", writable: false&#125;);a.name = "okay";console.log("end"); // 不运行 &emsp;&emsp;这时候如果使用 Q 的 put 进行流程控制，就可以把赋值这部分独立开来，不影响后续代码的运行。 12345678910111213141516"use strict";var Q = require("q");var a = &#123;&#125;;Object.defineProperty(a, "name", &#123; value: "tarol", writable: false&#125;);Q.set(a, "name", "okay").then( () =&gt; console.log("success"), () =&gt; console.log("fail") // fail);console.log("end"); // end &emsp;&emsp;这部分的应用场景是否有价值呢？答案就是见仁见智了，好在 Q 还提供了 makePromise 这个底层 API，自定义 promise 可以实现比增删改查这些 verbs 更强大的功能。比如当我做数据校验的时候可以这样写 123456789101112131415161718var Q = require("q");var p = Q.makePromise(&#123; isNumber: function(v) &#123; if (isNaN(v)) &#123; throw new Error(`$&#123;v&#125; is not a number`); &#125; else &#123; return v; &#125; &#125;&#125;);p.dispatch("isNumber", ["1a"]) .then(v =&gt; console.log(`number is $&#123;v&#125;`)) .catch(err =&gt; console.log("err", err)); // 1a is not a numberp.dispatch("isNumber", ["1"]) .then(v =&gt; console.log(`number is $&#123;v&#125;`)) // number is 1 .catch(err =&gt; console.log("err", err)); &emsp;&emsp;以上不涉及任何异步操作，只是用 Q 对某个业务功能做流程梳理而已。 &emsp;&emsp;而且 Q 并未和 es6 分家，而是在后续的版本中兼容了 es6 的规范（Q.Promise 对应 es6 中的全局 Promise），成为了 es6 的父集，加之 Q 也兼容了 Promises/A 中被 A+抛弃的部分，如 progressHandler、get、call（post）。所以对于 Q，你可以理解为 promise 规范的集大成者，整体来说是值得一用的。 &emsp;&emsp;最后要提到的是最为式微的 promise 规范——Promises/KISS，它的实现库直接用 futures 命名，实现了 KrisZyp 未竟的心愿。如果比较 github 上的 star，KISS 甚至不如我没有提及的 then.js 和 when。但是鉴于和 Q 一样，是有一定实践经验后 CommonJS 社区 promise 规范的提案，所以花少量的篇幅介绍一下。 &emsp;&emsp;Promises/KISS 不将 Promises/A 作为子集，所以它没有提供 then 作为订阅器，代之的是 when 和 whenever 两个订阅器。触发器也不是常见的 resolve、reject，而是 callback、errback 和 fulfill。其中 callback 类似于 notify，即 progressHandler 的触发器，errback 类似于 reject，fulfill 类似于 resolve。 &emsp;&emsp;为什么会有两个订阅器呢？因为 KISS 不像 Promises/A，A 中的 then 中是传入三个监听器，其中 progressHandler 还可以多次触发。但是 KISS 中的 when 和 whenever 一次只能传入一个监听器，所以它要解决的是，同一种订阅方式，怎么订阅三种不同的监听器？ &emsp;&emsp;首先，怎么区分 fulfilledHandler 和 errorHandler 呢？KISS 借鉴了 nodejs 的回调函数方式，第一个参数是 err，第二个参数是 data。所以 fulfilledHandler 和 errorHandler 在一个监听器里这样进行区分： 1234function(err, data) &#123; if (err) &#123;...&#125; // errorHandler else &#123;...&#125; // fulfilledHandler&#125; &emsp;&emsp;那怎么区分多次调用的 progressHandler 呢？使用 when 注册的监听器只能调用一次，使用 whenever 注册的监听器可以调用多次。我们写个 demo 区分 Q 和 KISS 的 API 的不同： 1234567891011var Q = require("q");var defer = Q.defer();defer.promise.then( v =&gt; console.log("fulfill", v), err =&gt; console.log("reject", err), progress =&gt; console.log("progress", progress));defer.notify(20); // progress 20defer.notify(30); // progress 30defer.notify(50); // progress 50defer.resolve("ok"); // fulfill ok 123456789101112131415161718192021222324var future = require("future");var p = new future();var progressHandler = function(err, progress) &#123; if (err) &#123; console.log("err", err); &#125; else &#123; console.log("progress", progress); &#125;&#125;;p.whenever(progressHandler);p.callback(20); // progress 20p.callback(30); // progress 30p.callback(50); // progress 50p.removeCallback(progressHandler); // 需要移除监听器，不然fulfill时也会触发p.when(function(err, v) &#123; // 需要在callback调用后注册fulfill的监听器，不然callback会触发 if (err) &#123; console.log("reject", err); &#125; else &#123; console.log("fulfill", v); &#125;&#125;);p.fulfill(void 0, "ok"); // fulfill ok &emsp;&emsp;可见，实现同样的需求，使用 future 会更麻烦，而且还存在先后顺序的陷阱（我一向认为简单类库的应用代码如果存在严重的先后顺序，是设计的不合格），习惯使用 es6 的 promise 的童鞋还是不建议使用 KISS 标准的 future。 &emsp;&emsp;整篇文章就到这里，前面提到的 then.js 和 when 不再花篇幅介绍了。因为 promise 的实现大同小异，都是订阅发布+特定的流程控制，只是各个标准的出发点和侧重点不同，导致一些语法和接口的不同。而随着 es 标准的越来越完善，其他 promise 的标准要么慢慢消亡（如 future、then.js），要么给后续的 es 标准铺路（如 bluebird、Q）。所以如果你没有什么执念的话，乖乖的跟随 es 标准是最省事的做法。而这边随笔的目的，一是借机整理一下自己使用各个 promise 库时长期存在的疑惑；二是告诉自己，很多现在看来尘埃落地的技术并非天生如此，沿着前路走过来会比站在终点看到更精彩的世界。]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
        <category>ES</category>
      </categories>
      <tags>
        <tag>文章</tag>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[所谓编码--泛谈ASCII、Unicode、UTF8、UTF16、UCS-2等编码格式]]></title>
    <url>%2F2017%2F09%2F15%2F%E6%89%80%E8%B0%93%E7%BC%96%E7%A0%81--%E6%B3%9B%E8%B0%88ASCII%E3%80%81Unicode%E3%80%81UTF8%E3%80%81UTF16%E3%80%81UCS-2%E7%AD%89%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[最近在看 nodejs 的源码，看到 stream 的实现里面满地都是 encoding，不由想起以前看过的一篇文章——在前面的随笔里面有提到过——阮一峰老师的《字符编码笔记:ASCII，Unicode 和 UTF-8》。 好的文章有一个好处，你每次看都会有新的收获，它就像一款拼图，你每次看都能收获几块碎片，补齐之前的认识；而好文章与拼图不一样的是，好文章是一块无垠的世界，当你不愿局限于当前的眼界的时候，你可以主动走出去，外面要更宽广、更精彩的多。 闲话说到这，开始聊聊所谓的编码。 大家都知道，计算机只认识 0 和 1，不认识什么 abc。如果想让计算机显示 abc，那么就要有一张 1 对 1 的表，用这张表告诉计算机，什么样的二进制串——比如（010101011100）——代表的是 a，什么样的串代表的是 b，这个表描述二进制串到符号的对应关系。ASCII 就是这么一张最早也是最简单的表，这张表简单到包含 128 个符号，比如 10 个数字、26 个小写字母、26 个大写字母，和一堆标点符号（如英文句号、逗号等）还有控制字符（如回车、tab 等）。那为什么是 128，不是 100 或 182？因为 128 正好用 7 个 bit（一个 0 或者 1 为一个 bit）表示。那么为什么不是 256 对或者更多？因为对于英语地区 128 个符号够用了，而在 ASCII 推出的那个年代（1967），大家还没开始着眼全球——这点从名字就可以看出来，ASCII = American Standard Code for Information Interchange（美国信息交换标准码），根本就没打算让别人上车。 然后其他语言地区很快入场了，而且随着八位机的普及，1 字节=8bit 成为了共识，大家都盯上了多出来的 128 个位置。这个时代群魔乱舞，基本是个公司就想染指这块标准，乱象直到 1985 年才通过 ISO/IEC 8859 把 EASCII 确定下来。 而在这个过程中，有一个地区的人根本就不跟你玩，就是意表文字地区，明白的说，主要是中日韩。开玩笑，256 个位置，你全让出来都不够我做两句诗。老司机不带怎么办，只能自己开车了，首先是日本站出来，于 1978 年出台了最早的汉字编码，然后中国大陆、中国台湾、韩国都在 80 年代出台了自己的汉字编码。这个时候，大家各自玩各自的没什么问题，聚在一起，问题就来了。比如一篇文章中包含中日韩三种文字，一串 01 的组合在中国的编码对应的是某个字，在日本的编码对应的却是另一个字，那计算机最后到底显示哪个字，计算机也很为难。有冲突怎么办，开个会通通气吧，于是大家坐在一起成立了个组织，叫 CJK-JRG（China, Japan, Korea Joint Research Group）。虽然这个组织折腾了很多年，而且最终提案也被否决了，但是为另一个方案提供了足够的信息，就是 Unicode。 Unicode 项目于 1987 年启动，在吸收了 CJK-JRG 的方案后于 1992 年 6 月份发布 1.0.1 版（之前的 1.0.0 没有包含汉字），迄今为止还在增修，最新的版本是 2017.6.20 公布的 10.0.0。最早的 Unicode 被设计为 16bit，即每个符号占 2byte，最多表示 65536 个符号。而后随着内容的增加，又基于原有设计不变的原则，将最早的 65536 个字符集合称为基本多文种平面（Basic Multilingual Plane, BMP），并添加 16 个辅助平面（总共支持 65536 * 17 = 1114112 个符号）。这样一来，原来的 16bit 就不够用了，需要 21bit 才能准确描述一个符号，相当于 3byte 不到，但是为了以后扩展方便及统一，辅助平面的符号要求使用 4byte 描述。 Unicode 解决了全世界人民用一套符号编码的问题，但却没有解决另一个问题，就是怎么存储的问题。按照一般的想法，所有的符号都必须以最长的 Unicode 符号的标准来存储，也就是 4byte，这样才不会有信息丢失。但是这样的话，对于全部是英文的文档，要浪费掉 3/4 的区域，对于大多数汉字，即 BMP 中的汉字，也要浪费掉 1/2 的区域。所以野蛮的使用 4byte 进行存储是不可取的，那么就要设计一套变长的规则来处理不同类型的符号，这时候 UTF8、UTF16 等就应运而生了，也就是说 UTF8、UTF16 是 Unicode 的一种实现方案（标准的说法，是 Unicode 字符编码五层模型的第三层，如果你对五层模型感兴趣，跳转《刨根究底字符编码》）。 先说 UTF8，UTF8 是完全变长的，占用 1-6byte，乍一看，怎么比直接用 4byte 存储还多出一半呢？其实占用 4byte 的情况是很少的，少到在几乎可以忽略不计，而 5、6byte 基于当前 16 个辅助平面的情况下还用不上。一般来说，英文占用 1byte，中文占用 3byte（CJK-JRG 最早提供给 Unicode 的 20000 多个符号位于位于 U+4E00–U+9FFF，这块区域的符号统一都占 3byte），所以一般来说使用 UTF8 可以节省 1/4 到 3/4 的存储区域。这样似乎解决了存储的问题，但却带来了另一个问题，即识别的问题。比如我给你 3byte 的二进制信息，告诉你这代表了一个字，那你肯定很快能知道是什么字，但我如果不告诉你字数呢，是一个字，两个字，还是三个字？你根本识别不出来这一串二进制是什么。这就是变长的方案需要解决的第二个问题，告诉读取方哪几个 byte 是一组的，UTF8 的规则很简单，我直接从阮老师的博客里搬运过来。 对于单字节的符号，字节的第一位设为 0，后面 7 位为这个符号的 unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的。 对于 n 字节的符号（n&gt;1），第一个字节的前 n 位都设为 1，第 n+1 位设为 0，后面字节的前两位一律设为 10。剩下的没有提及的二进制位，全部为这个符号的 unicode 码。 Unicode 符号范围（十六进制） UTF-8 编码方式（二进制） 0000 0000-0000 007F 0xxxxxxx 0000 0080-0000 07FF 110xxxxx 10xxxxxx 0000 0800-0000 FFFF 1110xxxx 10xxxxxx 10xxxxxx 0001 0000-001F FFFF 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 0020 0000-03FF FFFF 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 0400 0000-7FFF FFFF 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 简单的说，你收到很多个 byte 的二进制，从第一个 byte 开始读，数第一个 0 出现之前的 1，有几个 1 就代表前面几个 byte 是一组的，0 个 1 就代表当前的这个 byte 孤家寡人一个。然后跳过这个组的所有 byte，继续之前数 1 的环节。分好组后，按组找到上表右边的规则，把规则内 x 的位置保留下来，01 的位置全部扔掉（01 代表的位置是 UTF8 的元数据，x 代表的位置才是 Unicode 的数据），拼成新的二进制串，这个串就是 Unicode 了。举个栗子： 111100110 10001000 10010001 11100110 10011000 10101111 01110100 01100001 01110010 01101111 01101100 以上有 11 个 byte，我们从第一个 byte11100110 开始，数第一个 0 前面的 1 的数量，有 3 个 1，代表 3 个 byte 是一组的。然后我们跳过这 3 个，第四个 byte 是 11100110，继续数 1 得出有 3 个 1，然后又给这 3 个 byte 分组。跳过这三个，到了第 7 个 byte，这往后的 5 个 byte 都是以 0 开头，说明每个 byte 为 1 组。现在我们分好组了，有 7 个组，分别是 1[11100110, 10001000, 10010001], [11100110, 10011000, 10101111], [01110100], [01100001], [01110010], [01101111], [01101100] 现在我们按组找到表右对应的行，第一组、第二组对应第五行，其他组对应第三行，我们把行内 x 对应的位置保留，10 的位置删除，得到新的数组 1[0110, 001000, 010001], [0110, 011000, 101111], [1110100], [1100001], [1110010], [1101111], [1101100] 然后把组内的二进制串起来得到 Unicode 1[0110001000010001], [0110011000101111], [1110100], [1110100], [1100001], [1110010], [1101111], [1101100] 这时候我们再按 byte 进行拆分以便阅读，并且在高位补 0 1[01100010 00010001], [01100110 00101111], [01110100], [01110100], [01100001], [01110010], [01101111], [01101100] 再转换成 16 进制 1[62 11], [66 2F], [74], [61], [72], [6F], [6C] 这时候我们打开 F12，在控制台输入对应的 Unicode（语法要求必须使用 4 位 16 进制数字） 1&apos;\u6211\u662f\u0074\u0061\u0072\u006f\u006c&apos; 得到了对应的字符串“我是 tarol”。 好了，以上是 UTF8 的内容，之所以叫 UTF8 是因为这个规则下的符号，最少占 8bit。那么 UTF16 就好理解了，在这个规则下，每个符号最少占 16bit。UTF16 的规则说起来更简单，当符号位于 BMP 中时，占用 2byte，在符号位于辅助平面时，占用 4byte。那既然是变长的，又碰到了上面的问题，怎么识别这一块是 4byte 为一组还是 2byte 为一组？ 这里就要提到 Unicode 的保留区块了，Unicode 规定从 U+D800 到 U+DFFF 之间是永久保留不赋予任何符号的。也就是正常情况下，2byte 如果落在这个范围内，那么就是 Unicode 的非法字节。而 UTF16 的做法就是把辅助平面的 Unicode 码进行处理，变成 4 个字节，并且两两落在非法区域内，读取方读到了非法字节，就可以界定这里是 4byte 为一组，不然就是 2byte 为一组。那么 UTF16 这个转换的算法又是怎样的呢？ 首先按现在 17 个平面的限制，辅助平面的码位是 U+10000 到 U+10FFFF，我们得到了一个辅助平面的 Unicode 码时，先减去 BMP 的码数 0x10000，得到的数介于 0 到 0xFFFFF 之间，最多用 20bit 表示 然后我们把 20bit 从中间隔开，分为高位的 10bit 和低位的 10bit 我们知道 10bit 的取值范围是 0 到 0x3FF，高位的 10bit 加上固定值 0xD800，得到的值叫做前导代理（lead surrogate），范围是 0xD800 到 0xDBFF 低位的 10bit 加上固定值 0xDC00，得到的值叫做后尾代理（tail surrogate），范围是 0xDC00 到 0xDFFF。这样一来，不仅高位和低位都落在了保留区块内，而且彼此还做了区分。 还是举个例子。 𤭢，这个字是个异体字，通“碎”，位于辅助平面，Unicode 码位是 U+24B62，我们来算一下它的 UTF16 编码结果 首先 0x24B62 减去 10000 得到 0x14B62，根据这 5 个 byte 得到 20bit，0001 0100 1011 0110 0010 然后分成高位的 10bit（0001010010）和低位的 10bit（1101100010） 高位+0xD800 得到（1101 1000 0101 0010） 低位+0xDC00 得到（1101 1111 0110 0010） 转换为 16 进制就是 0xD852 和 0xDF62，这就是 𤭢 的 UTF16 表示。 然后我们验证一下答案，照常打开控制台，键入 ‘𤭢’.charCodeAt(0).toString(16) 得到 ‘d852’，键入’𤭢’.charCodeAt(1).toString(16) 得到 ‘df62’，验证成功！而且这里还透露了一个细节，ES 规定 string 是经过 UTF16 编码的（ES5 标准文档）。 UTF16 的事还没完，如果用过 nodejs 里面的 string_decoder 接口的人肯定注意到了，其中对 UTF16 编码的支持叫 utf16le，这个 le 是什么？其实这个是 Little Endian 的简称，对应的是 Big Endian。我们之前举的例子就是 Big Endian，Little Endian 不同在于每个 2byte 组里面的顺序是反过来的，即上面的 0xD852 和 0xDF62 改成 0x52D8 和 0x62DF 就是 𤭢 的 utf16le 编码了。至于为什么会有这么蛋疼的区分，那是操作系统的遗留问题，就像 window 的 CRLF 和 unix 的 LF 一样。 UTF16 告一段落了，新问题又来了。我们有 UTF8、UTF16LE、UTF16BE 这么多种编码，那一串二进制流过来我们用哪种编码方式去解析呢？尤其是 UTF16LE 和 UTF16BE，它们大部分规则是一样的，只是反过来了罢了。这里就要提到文件的一个元数据叫 BOM（byte-order mark）了，BOM 位于文件二进制流的最前方，标识当前文件的编码格式。UTF16LE 的 BOM 为 FF FE，UTF16BE 的 BOM 为 FE FF，UTF8 的 BOM 为 EF BB BF，但是一般不建议 UTF8 文件带 BOM。举个栗子，如果文件内容只有’0‘（十六进制编码为 30），那么三种编码方式生成的文件的十六进制编码分别为 编码 十六进制内容 UTF8 EF BB BF 30 UTF16BE FE FF 00 30 UTF16LE FF FE 00 30 从上面的例子也可以看到，UTF16 最大的问题在于：哪怕是 ASCII 标准字符 0，也占用了 2byte。这不仅仅浪费了存储空间，关键在于 UTF16 和 ASCII 不兼容，比如我新建一个文件，内容为 1234567890，使用系统自带的记事本打开，再另存为 Unicode 编码（就是 UTF16LE） 然后再选择打开，选择当前文件，再 ANSI 编码 你会看到这个样子的内容 可以发现，不仅信息错乱了，每个数字之间还有空格。 本来这篇文章到此就结束了，直到我在 nodepad++里面看到了这个 UCS-2 是什么鬼，好像在哪里见过？瞬间脑子里像侦探回忆线索般闪过画面，后来整理发现这就是 UTF16 的 low 版。为什么说是 low 版，因为 USC-2 是定长的，是不支持辅助平面的 UTF16。我们验证下，把‘𤭢’复制到用 notepad++打开的以 UCS-2 编码的文件里，没看出有什么问题，这时候关闭 notepad++再打开。 可以看到，‘𤭢’字碎的只剩渣了。]]></content>
      <categories>
        <category>技术</category>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>文章</tag>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从web图片裁剪出发：了解H5中的canvas]]></title>
    <url>%2F2016%2F04%2F21%2F%E4%BB%8Eweb%E5%9B%BE%E7%89%87%E8%A3%81%E5%89%AA%E5%87%BA%E5%8F%91%EF%BC%9A%E4%BA%86%E8%A7%A3H5%E4%B8%AD%E7%9A%84canvas%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;本篇内容不针对 canvas 文档对每个 api 进行逐个的详解！ &emsp;&emsp;本篇内容不针对 canvas 文档对每个 api 进行逐个的详解！ &emsp;&emsp;本篇内容不针对 canvas 文档对每个 api 进行逐个的详解！ &emsp;&emsp;重说三，好了，现在进入正文。在上一回《从 web 图片裁剪出发：了解 H5 中的 blob》中我解释了图片在浏览器中以怎样的形式留存，并且在最后一个 example 中演示了选择图片、预览最后提交的过程。然而这个预览并没有起到什么卵用，因为只能预览不能处理，原图片还是原图片，预览变得可有可无。这一篇我们就在预览这一步里做点手脚，加入处理图片的功能。 &emsp;&emsp;我们先修改之前的 example，既然要处理图片，肯定要引入 canvas，所以我们把原来 img 这个标签去掉，取而代之的是 canvas，并在 js 中加入对应的修改。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form name='test'&gt; &lt;input type="file" name='file'&gt; &lt;input type="submit" value="提交"&gt; &lt;/form&gt; &lt;canvas width="0" height="0"&gt;&lt;/canvas&gt; &lt;script&gt; var canvas = document.querySelector('canvas'), ctx = canvas.getContext('2d'), preview = new Image(); document.test.file.addEventListener('change', function() &#123; var fr = new FileReader(); fr.onload = function() &#123; preview.src = this.result; canvas.width = preview.width; canvas.height = preview.height; drawImage(); &#125;; fr.readAsDataURL(this.files[0]); &#125;) function drawImage() &#123; ctx.drawImage(preview, 0, 0); //把图片绘制到canvas上 &#125; document.test.addEventListener('submit', function(e) &#123; e.preventDefault(); var formData = new FormData(), xhr = new XMLHttpRequest(), mime = 'image/jpeg', dataUrl = canvas.toDataURL(mime, 0.8), //取出base64 data = atob(dataUrl.split(',')[1]), n = data.length, uInt8 = new Uint8Array(n), blob; while(n--) &#123; uInt8[n] = data.charCodeAt(n); &#125; blob = new Blob([uInt8.buffer], &#123;type: mime&#125;); formData.append('file', blob, 'test.jpg'); xhr.open('post', '/upload'); xhr.send(formData); &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; &emsp;&emsp;之前 example 的 canvas 版实现了，现在我们加入处理图片的功能。首先我们加入裁剪的功能，裁剪的引入必须先引入橡皮筋功能，就是一个选取框。一般我们见过的选取框是这样的。 预览的样子选取的样子 &emsp;&emsp;我们来分析下实现这样一个功能需要做什么。首先选取框有个开始点和结束点，在鼠标按下去的时候确定开始点，在松开的时候确定结束点，在移动的时候还要不停的绘制。那么绘制一个有选取框的内容分几步呢？第一步是绘制底图，第二步是绘制阴影，第三部还是绘制底图，但是只作用于选取框内部。最后想取消选取框怎么办，我们还要有个方法重置开始点和结束点，并且只绘制底图。 &emsp;&emsp;我们一步一步来，首先确定开始点和结束点。 123456789var sPoint = &#123;&#125;, ePoint = &#123;&#125;;canvas.addEventListener("mousedown", function(e) &#123; if (e.button === 0) &#123; sPoint.x = e.offsetX; sPoint.y = e.offsetY; sPoint.drag = true; &#125;&#125;); &emsp;&emsp;然后我们确定绘制阴影的的方法，并且在鼠标按下去移动的时候不停的绘制。 1234567891011121314151617181920212223function drawCover() &#123; ctx.save(); ctx.fillStyle = "rgba(0, 0, 0, 0.3)"; ctx.fillRect(0, 0, canvas.width, canvas.height); ctx.restore();&#125;canvas.addEventListener("mousemove", function(e) &#123; if (e.button === 0 &amp;&amp; sPoint.drag) &#123; var nPoint = &#123; x: e.offsetX, y: e.offsetY &#125;; ctx.save(); //clip要通过restore回复 ctx.clearRect(0, 0, canvas.width, canvas.height); //画布全清 drawImage(); //绘制底图 drawCover(); //绘制阴影 ctx.beginPath(); //开始路径 ctx.rect(sPoint.x, sPoint.y, nPoint.x - sPoint.x, nPoint.y - sPoint.y); //设置路径为选取框 ctx.clip(); //截取路径内为新的作用区域 drawImage(); //在选取框内绘制底图 ctx.restore(); //恢复clip截取的作用范围 &#125;&#125;); &emsp;&emsp;最后我们添加松开鼠标的事件监听，松开左键为拖动结束，松开右键为复原 1234567891011121314canvas.addEventListener("mouseup", function(e) &#123; if (e.button === 0) &#123; sPoint.drag = false; ePoint.x = e.offsetX; ePoint.y = e.offsetY; &#125; else if (e.button === 2) &#123; restore(); &#125;&#125;);function restore() &#123; sPoint = &#123;&#125;; ePoint = &#123;&#125;; drawImage();&#125; &emsp;&emsp;由于右键会出现恶心的浏览器自带菜单栏，影响体验，我们屏蔽它。 12345document.addEventListener('contextmenu', function(e) &#123; e.preventDefault(); e.stopPropagation(); &#125;); ``` &emsp;&emsp;现在选取框有了，我们要开始截取了。新添加一个按钮，然后添加点击监听。 12345&lt;form name='test'&gt; &lt;input type="file" name='file'&gt; &lt;button id="clip"&gt;裁剪&lt;/button&gt; &lt;input type="submit" value="提交"&gt;&lt;/form&gt; 12345678910111213141516171819var clip = document.querySelector("#clip");clip.addEventListener("click", function(e) &#123; e.preventDefault(); //阻止默认事件，不然会触发form的submit if (sPoint.x !== undefined &amp;&amp; ePoint.x !== undefined) &#123; var imgData = ctx.getImageData( sPoint.x, sPoint.y, ePoint.x - sPoint.x, ePoint.y - sPoint.y ); //把裁剪区域的图片信息提取出来 ctx.clearRect(0, 0, canvas.width, canvas.height); //清空画布 canvas.width = Math.abs(ePoint.x - sPoint.x); //重置canvas的大小为新图的大小 canvas.height = Math.abs(ePoint.y - sPoint.y); ctx.putImageData(imgData, 0, 0); //把提取出来的图片信息放进canvas中 preview.src = canvas.toDataURL(); //裁剪后我们用新图替换底图，方便继续处理 &#125; else &#123; alert("没有选择区域"); &#125;&#125;); &emsp;&emsp;现在我们裁剪后选择提交，会发现服务器生成的是裁剪后的图片 &emsp;&emsp;裁剪的功能完成了，我们在来实现第二个功能：灰度。如果说裁剪的功能在于 clip 的用法，那么灰度的实现是基于 getImageData 返回的对象的认识。这个对象中有一个属性叫 data，这是一个数组，以 4 个为一组，分别存储了一个像素 red、green、blue、opacity 四个数据。也就是当你的 canvas 尺寸为 1*1 时，它的 ImageData.data 元素为 4 个。 &emsp;&emsp;废话不多说，直接给出实现的代码。 123456&lt;form name='test'&gt; &lt;input type="file" name='file'&gt; &lt;button id="clip"&gt;裁剪&lt;/button&gt; &lt;button id="grey"&gt;灰度&lt;/button&gt; &lt;input type="submit" value="提交"&gt;&lt;/form&gt; 12345678910111213141516171819202122var grey = document.querySelector("#grey");grey.addEventListener("click", function(e) &#123; e.preventDefault(); var startX = 0, startY = 0, width = canvas.width, height = canvas.height; ctx.clearRect(0, 0, canvas.width, canvas.height); //一如既往的先清空画布，不然会处理含有选取框的图片内容 drawImage(); //绘制底图 var imgData = ctx.getImageData(startX, startY, width, height); //把整个底图的图片内容取出来 for (var i = 0; i &lt; imgData.data.length; ) &#123; var red = imgData.data[i], green = imgData.data[i + 1], blue = imgData.data[i + 2], opacity = imgData.data[i + 3], //不处理，可以省去这一行，占位说明这一位是透明度 average = (red + green + blue) / 3; //所谓灰度其实是取三种颜色的平均值 imgData.data[i] = imgData.data[i + 1] = imgData.data[i + 2] = average; //三个颜色设为一样即是对应的灰色 i += 4; &#125; ctx.putImageData(imgData, startX, startY, 0, 0, width, height); //把处理过的imagedata放回canvas中 preview.src = canvas.toDataURL(); //保存图片信息方便再进行处理&#125;); &emsp;&emsp;选择灰度并提交，我们看服务器上生成的图片 &emsp;&emsp;最后我们结合裁剪和灰度，一起处理一张图片再提交。 &emsp;&emsp;好了，简单的两个图片处理的方式就介绍到这，至于复杂的，你可以拿到每一个像素的信息，还担心实现不了其他的功能么。]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
        <category>H5</category>
      </categories>
      <tags>
        <tag>文章</tag>
        <tag>H5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从web图片裁剪出发：了解H5中的Blob]]></title>
    <url>%2F2016%2F04%2F15%2F%E4%BB%8Eweb%E5%9B%BE%E7%89%87%E8%A3%81%E5%89%AA%E5%87%BA%E5%8F%91%EF%BC%9A%E4%BA%86%E8%A7%A3H5%E4%B8%AD%E7%9A%84Blob%2F</url>
    <content type="text"><![CDATA[刚开始做前端的时候，有个功能卡住我了，就是裁剪并上传头像。当时两个方案摆在我面前，一个是 flash，我不会。另一个是通过 iframe 上传图片，然后再上传坐标由后端裁剪，而我最终的选择是后者。有人会疑惑，为什么不用 H5 的 Canvas 和 FormData，第一要考虑 ie8 的兼容性，第二那时候眼界没到，这种新东西光是听听都怕。 后来随着 Mobile 项目越做越多，类似的功能开发得也越来越多，Canvas+FormData 成为了标配方案。但做的多了却一直没有静下心来研究，浏览器怎么使用 H5 的方式裁剪并把文件发送出去，回过头看都是知其然不知其所以然。这篇随笔先做个初步的拆解，就是当通过 input 选择一张图片后，这张图片在浏览器里是怎样的一个存在。 文件操作一直是早期浏览器的痛点，全封闭式，不给 JS 操作的空间，而随着 H5 一系列新接口的推出，这个壁垒被打破。对，是一系列接口，以下会涉及到如下概念：Blob、File、FileReader、ArrayBuffer、ArrayBufferView、DataURL 等，其他如 FormData、XMLHttpRequest、Canvas 等暂不深入。 我们先创建一个简单的页面，只有一个 input[type=file]。 12345678910&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;input type="file"&gt;&lt;/body&gt;&lt;/html&gt; 然后我们在 JS 中获取这个元素 1var input = document.querySelector("input[type=file]"); 可以看到这个元素有个属性 files，它的类型是 FileList。这个类不做过多介绍，就是一个类数组，由浏览器通过用户行为往里面添加或删除元素，JS 只有访问其元素的接口，无法对其进行操作。而 files 的元素就是 File 类型，File 是 blob 的子类，比 blob 主要多出一个 name 的属性。 现在我们选取一个文件，这里问题来了，这个元素是文件在浏览器的完整备份，还是一个指向文件系统的引用？答案是后者，我们选定文件，然后修改文件名，再上传文件，浏览器报错了。 1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form name='test'&gt; &lt;input type="file"&gt; &lt;input type="submit" value="提交"&gt; &lt;/form&gt; &lt;script&gt; var input = document.querySelector('input[type=file]'), form = document.test; form.addEventListener('submit', function(e) &#123; e.preventDefault(); var file = input.files[0], fd = new FormData(), xhr = new XMLHttpRequest(); fd.append('file', file); xhr.open('post', '/upload'); xhr.send(fd); &#125;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 使用 chrome 打开 chrome://blob-internals/，可以看到一条这样的记录 可见这仅仅是一条引用。第二个问题来了，如果我们要对图片进行处理，那么只拿到引用是不行的，肯定要在浏览器有一份数据的备份，那么怎么获取这个备份呢？答案就是 FileReader，FileReader 的对象主要有 readAsArrayBuffer、readAsBinaryString、readAsDataURL、readAsText 等方法，它们的入参都是 Blob 对象或是 File 对象，结果对应最终获取的数据类型。这几个方法是异步的，读取过程中会抛出对应的事件，其中读取完毕的事件为 load，所以数据的处理要放在 onload 下。我先给一个简单的 example： 123456789input.addEventListener("change", function() &#123; var file = this.files[0], fr = new FileReader(), blob; fr.onload = function() &#123; blob = new Blob([this.result]); &#125;; fr.readAsArrayBuffer(file);&#125;); 当用户选取图片时，调用 FileReader 的 readAsArrayBuffer 把图片数据读出来，然后生成新的 blob 对象保存在浏览器中。查看 chrome://blob-internals/，可以注意到这一项： 对应的就是刚才的 blob，可以对比 length 和图片本身的大小。上面那个 demo 很突兀，完全没有解释什么是 ArrayBuffer，为什么创建 blob 要传入一个 ArrayBuffer。那么第三个问题来了，什么是 ArrayBuffer、BinaryString、DataURL、Text，它们有什么联系和不同，Blob 类到底是个什么东西？首先，图片是个二进制文件，它的内容也是由 0 和 1 组成的。用户肯定是看不懂 0 和 1 的组合的，能看懂的只有最终展示的图片，而程序员也看不懂 0 和 1，但程序员能看懂另外几种 0 和 1 变换后的组合。它们就是以上的 4 种：ArrayBuffer、BinaryString、DataURL 和 Text。 其中 ArrayBuffer 是最接近二进制数据的表现的，可以理解为它就是二进制数据的存储器，这也是为什么二进制文件的 Blob 需要传入 ArrayBuffer。正因为它的内部是二进制数据，所以我们是不可以直接操作的。这时候就需要一个代理者帮助我们读或写，这个代理者就是 ArrayBufferView。 ArrayBufferView 不是一个类，而是一个类的集合，包括：Int8Array、Uint8Array、Uint8ClampedArray、Int16Array、Uint16Array、Int32Array、Uint32Array、Float32Array、Float64Array 和 DataView，分别表示以 8 位、16 位、32 位、64 位数字为元素对 ArrayBuffer 内的二进制数据进行展现，它们都有统一的属性 buffer 指向对应的 ArrayBuffer。栗子暂时不举，之后会用到。 ArrayBuffer 简单介绍了，那什么是 BinaryString 呢？是二进制数据直接以 byte 的形式展现的字符串，比如 1100001，用 Uint8 表示就是 97，用 BinaryString 表示就是’a’。对，前者是 charCode，后者是 char，所以 BinaryString 和 Uint8Array 之间是可以自由转换的。 接下来是 DataURL 了，这是一个经过 base64 编码的字符串，它的组成如下：data:[mimeType];base64,[base64(binaryString)] 除了固定的字符串部分，它主要包含两个重要信息即中括号括起的部分，mimeType 和 base64 编码后的 binaryString，从它里面我们可以这样取到这两个信息。 12var binaryString = atob(dataUrl.split(",")[1]), mimeType = dataUrl.split(",")[0].match(/:(.\*?);/)[1]; 最后，Text 是什么呢？在 ftp 上，文本传输和二进制传输的区别是什么，那 Text 类型和 BinaryString 类型的区别就是什么了，也就是 Text 类型是经过一定转换的 BinaryString，对于图片来说，这个类型是用不到的。 好了，现在我们了解了一张图片在浏览器里以数据的形式可以表现为 ArrayBuffer、BinaryString、DataURL，那么第四个问题来了，它们各有实际用途呢？我们从应用场景出发，回到文章开头的问题，图片的裁剪和上传。图片的裁剪我们要倚仗牛逼的 canvas，而 canvas 的 context 有这么一个方法 toDataURL，就是把 canvas 的内容转换为图片数据，而数据的表现形式就是 DataURL！图片的上传我们用的是 FormData，它可以添加 Blob 类型的对象进去，那 Blob 类型除了从 input[type=file]中直接获取，还能靠什么生成呢？自然是 ArrayBuffer！好了，裁剪图片的功能要用到 DataURL，上传图片的功能要用到 ArrayBuffer，那怎么从 DataURL 转换为 ArrayBuffer 呢？我们知道 DataURL 很重要的组成部分就是经过 base64 编码的 BinaryString，那么很显然我们可以从 DataURL 中提取 BinaryString，而 BinaryString 就是 ArrayBuffer 对应的 Uint8Array 的字符形式的表现，所以可以由 BinaryString 生成 ArrayBuffer，那么 DataURL 到 ArrayBuffer 之间的桥就是 BinaryString！ 到现在为止，我们说了很多概念，然而这并没有什么卵用，验证概念的方法不是提出新的概念，而是建立一个 example。以下的 example 就是把图片数据从 input 中取出，然后以 DataURL 的格式进行预览，提交时把预览生成图片上传的整个流程。 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form name='test'&gt; &lt;input type="file" name='file'&gt; &lt;input type="submit" value="提交"&gt; &lt;/form&gt; &lt;img src="" alt=""&gt; &lt;script&gt; var img = document.querySelector('img'), preview; document.test.file.addEventListener('change', function() &#123; var fr = new FileReader(); fr.onload = function() &#123; preview = this.result; img.src = preview; &#125;; fr.readAsDataURL(this.files[0]); &#125;) document.test.addEventListener('submit', function(e) &#123; e.preventDefault(); var binaryString = atob(preview.split(',')[1]), mimeType = preview.split(',')[0].match(/:(.*?);/)[1], length = binaryString.length, u8arr = new Uint8Array(length), blob, fd = new FormData(), xhr = new XMLHttpRequest(); while(length--) &#123; u8arr[length] = binaryString.charCodeAt(length); &#125; blob = new Blob([u8arr.buffer], &#123;type: mimeType&#125;); fd.append('file', blob); xhr.open('post', '/upload'); xhr.send(fd); &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 现在图片已经被我们发射出去了，那么图片在协议包里是以怎样的数据形式存在的呢？当然是以二进制的形式，我们抓一下包，发现在 fiddler 里面这个二进制串会转换为字符串，即上面的 binaryString。 既然通过发送的 blob 到最后在数据包里都是以 binaryString 的形式展示，那么是否可以直接使用 xhr.send(binaryString)发送图片呢？貌似是可以的，但我们试一下就会发现问题，服务器获取到的信息不能生成一张图片，说明数据被破坏了。那么数据是谁破坏的呢？这个罪魁祸首就是 send，当 send 的参数是字符串的时候，会对字符串进行 utf8 编码。我们看下相同的图片通过 blob 发送出去和通过 binaryString 直接发送出去的数据会有什么不同。这里我们用 wireshark 抓包，因为 wireshark 会自动对数据块进行分割，可以比较直观的看到图片所对应的数据。PS: 这张图片一张 1px 白色的 png。 前面是正常的图片数据，后面是经过了 utf8 编码的图片数据。我们可以看到数据确实被破坏了，当然在知道元数据是 binaryString 的情况下，这种破坏是可以恢复的，不过不是这里讨论的范畴了，感兴趣的可以跳转阮老师的博客 《字符编码笔记:ASCII，Unicode 和 UTF-8》。 好了，整个图片在浏览器端的拆解到此结束。理解了这些，就走完了写出牛逼的客户端图片裁剪工具的第一步。]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
        <category>H5</category>
      </categories>
      <tags>
        <tag>文章</tag>
        <tag>H5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JSONP的实现流程]]></title>
    <url>%2F2015%2F01%2F04%2FJSONP%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;在进行 AJAX 的时候会经常产生这样一个报错： &emsp;&emsp;看红字，这是浏览器的同源策略，使跨域进行的 AJAX 无效。注意，不是不发送 AJAX 请求（其实就是 HTTP 请求），而是请求了，也返回了，但浏览器‘咔擦’一声，下面没有了。对比下 fiddler 和浏览器抓的包的异同： fiddler chrome &emsp;&emsp;简而言之，浏览器这边就是头（response header）给看，身体（response body）不给看。 &emsp;&emsp;什么是同源策略？为什么会有同源策略？这一点在吴翰清老师著的《白帽子讲 Web 安全》一书中由阐述，这里就不赘述了。下面要做的，就是使用 JSONP 让上面的报错消失，按正确的流程进行下去。 &emsp;&emsp;首先介绍下我这里的环境，两个 Web 服务器，Tomcat 监听 8081，Node 监听 3000，Tomcat 这边实现一个处理 AJAX 的 JSP 文件，很简单，返回一个 JSON 12&lt;%@ page contentType="application/json; charset=utf-8" %&gt;&#123;"status": true&#125; &emsp;&emsp;Tomcat 的页面对这个 URL 发出 AJAX 请求，并打印出了返回值 &emsp;&emsp;但 Node 的页面发出 AJAX 请求，则像上面那样报错了，因为 AJAX 有同源策略保护。怎么绕过这个保护呢？平时我们页面引入的 CSS、JS 可能是从其他的服务器比如静态服务器、CDN 获取内容，都在不同的域，可知页面内的标签引入 JS 是没有同源策略一说的，而且也是进行 request 和处理 response，于是我们把这个 AJAX 请求改为如下代码： 123var script = document.createElement("script");script.src = "http://localhost:8081/test/true.jsp";document.body.insertBefore(script, document.body.lastChild); &emsp;&emsp;但还是残忍的报错了 &emsp;&emsp;因为返回的 JSON({“status”: true})成为了一个独立的 js 片段，而这个片段明显是不符合语法的，如果返回的是符合语法规范的处理 JSON 的 js 片段而不仅仅是 JSON 就好了。比如我们将服务器端的代码改成这样： 12&lt;%@ page contentType="application/javascript; charset=utf-8" %&gt;console.log(&#123;"status": true&#125;); &emsp;&emsp;再在 Node 的页面进行 AJAX &emsp;&emsp;目的是达到了，但问题是，这个 AJAX 的 servlet 不仅返回了数据，还返回了行为，难道我要把处理 DOM 的 js 写在这里面吗？页面重构了又跑到这里来修改？问题太美不敢想，所以请求成功的方法必须写在页面的 js 里面，比如这样 123456function callback(data) &#123; console.log(data);&#125;var script = document.createElement("script");script.src = "http://localhost:8081/test/true.jsp";document.body.insertBefore(script, document.body.lastChild); &emsp;&emsp;而服务器返回的 js 片段直接调用这个 function 就行了，这个就叫回调函数了 12&lt;%@ page contentType="application/javascript; charset=utf-8" %&gt;callback(&#123;"status": true&#125;); &emsp;&emsp;可以看到，这个方案比之前好多了，servlet 和请求页面的耦合度低了很多，但没完全解决，比如 callback 这个回调函数的名字，如果把这个名字放在请求的 parameter 中，比如这样 123456function callback(data) &#123; console.log(data);&#125;var script = document.createElement("script");script.src = "http://localhost:8081/test/true.jsp?cb=callback";document.body.insertBefore(script, document.body.lastChild); &emsp;&emsp;服务器对这个 parameter 进行处理 12&lt;%@ page contentType="application/javascript; charset=utf-8" %&gt;&lt;%= request.getParameter("cb") %&gt;(&#123;"status": true&#125;); &emsp;&emsp;优化一下，对没有 cb 参数的请求仅返回 JSON 1234567891011121314&lt;% String callback = request.getParameter("cb"); if(null == callback) &#123; response.setContentType("application/json; charset=utf-8");%&gt; &#123;"status": true&#125;&lt;% &#125;else &#123; response.setContentType("application/javascript; charset=utf-8");%&gt; &lt;%= callback %&gt;(&#123;"status": true&#125;)&lt;% &#125;%&gt; &emsp;&emsp;那么整个 JSONP 的功能就实现了。但还有一点瑕疵，代码执行完 html 中留下了一个 script 标签，强迫症能忍？处女座能忍？ &emsp;&emsp;解决方法：可以使用 jQuery 的方法，jQuery 会清除掉留下的 script 标签。 12345678$.ajax(&#123; url: "http://localhost:8081/test/true.jsp", dataType: "jsonp", jsonp: "cb", success: function(data) &#123; console.log(data); &#125;&#125;); &emsp;&emsp;也可以自己实现一个，我抛个砖，在 js 加载完成后删除节点。 123456789function callback(data) &#123; console.log(data);&#125;var script = document.createElement("script");script.src = "http://localhost:8081/test/true.jsp?cb=callback";document.body.insertBefore(script, document.body.lastChild);script.onload = function() &#123; this.parentNode.removeChild(this);&#125;; &emsp;&emsp;至此，不知道有人发现没有，JSONP 这种方式有一个致命的缺陷：就是由于它是通过引入 script 节点实现的，所以只支持 GET 方法。如果你任性，你无理取闹，你一定要用 post 跨域，那么只能考虑使用 CORS 了。 &emsp;&emsp;JSONP 的东西就到此结束了，其实做完才发现，实际上这是个很简单的概念，取了个比较唬人的名字而已。]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
        <category>H5</category>
      </categories>
      <tags>
        <tag>文章</tag>
        <tag>H5</tag>
      </tags>
  </entry>
</search>
