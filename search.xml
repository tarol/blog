<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ES的一等公民——函数（二）]]></title>
    <url>%2F2019%2F05%2F28%2FES%E7%9A%84%E4%B8%80%E7%AD%89%E5%85%AC%E6%B0%91%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[前言前一篇聊到了闭包和作用域链，最后留下了一段运行结果出人意料的代码。本篇由我娓娓道来，为什么会是这样 标准流程函数/方法调用的语法一般是这样，[obj.]method(…args)，涉及 3 个对象：调用者 obj、函数 method、参数列表 args 当解释器解释这种语法时，执行以下步骤： 如果是严格模式，绑定 this 为 obj 如果是非严格模式 当 obj 为 null 或 undefined 时，绑定 this 为全局对象（如例 1） 当 obj 为基础数据类型时，绑定 this 为其包装类对象（如例 2） 其他情况绑定 this 为 obj 创建运行环境（可以理解为作用域） env 将 词法环境 设置为 env 将 变量环境 设置为 env 载入函数体 code，作为内部属性 [[Code]] 通过 code 和 args 进行变量绑定 通过 this 和 args 调用函数的内部属性 [[Call]] 1(function () &#123;console.log(this)&#125;).call(null) // global 123Number.prototype.log = function() &#123; console.log(this) &#125;const a = 1a.log() // Number &#123;1&#125; 以上，第 1、2 条比较好理解，3、4、5有点不知所云，暂且略过，最重要的是第 6 点 就像上一篇提到的内部属性 [[Scope]]，[[Call]] 是函数另一个很重要的内部属性 普通函数的 [[Call]] 的逻辑很简单，进入新的执行环境，解释上述第 4 点生成的 [[Code]] 并跳出执行环境，根据解释结果 result 选择接下来的行为： 如果 result.type 是 throw，抛出 result.value 如果 result.type 是 return，返回 result.value 否则 result.type 必定是 normal，返回 undefined 以上是最常见的函数执行过程，平时我们调用自定义的函数遵循的就是这个流程，现在我们进入稍微复杂一点的区域：apply &amp; call。鉴于 apply 和 call 的解释器算法差不多，而 call 更为简化，以下的分析都是基于 call 的 apply &amp; call1234567const p = &#123; name: 'tarol'&#125;function hello() &#123; console.log(`hello $&#123;this.name&#125;`)&#125;hello.call(p) 以上是最常见的 call 用例。从语法上来说，被调用的函数不是 hello 而是 hello.call，也就是上面的标准流程适用于 hello.call，而非 hello。 按照标准流程，现在解释器来到了 hello.call 的 [[Code]]，之后 [[Code]] 做了以下这些事情，让控制权由 hello.call 成功转移到了 hello： 类型检查 由第二个参数得到 args 由第一个参数得到 this 通过 this 和 args 调用 hello 的内部属性 [[Call]] 由此可见，call 的语义还是比较简单的，只是由调用 hello 转变为通过 call 调用 hello，这个行为在 call 的 [[Code]] 层面进行了定义，call 本身可以理解为一个普通函数的内置版（由浏览器定义） 现在我们来到大 Boss —— bind 的面前 bind123456789function test() &#123; console.log(this.name);&#125;const a = &#123; name : 'tarol',&#125;;test.bind(a)(); 经过了 call 部分的科普，我们发现 bind 突然变得陌生起来，不再和 call 类似了。因为 call 的语义是：通过 call 的调用完成控制的转移。而 bind 是返回一个新的函数 fn，最终调用的也是这个 fn 按照前面所述，函数的调用应该统一遵循标准流程。那么调用 fn ，进行到第 6 步时，传入 [[Call]] 的 this 应该是 undefined 或者 global，不可能会是 a。但最后的结果却恰恰是 a，所以猫腻肯定藏在之后的某个地方，call 的猫腻藏在 [[Code]] 里面，而 bind 的猫腻则藏在 [[Call]] 里面 上面提到的 [[Call]] 的运行逻辑是普通函数的运行逻辑，而 bind 返回的函数不是普通函数，是 bound function 假设普通函数 fn，fn.bind(obj, ...args) 返回的 bound function 为 bfn，bfn 和 fn 存在以下不同： bfn 多出的内部属性 [[TargetFunction]]：指向了 fn [[BoundThis]]：指向了 obj [[BoundArgs]]：指向了 args bfn(extraArgs) 的 [[Call]] 算法不同 将 bfn 的 [[BoundArgs]] 和 extraArgs 结合形成新的 args 通过 bfn 的 [[BoundThis]] 和 args 调用 bfn 的 [[TargetFunction]] 的 [[Call]] 这样讲有些抽象，我们结合上一篇最后的例子 test.bind(a).bind(b)()，为什么最后 test 绑定的 this 是 a？ 这个调用链涉及 3 个函数：普通函数 test，test.bind(a) =&gt; boundA，test.bind(a).bind(b) =&gt; boundB。其中 bound function 的内部属性是这样的（我们省略掉所有的参数） boundA [[TargetFunction]]：test [[BoundThis]]：a boundB [[TargetFunction]]：boundA [[BoundThis]]：b 我们知道，最后被调用的是 boundB，即按照函数调用的标准流程执行到了 boundB 的 [[Call]]。遵循以上 bound function 的 [[Call]] 算法，通过 boundB 的 [[BoundThis]] 即 b 调用 boundB 的 [[TargetFunction]] 即 boundA 的 [[Call]]，现在控制权到了 boundA，由于它也是 bound function，所以继续遵循以上算法，通过 boundA 的 [[BoundThis]] 即 a 调用 boundA 的 [[TargetFunction]] 即 test。理所应当的，test 调用时的 this 绑定就是 a 而不是 b 了 以上内容解释了上一篇最终留下的问题，本篇的结尾处同样也会留下一个问题 随着 ES6 的发布，函数的特性再一次被扩展，最典型的就是不能被 new 的箭头函数，和不能被直接调用的类函数了 12const arrow = () =&gt; &#123;&#125;new arrow() 12class klass &#123;&#125;klass() 以上两个例子都会报错，而 ES5 中的自定义函数从来不会出现类似的问题，那么 ES6 中又给函数带来了哪些隐藏的特性？下一篇会给出答案]]></content>
  </entry>
  <entry>
    <title><![CDATA[ES的一等公民——函数（一）]]></title>
    <url>%2F2019%2F05%2F27%2FES%E7%9A%84%E4%B8%80%E7%AD%89%E5%85%AC%E6%B0%91%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[前言众所周知的是，函数是 ES 的一等公民，尤其是 ES6 发布后，随着箭头函数和类的加入，函数的 feature 日趋复杂。而现在，在 TC39 的 proposals 中，越来越多的 feature 是基于函数的，比如 decorators、 partial-application、 Pipeline Operator 等 我们从头到尾缕一遍函数的特性，包括最早的闭包，ES5 的 call、apply、bind，ES6 的箭头函数和类 闭包闭包其实是一个 PL 的概念，如果某个编程语言不支持闭包，那将是很严重的事情。我们一步步来理解这句话 12345&lt;button&gt;1&lt;/button&gt;&lt;button&gt;2&lt;/button&gt;&lt;button&gt;3&lt;/button&gt;&lt;button&gt;4&lt;/button&gt;&lt;button&gt;5&lt;/button&gt; 123456const btns = document.querySelectorAll('button')for(var i = 0; i &lt; btns.length; i++) &#123; btns[i].onclick = function() &#123; console.log(i) &#125;&#125; 这是最典型的引入闭包的例子，各种教材都有提到，如果你想打印的是 0 - 4，那么这种写法是错的。为什么是错的呢？因为任何一个监听函数触发的时候，打印的 i 都是父级作用域的 i，而这时候父级作用域的 i 已经变成了 5，所以任何监听函数触发后打印的都是 5 要解决这个问题，就要引入闭包，将代码改造为： 12345btns[i].onclick = (function(i) &#123; return function() &#123; console.log(i) &#125;&#125;)(i) 很多人知道怎么改，但还是不理解，怎么就闭包了，哪一部分就闭包了？ 我们说理解一个概念最重要的一点在于举一反三，现在我举另一个例子： 12345678910111213const name = 'tarol'function fn1() &#123; console.log(name)&#125;function fn2() &#123; const name = 'okal' fn1()&#125;fn2() // tarol or okal ? 这个问题很大一部分人会陷入迷糊，尤其是在聊闭包的时候抛出来。因为例 1 中模糊了一个概念，因为 onclick 是由外部行为触发的，所以很少有人关注到：当返回的闭包函数执行时，i 的值到底是由定义函数时的环境决定的，还是运行函数时的环境决定的，还是他们之间有一个先后顺序，就像原型链一样，运行时的作用域不存在 i，就追溯定义时的作用域？ 例 2 的答案是 tarol，原因很简单，就是闭包的核心概念：当一个函数运行时，它可以访问定义函数时所在的作用域 为什么可以访问呢？因为函数在定义时，把当前的作用域作为内部属性（不开放给外部访问）固化在了这个函数的实例中，当函数运行的时候，把这个内部属性拿过来，用这个作用域作为父作用域，生成一个新的作用域链 为什么要这么设计呢？为什么不能像前面猜测的一样，使用运行时的作用域来生成作用域链呢？ 我们看到例 2 迷糊还有个很重要的原因是例 2 这种代码在平常基本看不到，太抽象了，我们要理解它必须用概念来解构，不能用经验来推断。现在我们来改造一下，把例子中两个函数的定义分开 123456// a.jsconst name = 'tarol'export function fn1() &#123; console.log(name)&#125; 123456789// b.jsimport &#123; fn1 &#125; from './a.js'function fn2() &#123; const name = 'okal' fn1()&#125;fn2() 这样一拆分，是不是凭经验就可以推断出打印的肯定是 tarol 了，我们再改造下 123456// sdk.jsconst version = '1.0.0'export function getVersion() &#123; return version&#125; 1234567891011// page.jsimport &#123; getVersion &#125; from './sdk.js'function printVersions() &#123; const version = '0.0.1' const sdkVersion = getVersion() console.log(`app version: $&#123;version&#125;`) console.log(`sdk version: $&#123;sdkVersion&#125;`)&#125;printVersions() 这样一来，是不是跟我们平时写的业务代码很相似了？同时你也可以看到，如果父级作用域是在运行时确定的，那么我们在调用任何第三方库的时候，都要去了解第三方库，确保当前作用域的变量声明和第三方库中没有命名冲突。这样的编程体验，对于编程语言来说，岂不是一种灾难？ 好了，闭包大概就聊到这里。刚才提到过，运行函数代码前很重要的一步是创建作用域链，但实际是这里漏了一步，就是 this 绑定。ES5 中针对这一过程添加了一系列特性，比如 Function.prototype.call/apply/bind，也许你会说，这几个方法你都用的很熟练了，下面我举个栗子，让它们重新陌生起来 12345678910111213function test() &#123; console.log(this.name);&#125;const a = &#123; name : 'tarol',&#125;;const b = &#123; name : 'okal',&#125;;test.bind(a).bind(b)(); 以上代码的运行结果是 tarol，哪怕代码是 test.bind(a).bind(b).call(b)，或者 test.bind(a).bind(b).apply(b)，运行结果都是 tarol 要解释这个现象，必须深入分析函数运行的整个过程，下一篇会详细阐述这部分内容]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
        <category>ES</category>
      </categories>
      <tags>
        <tag>文章</tag>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[管道（|>）提案怎么了？]]></title>
    <url>%2F2018%2F11%2F01%2F%E7%AE%A1%E9%81%93%E6%8F%90%E6%A1%88%E6%80%8E%E4%B9%88%E4%BA%86%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[在发布的 babel@7.0.0-beta52 中，我们为 @babel/plugin-proposal-pipeline-operator 引入了一个必填的配置项，这是管道操作的一个重大的改动。为了不给大家带来困惑，我们一起来了解一下管道提案以及我们为什么引入该配置项。 当前的情况管道操作符最早是由 Gilbert Garza 引入的，为了实现“使用可读的、有效的方式简化函数的链式调用”提供了简洁的语法。管道操作符在很多语言里能找到根源，比如 F#，Hack，Elm，Elixir 等等，但 JS 的语法中还存在两点争议： 是否以及如何引入占位符 管道中如何处理 async / await 占位符第一个难点是占位符的问题。这是由 Kevin Smith 在这个 issue 中提出来的，并且他推荐了 Hack-style pipelining。在 Hack 中，占位符必须出现在管道操作符的右边，示例如下： 12345678910namespace Hack\UserDocumentation\Operators\Pipe\Examples\MapFilterCountPiped;function piped_example(array&lt;int&gt; $arr): int &#123; return $arr |&gt; \array_map($x ==&gt; $x * $x, $$) |&gt; \array_filter($$, $x ==&gt; $x % 2 == 0) |&gt; \count($$);&#125;var_dump(piped_example(range(1, 10))); 我们以此为基础，代表前一步返回值的占位符可以用于任意表达式中。这让管道更具弹性，功能也更强大。 缺点是引入新的 token 是一个很复杂的工程。虽然任一 token 都可能存在多个意义这点仍值得商榷，但 # 确实已经被选为当前的方案。# 同时应用在私有成员的提案中，而其他的选项也都存在各自的应用场景。 Async / Await早期的管道包含 await 的语法： 1x |&gt; (await f); 它等同于： 1await f(x); 不幸的是，开发者可能也希望它等同于： 1(await f)(x); 在管道中处理 async 语句这一想法被完全搁置后，委员会成员对此表达了担忧。虽然可以不借助于显式的语法，使用返回 promise 的函数替代，但这还是太麻烦了。 当前的解决方案基于这些讨论，我们提出来两个基于 minimal 的解决方案：F# 管道和 Smart 管道。接下来让我们看看它们是怎样解决以上的问题的。 Minimal Pipelines这个提案包含了管道操作符的基本功能。该提案禁止 await，所以不支持 async 语法，并且不支持占位符。它和之前 babel plugin 提供的功能一致，而且它的语义和当前提案仓库中 spec 规定的行为一致。它的功能类似于稻草人，用于对比其他提案的优劣，并在其他提案都存在致命缺陷的情况下作为不得已的选择。 译者按：所谓的 Minimal Pipelines 就是不支持 await (因为会引发歧义)，没有占位符。 F# Pipelines在占位符的问题上，F# 提案认为它根本不需要。在 minimal 中，箭头函数可以实现此功能，这种实现不需要额外的语法，而且使用的是开发人员早在 ES2015 就已经熟悉的语法。 如目前所述，箭头函数需要用括号包裹起来： 1234let person = &#123; score: 25 &#125;;let newScore = person.score |&gt; double |&gt; (_ =&gt; add(7, _)) |&gt; (_ =&gt; boundScore(0, 100, _)); 目前正在探索，是否可以不添加额外的圆括号，因为这是一个重大的语法负担。 在 async 的问题上，F# 将 await 视为一个一元函数： 1promise |&gt; await 这等同于： 1await promise; 因此 async 可以用于较大的函数链中： 123456789promise |&gt; await |&gt; (x =&gt; doubleSay(x, ', ')) |&gt; capitalize |&gt; (x =&gt; x + '!') |&gt; (x =&gt; new User.Message(x)) |&gt; (x =&gt; stream.write(x)) |&gt; await |&gt; console.log; 译者按：所谓的 F# Pipelines 就是使用箭头函数把多元函数变为一元函数；仅允许 bare await 存在于管道步骤中（即仅允许 p |&gt; await 语法，不允许 p |&gt; await f 语法）。 Smart Pipelines这个提案引入了占位符，使其可以在管道中编写任意表达式。因此上面的长链可以这样写： 123456789promise |&gt; await # |&gt; doubleSay(#, ', ') |&gt; # || throw new TypeError() |&gt; capitalize |&gt; # + '!' |&gt; new User.Message(#) |&gt; await stream.write(#) |&gt; console.log; 如果管道中某一步只是个裸标识符，不需要写占位符，这种情况叫做 bare style。 12x |&gt; a;x |&gt; f.b; 和 Hack 不同，一元函数不需要占位符。 对于其他的表达式，占位符是必需的，如果缺少会抛出语法错误。 1210 |&gt; # + 1;promise |&gt; await #; 如果存在任意运算符、小括号（包括函数调用）、中括号、或除了标识符和 . 之外的任意内容，占位符都是必需的。这是为了避免自我混淆和消除二义性。 Smart Pipelines 允许任意表达式存在于管道中，从而也解决了 async 的问题；其实不仅仅是 await，还包括 typeof，yield，和其他任意操作符。 译者按：所谓的 Smart Pipelines 其实就是引入了占位符 #。 译者按：汇总一下：minimal 是一禁了之，既然有问题，那就不准这样写F# 是限制语法，在有限范围内行动，基本满足需求，缺点是开发人员要了解它提出的解决方案的思想Smart 是最开放的，也符合开发人员的编码习惯，缺点是引入了新的 token Babel 的抉择当三个提案都完善后，我们意识到任何的讨论都不能得到最佳的结论。而最好的方式是基于开发人员的反馈和真实的项目使用情况再做出最后的决定。考虑到 Babel 在社区中的角色，我们决定在 pipeline 的插件引入这三种提案。 因为这三种提案在解析阶段存在些许不同，所以我们需要在 @babel/parser （以前的 babylon）添加此支持，并且需要配置当前使用的提案。因此 pipeline 的插件需要配置 proposal 选项，用于配置 babylon 的解析规则和自身的转换规则。 我们的时间非常紧，因为我们需要在 babel，@babel/parser、pipeline 的插件中同时引入这个重大的修改。我们还希望当某一提案最终确定后，这个插件可以平滑切换到该提案，并废除这个配置项。 考虑这两个原则，我们引入了这个新的配置选项并使其必填，强迫用户决定在项目中使用哪个建议。一旦其中某一提议被确认，我们就会废除这个选项，并默认切换到这一提案，其他的提案将在下个主版本中移除。 加入进来如果你对此提案感兴趣，关于这个提案的所有讨论都是公开的，你可以在 这里 找到它们。你也可以找出最近一次委员会会议的 会议纪要。你还可以在 Twitter 上找到 James DiGioia，J. S. Choi，Daniel Ehrenberg。 最重要的是，一旦这项工作完成，在你的项目中使用 pipeline 操作符！我们也为 在线编辑器 添加了选项，你也可以在那里进行尝试。我们需要真实的反馈，所以我们希望听到你的声音。在 Twitter 上 @babeljs 让我们知道。]]></content>
      <categories>
        <category>翻译</category>
        <category>前端</category>
        <category>ES</category>
      </categories>
      <tags>
        <tag>ES</tag>
        <tag>翻译</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[私有成员语法 FAQ]]></title>
    <url>%2F2018%2F10%2F28%2F%E7%A7%81%E6%9C%89%E6%88%90%E5%91%98%E8%AF%AD%E6%B3%95FAQ%2F</url>
    <content type="text"><![CDATA[翻译自 tc39/proposal-class-fields 译者按：社区一直以来有一个声音，就是反对使用 # 声明私有成员。但是很多质疑的声音过于浅薄、人云亦云。其实 TC39 早就对此类呼声做过回应，并且归纳了一篇 FAQ。翻译这篇文章的同时，我会进行一定的扩展（有些问题的描述不够清晰），目的是让大家取得一定的共识。我认为，只有你知其然，且知其所以然，你的质疑才是有力量的。 译者按：首先要明确的一点是，委员会对于私有成员很多设计上的抉择是基于 ES 不存在类型检查，为此做了很多权衡和让步。这篇文章在很多地方也会提及这个不同的基本面。 # 是怎么回事？# 是 _ 的替代方案。 123456class A &#123; _hidden = 0; m() &#123; return this._hidden; &#125;&#125; 之前大家习惯使用 _ 创建类的私有成员，但这仅仅是社区共识，实际上这个成员是暴露的。 123456class B &#123; #hidden = 0; m() &#123; return this.#hidden; &#125;&#125; 现在使用 # 创建类的私有成员，在语言层面上对该成员进行了隐藏。 由于兼容性问题，我们不能去改变 _ 的工作机制。 译者按：如果将私有成员的语义赋予 _，之前使用 _ 声明公共成员的代码就出问题了；而且就算你之前使用 _ 是用来声明私有成员的，你能保证你心中的语义和现阶段的语义完全一致么？所以为了慎重起见，将之前的一种错误语法（之前类成员以 # 开头会报语法错误，这样保证了以前不存在这样的代码）加以利用，变成私有成员语法。 为什么不能通过 this.x 访问？ 译者按：这个问题的意思是，如果类 A 有私有成员 #x（其中 # 是声明私有，x 才是成员名），为什么内部不能通过 this.x 访问该成员，而一定要写成 this.#x？ 译者按：以下是一系列问题，问题 -&gt; 解答 -&gt; 延伸问题 -&gt; 解答 … 有 x 这个私有成员，不意味着不能有 x 这个公共成员，因此访问私有成员不能是一个普通的查找。 这是 JS 的一个问题，因为它缺少静态类型。静态类型语言使用类型声明区分外部公共/内部私有的情况，而不需要标识符。但是动态类型语言没有足够的静态信息区分这些情况。 延伸问题 1：那么为什么这个提案允许一个类同时存在私有成员 #x 和公共成员 x ？ 如果私有成员和公共成员冲突，会破坏其“封装性”。 私有成员很重要的一点是子类不需要知道它们。应该允许子类声明成员 x，即使父类有一个同名的私有成员。 译者按：感觉第二点有点文不对题。 其他支持私有成员的语言通常是允许的。如下是完全合法的 Java 代码： 1234567class Base &#123; private int x = 0;&#125;class Derived extends Base &#123; public int x = 0;&#125; 译者按：所谓的“封装性”（encapsulation / hard private）是很重要的概念，最底下会有说明。最简单的解释是，外部不能以任意方式获取私有成员的任何信息。假设，公共成员和私有成员冲突，而 x 是 obj 的私有成员，这时候外部存在 obj.x。如果公私冲突，这里将会报错，外部就嗅探到了 obj 存在 x 这个私有成员。这就违背了“封装性”。 延伸问题 2：为什么不使用运行时检测，来决定访问的是私有成员还是公共成员？属性访问的语义已经很复杂了，我们不想仅仅为了这个特性让每次属性访问都更慢。 译者按：属性访问的复杂性可以从 toFastProperties 和 toFastProperties 如何使对象的属性更快 管窥一二 它（运行时检测）还可能让类的方法被非实例（比如普通对象）欺骗，使其在非实例的字段上进行操作，从而造成私有成员的泄漏。这条评论 是一个例子。 译者按：如果不结合以上的例子，上面这句话其实很难理解。所以我觉得有必要扩展一下，虽然有很多人认为这个例子没有说服力。 首先我希望你了解 Java，因为我会拿 Java 的代码做对比。 其次我再明确一下，这个问题的根本在于 ES 没有静态类型检测，而 TS 就不存在此类烦恼。 12345678910111213141516171819202122232425&gt; public class Main &#123;&gt; public static void main(String[] args)&#123;&gt; A a1 = new A(1);&gt; A a2 = new A(2);&gt; a1.swap(a2);&gt; a1.say();&gt; a2.say();&gt; &#125;&gt; &#125;&gt;&gt; class A &#123;&gt; private int p;&gt; A(int p) &#123;&gt; this.p = p;&gt; &#125;&gt; public void swap(A a) &#123;&gt; int tmp = this.p;&gt; this.p = a.p;&gt; a.p = tmp;&gt; &#125;&gt; public void say() &#123;&gt; System.out.println(this.p);&gt; &#125;&gt; &#125;&gt; 以上的例子是一段正常的 Java 代码，它的逻辑很简单：声明类 A，A 存在一个公共方法，允许实例和另一个实例交换私有成员 p。 把这部分逻辑转换为 JS 代码，并且使用 private 声明 12345678910111213&gt; class A &#123;&gt; private p;&gt; constructor(p) &#123; this.p = p &#125;&gt; swap(a) &#123;&gt; let tmp = a.p;&gt; a.p = this.p;&gt; this.p = tmp;&gt; &#125;&gt; say() &#123;&gt; console.log(this.p);&gt; &#125;&gt; &#125;&gt; 乍一看是没有问题的，但 swap 有一个陷阱：如果传入的对象不是 A 的实例，或者说只是一个普通的对象，是不是就可以把私有成员 p 偷出来了？ JS 是不能做类型检查的，那我们怎么声明传入的 a 必须是 A 的实例呢？现有的方案就是检测在函数体中是否存在对入参的私有成员的访问。比如上例中，函数中如果存在 a.#p，那么 a 就必须是 A 的实例。否则就会报 TypeError: attempted to get private field on non-instance 这就是为什么对私有成员的访问必须在语法层面上体现，而不能是简单的运行时检测。 延伸问题 3：当类中声明了私有成员 x 时，为什么不让 obj.x 总是代表对私有成员的访问？ 译者按：这个问题的意思是当某个类声明了私有成员 x，那么类中所有的成员表达式 sth.x 都表示是对 sth 的私有成员 x 的访问。我觉得这是一个蠢问题，谁赞成？谁反对？ 类方法经常操作不是实例的对象。当 obj 不是实例的时候，如果 obj.x 突然间不再指的是 obj 的公共字段 x，仅仅是因为在类的某个地方声明了私有成员 x，那就太奇怪了。 延伸问题 4：为什么不赋予 this 关键字特殊的语义？ 译者按：这个问题针对前一个答案，你说 obj.x 不能做这种简单粗暴的处理，那么 this.x 可以咯？ this 已经是 JS 混乱的原因之一了；我们不想让它变的更糟。同时，这还存在一个严重的重构风险：如果 const thiz = this; thiz.x 和 this.x 存在不同的语义，将会带来很大的困扰。 而且除了 this，传入的实例的私有成员将无法访问（比如延伸问题 2 的 js 示例中传入的 a）。 延伸问题 5：为什么不禁止除 this 之外的对象对私有成员的访问？举个栗子，这样一来甚至可以使用 x 替代 this.x 表示对私有属性的访问？ 译者按：这个问题再做了一次延伸，上面提到传入的实例的私有成员不能访问，这个问题是：不能访问就不能访问呗，有什么关系？ 这个提案的目的是允许同类实例之间私有属性的互相访问。另外，使用裸标识符（即使用 x 代替 this.x）不是 JS 的常见做法（除了 with，而 with 的设计也通常被认为是一个错误）。 译者按：一系列延伸问题到此结束，这类问题弄懂了基本上就掌握私有成员的核心语义和设计原则了。 为什么 this.#x 可以访问私有属性，而 this[#x]不行？ 这会让属性访问的语义更复杂。 动态访问违背了 私有 的概念。举个栗子： 1234567891011class Dict extends null &#123; #data = something_secret; add(key, value) &#123; this[key] = value; &#125; get(key) &#123; return this[key]; &#125;&#125;new Dict().get("#data"); // 返回了私有属性 延伸问题 1：赋予 this.#x 和 this[#x] 不同的语义是否破坏了当前语法的稳定性？不完全是，但这确实是个问题。不过从某个角度上来说，this.#x 在当前的语法中是非法的，这已经破坏了当前语法的稳定性。 另一方面，this.#x 和 this[#x] 之间的差异比你看到的还要大，这也是当前提案的不足。 为什么不能是 this#x，把 . 去掉？这是可行的，但是如果我们再简化为 #x 就会出问题。 译者按：这个说法很简单，我直接列在下面 栗子： 12345678&gt; class X &#123;&gt; #y&gt; z() &#123;&gt; w()&gt; #y() // 会被解析为w()#y&gt; &#125;&gt; &#125;&gt; 泛言之，因为 this.# 的语义更为清晰，委员会基本都支持这种写法。 译者按：这也是被认为没有说服力的一个说辞，因为委员会把 this#x 极端化成了 #x，然后描述 #x 的不足，却没有直接给出 this#x 的不足。 为什么不是 private x？这种声明方式是其他语言使用的(尤其是 Java)，这意味着使用 this.x 访问该私有成员。 假设 obj 是类实例，在类外部使用 obj.x 表达式，JS 将会静默地创建或访问公共成员，而不是抛出一个错误，这将会是 bug 的主要潜在来源。 它还使声明和访问对称，就像公共成员一样： 1234567class A &#123; pub = 0; #priv = 1; m() &#123; return this.pub + this.#priv; &#125;&#125; 译者按：这里说明了为什么使用 # 不使用 private 的主要原因。我们理一下： 如果我们使用 private 12345678910&gt; class A &#123;&gt; private p;&gt; say() &#123;&gt; console.log(this.p);&gt; &#125;&gt; &#125;&gt; const a = new A;&gt; console.log(a.p);&gt; a.p = 1;&gt; 例子当中，对属性的创建如果不抛错，是否就会创建一个公共字段？如果创建了公共字段，调用 a.say() 打印的是公共字段还是私有字段？是不是打印哪个都感觉不对？可能你会说，那就抛错好了？那这样就是运行时检测，这个问题在上面有过描述。 为什么这个提案要允许不同实例间访问私有成员？其他语言也是这样的吗？因为这个功能非常有用，举个栗子：判断 Point 是否相等的 equals 方法。 实际上，其他语言由于同样的原因也是这样设计的；举个栗子，以下是合法的 Java 代码 12345class Point &#123; private int x = 0; private int y = 0; public boolean equals(Point p) &#123; return this.x == p.x &amp;&amp; this.y == p.y; &#125;&#125; Unicode 这么多符号，为什么恰恰是 # ？没人说 # 是最漂亮最直观的符号，我们用的是排除法： @ 是最初的选择，但是被 decorators 占用了。委员会考虑过交换 decorators 和 private 的符号（因为它们都还在提案阶段），但最终还是决定尊重社区的习惯。 _ 对现有的项目代码存在兼容问题，因为之前一直允许 _ 作为成员变量名的开头。 其他之前用于中缀运算符，而非前缀运算符的。假设是可以的，比如%, ^, &amp;, ?。考虑到我们的语法有点独特 —— x.%y 当前是非法的，所以不存在二义性。但无论如何，简写会带来问题。举个栗子，以下代码看上去像是将符号作为中缀运算福： 1234567class Foo &#123; %x; method() &#123; calculate().my().value() %x.print() &#125;&#125; 如上，开发人员看上去像是希望调用 this.%x 上的 print 方法。但实际上，将会执行取余的操作！ 其他不属于 ASCII 或者 IDStart 的 Unicode 字符也可以使用，但对于许多用户来说，他们很难在普通的键盘上找到对应的字符。 最后，唯一的选项是更长的符号序列，但比起单个字符似乎不太理想。 译者按：委员会还是举了省略分号时的例子，可是上面也说了，就算是 #，也同样存在问题。 为什么这个提案不允许外部通过一些机制用于反射/访问私有成员（比如说测试的时候）？其他语言也是这样的吗？这样做会违反“封装性”。其他语言允许并不是一个充分的理由，尤其是在某些语言（例如 C++）中，是通过直接修改内存实现的，而且这也不是一个必需的功能。 你所谓的“封装性”和“硬隐私”是什么意思？意味着私有成员是完全内部的：没有任何类外部的 JS 代码可以探测和影响到它们的存在，它们的成员名，它们的值，除非类自己选择暴露他们。（包括子类和父类之间也是完全封装的）。 意味着反射方法们，比如说 getOwnPropertySymbols 也不能暴露私有成员。 意味着如果一个类有一个私有成员 x，在类外部实例化类对象 obj，这时候通过 obj.x 访问的应该是公共成员 x，而不是访问私有成员或者抛出错误。注意这里的现象和 Java 并不一致，因为 Java 可以在编译时进行类型检查并且禁止通过成员名动态访问内容，除非是反射接口。 为什么这个提案会将封装性作为目的？ 库的作者们发现，库的使用者们开始依赖任何接口的公开部分，而非文档上的那部分（即希望使用者们关注的部分）。一般情况下，他们并不认为他们可以随意的破坏使用者的页面和应用，即使使用者没有参照他们的建议作业。因此，他们希望有真正的私有化可以隐藏实现细节。 虽然使用实例闭包或者 WeakMaps 已经可以模拟真实的封装（如下），但是两种方式和类结合都过于浪费，而且还涉及了内存使用的语义，也许这很让人惊讶。此外, 实例闭包的方式还禁止同类的实例间共享私有成员（如上]），而 WeakMaps 的方式还存在一个暴露私有数据的潜在风险，并且运行效率更低。 隐藏但不封装也可以通过使用 Symbol 作为属性名实现（如下）。 当前提案正在努力推进硬隐私，使 decorators 或者其他机制提供给类一个可选的逃生通道。我们计划在此阶段收集反馈，以确定这是否是正确的语义。 查看这个 issue 了解更多。 使用 WeakMap 如何模拟封装？12345678910111213141516const Person = (function() &#123; const privates = new WeakMap(); let ids = 0; return class Person &#123; constructor(name) &#123; this.name = name; privates.set(this, &#123; id: ids++ &#125;); &#125; equals(otherPerson) &#123; return privates.get(this).id === privates.get(otherPerson).id; &#125; &#125;;&#125;)();let alice = new Person("Alice");let bob = new Person("Bob");alice.equals(bob); // false 然而这里还是存在一个潜在的问题。假设我们在构造时添加一个回调函数： 1234567891011121314151617181920const Person = (function() &#123; const privates = new WeakMap(); let ids = 0; return class Person &#123; constructor(name, makeGreeting) &#123; this.name = name; privates.set(this, &#123; id: ids++, makeGreeting &#125;); &#125; equals(otherPerson) &#123; return privates.get(this).id === privates.get(otherPerson).id; &#125; greet(otherPerson) &#123; return privates.get(this).makeGreeting(otherPerson.name); &#125; &#125;;&#125;)();let alice = new Person("Alice", name =&gt; `Hello, $&#123;name&#125;!`);let bob = new Person("Bob", name =&gt; `Hi, $&#123;name&#125;.`);alice.equals(bob); // falsealice.greet(bob); // === 'Hello, Bob!' 乍看好像没有问题，但是： 123456let mallory = new Person("Mallory", function(name) &#123; this.id = 0; return `o/ $&#123;name&#125;`;&#125;);mallory.greet(bob); // === 'o/ Bob'mallory.equals(alice); // true. 错了！ 你怎么使用 Symbols 提供隐藏但不封装的属性？123456789101112131415161718const Person = (function() &#123; const _id = Symbol("id"); let ids = 0; return class Person &#123; constructor(name) &#123; this.name = name; this[_id] = ids++; &#125; equals(otherPerson) &#123; return this[_id] === otherPerson[_id]; &#125; &#125;;&#125;)();let alice = new Person("Alice");let bob = new Person("Bob");alice.equals(bob); // falsealice[Object.getOwnPropertySymbols(alice)[0]]; // == 0，alice 的 id. 译者按：FAQ 到此结束，可能有的地方会比较晦涩，多看几遍写几个 demo 基本就懂了。我觉得技术存在 看山是山 -&gt; 看山不是山 -&gt; 看山还是山 这样一个渐进的过程，翻译这篇 FAQ 也并非为 # 辩护，只是现在很多质疑还停留在 看山是山 这样一个阶段。我希望这篇 FAQ 可以让你 看山不是山，最后达到 看山还是山 的境界：问题还是存在问题，不过是站在更全面和系统的角度去思考问题。]]></content>
      <categories>
        <category>翻译</category>
        <category>前端</category>
        <category>ES</category>
      </categories>
      <tags>
        <tag>ES</tag>
        <tag>翻译</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TC39 标准追踪：babel 中的 decorators]]></title>
    <url>%2F2018%2F09%2F22%2FTC39%20%E6%A0%87%E5%87%86%E8%BF%BD%E8%B8%AA%EF%BC%9Ababel%20%E4%B8%AD%E7%9A%84%20decorators%2F</url>
    <content type="text"><![CDATA[翻译自 TC39 Standards Track Decorators in Babel &emsp;&emsp;Babel 7.1.0 终于支持了新的 decorators 提案：你可以通过使用 @babel/plugin-proposal-decorators 进行体验。 历史的进程&emsp;&emsp;decorators 的第一个方案是由Yehuda Katz在三年前提出的。TypeScript 也在1.5 版本（2015）与 ES6 特性一起发布了 decorators。一些主流的前端框架，比如 angular 和 MobX，也开始用 decorators 加强开发体验：这让 decorators 更加流行，却让社区误以为 decorators 是一个稳定的特性。 &emsp;&emsp;Babel 在5.0 版本实现了 decorators。但是在 Babel 6 移除了它，因为它并不稳定。为此 Logan Smyth 创建了非官方插件 babel-plugin-transform-decorators-legacy，这个插件的实现和 Babel 5 保持一致。直到 Babel 7 alpha 发布，这个插件才重新回到 Babel 的官方库中。该插件仍然使用旧提案的语义，因为新的语义还不够明确。 &emsp;&emsp;从那时候开始，Daniel Ehrenberg 和 Brian Terlson 开始协助 Yehuda Katz 整理新的 decorators 提案，他们几乎重写了这份提案。但即便如此，仍然无法保证面面俱到，迄今为止的实现方式还是不够兼容。 &emsp;&emsp;Babel 7.0.0 为 @babel/plugin-proposal-decorators 引入了一个配置项：legacy，但是当时它只存在 true 这一个合法的值。这个突破性的变化用于日后新旧版本的平滑过渡。 &emsp;&emsp;Babel 7.1.0 提供了对新提案的支持，而且 @babel/plugin-proposal-decorators 默认启用新的实现。 &emsp;&emsp;新提案同时支持对私有成员和私有方法进行装饰，但这些特性在 Babel 中尚未实现，或许很快就会实现了。 新提案有哪些变化？&emsp;&emsp;虽然新提案看上去和旧提案很像，但几个关键的差别导致了两者的不兼容。 语法&emsp;&emsp;旧提案支持任意的左值表达式作为 decorators 的 body（即@后面的内容）。举个例子，这是合法的代码： 1234567class MyClass &#123; @getDecorators().methods[name] foo() &#123;&#125; @decorator [bar]() &#123;&#125;&#125; &emsp;&emsp;这个语法有个问题：[…] 符号同时作为 decorators body 中的属性访问符（即 methods[name] 中的 [name] ）和类方法的计算属性名（即 [bar]() {} 中的 [bar] ）。为了防止语义模糊，新提案中只允许 . 作为属性访问符。如果你想实现诸如@getDecorators().methods[name]的功能，需要借助圆括号： 1234567class MyClass &#123; @(getDecorators().methods[name]) foo() &#123;&#125; @decorator [bar]() &#123;&#125;&#125; 译者按：以上的例子我按个人的理解做了调整。而且据我测试，第一个例子中的第二个 decorator 的写法在旧提案中是错误的。因为 [bar] 会作为 decorators body 的 token 而非 class method 的 name。那么 class method 就不存在 name，会报 unexpected token 的语法错误。 对象 decorators&emsp;&emsp;旧提案除了支持类 decorators、类成员 decorators，还支持对象 decorators： 123456const myObj = &#123; @dec1 foo: 3, @dec2 bar() &#123;&#125;&#125;; &emsp;&emsp;鉴于当前的对象 decorators 语义存在不兼容性，该特性从提案从被移除了。如果你在代码中使用了此特性，请保持关注，因为在后续的 提案 中可能被再次引入。 decorators 参数&emsp;&emsp;第三个关键的改动是 decorators 的参数列表 &emsp;&emsp;在旧提案中，类成员 decorators 接收三个参数，target（类的原型）、key（成员名）、property descriptor（属性描述符）—— 类似于 Object.defineProperty 的参数列表。而类 decorators 仅接收 constructor 这一个参数。 &emsp;&emsp;新提案在这点上要强大的多：成员 decorators 接收一个对象，这个对象包含以下属性，你可以对其进行任意的修改：descriptor(原 descriptor)、key(成员名)、placement(属性的位置，static、prototype、own)、kind(属性的类型，field、method)。 &emsp;&emsp;类 decorators 同样接收一个对象，通过这个对象可以访问到所有的类成员 decorators 的入参，这个特性确保了在创建类之前还可以对类成员做进一步的修改。 译者按：这部分才是最重大的修改，也是不兼容的核心原因。如果要一一列出比较,应该独立成一篇 blog，所以此处不做赘述。 升级方式&emsp;&emsp;由于不兼容，如果项目中采用了新提案，就不能使用旧的 decorators：因为现存的库（MobX， Angular 等）都没有引入新特性，这会导致迁移过程非常慢。鉴于这个问题，我们发布了一个工具包，你可以在你的代码中使用它包装原有的 decorators 作为变通的方案。先运行这个工具包，然后你就可以在 Babel 的 config 中配置新提案了。 &emsp;&emsp;你可以这样更新你的文件 12npm install wrap-legacy-decorators -Dnpx wrap-legacy-decorators src/file-with-decorators.js --decorators-before-export --write &emsp;&emsp;如果你的代码运行在 node 环境，或者你使用 webpack 或者 rollup 打包你的代码，你可以引入外部依赖而不是在每个文件中都注入工具包提供的包装函数。 12npm install decorators-compatnpx wrap-legacy-decorators src/file-with-decorators.js --decorators-before-export --external-helpers --write &emsp;&emsp;更多的信息，你可以参考这个文档。 已知问题&emsp;&emsp;新提案并非是面面俱到的：decorators 是个非常大的特性，要完整的定义它非常的复杂。 Exported Classes 的 decorators 应该放在哪里？ tc39/proposal-decorators#69 &emsp;&emsp;decorators 提案在这个问题上反复摇摆：decorators 应该放在关键字 export 的前面还是后面？ 123456export @decorator class MyClass &#123;&#125;// or@decoratorexport class MyClass &#123;&#125; &emsp;&emsp;这里潜在的一个问题是：export 关键字是类的一部分还是一个“包装器”。第一个例子中，因为 decorators 必须放在声明的开头，所以它应该放在 decorators 后面；第二个例子中，因为 decorators 是声明的一部分，所以它应该放在 decorators 前面。 对于私有成员，decorators 应该采用怎样的安全策略？&emsp;&emsp;decorators 引发了一个重要的安全问题：如果私有成员可以被装饰，那么成员名会泄露。这里需要考虑不同的安全等级： decorators 不能泄露私有成员名，不然恶意代码可以从 decorators 中窃取此信息 私有成员的 decorators 是可信的，类 decorators 是不可信的？ 硬隐私 意味着私有成员只能在类内部访问：那么 decorators 应该访问私有成员名吗？还是只能装饰公有成员？ &emsp;&emsp;这些问题在解决前需要进一步讨论，这也是 Babel 的意义所在。 Babel 充当的角色&emsp;&emsp;随着 Babel 7 的发布，我们开始利用我们在 JS 生态中的地位，通过让开发人员对于不同版本的提案进行体验和给予反馈以帮助提案作者进行决策。 &emsp;&emsp;出于这个原因，更新 @babel/plugin-proposal-decorators 之后，我们引入了新的选项：decoratorsBeforeExport。通过这个选项，你可以尝试切换 export @decorator class C {} 和 @decorator export default class 这两种不同的语法。 &emsp;&emsp;我们还将引入另一个选项来自定义隐私策略。这些选项是必填项，直到 TC39 做出最终的决定，而这个决定将成为默认项。 &emsp;&emsp;如果你是直接使用我们的解析器（@babel/parser，以前的 babylon），你也可以在版本 7.0.0 中使用 decoratorsBeforeExport 这个选项。 123const ast = babylon.parse(code, &#123; plugins: [["decorators", &#123; decoratorsBeforeExport: true &#125;]]&#125;); 使用方式1npm install @babel/plugin-proposal-decorators -D 123456&#123; "plugins": [ "@babel/plugin-proposal-decorators", &#123; "decoratorsBeforeExport": true &#125; ]&#125; &emsp;&emsp;查看 @babel/plugin-proposal-decorators 了解更多的选项。 你的角色&emsp;&emsp;作为一个 JS 开发人员，你可以和我们一起勾勒这个语言的未来。你可以尝试 decorators 提供的各种各样的语义，并给予提案作者一定的反馈。我们需要知道它用于真实项目的情况！你也可以通过阅读 提案仓库 中的讨论和会议纪要了解为何这样设计。 &emsp;&emsp;如果你现在就想体验 decorators，你可以在我们的 线上解释器 通过设置不同的 presets 选项体验它。]]></content>
      <categories>
        <category>翻译</category>
        <category>前端</category>
        <category>ES</category>
      </categories>
      <tags>
        <tag>ES</tag>
        <tag>翻译</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[聊一聊promise的前世今生]]></title>
    <url>%2F2018%2F05%2F22%2F%E8%81%8A%E4%B8%80%E8%81%8Apromise%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;promise 的概念已经出现很久了，浏览器、nodejs 都已经全部实现 promise 了。现在来聊，是不是有点过时了？ &emsp;&emsp;确实，如果不扯淡，这篇随笔根本不会有太多内容。所以，我就尽可能的，多扯一扯，聊一聊 promise 的另一面。 &emsp;&emsp;大家应该都知道怎么创建一个 promise 123var promise = new Promise(resolve =&gt; &#123; setTimeout(() =&gt; resolve("tarol"), 3000);&#125;); &emsp;&emsp;如果从业时间长一点，会知道以前的 promise 不是这么创建的。比如如果你用过 jquery，jquery 在 1.5 引入 deferred 的概念，里面是这样创建 promise 的 12var defer = $.Deferred();var promise = defer.promise(); &emsp;&emsp;如果你用过 angular，里面有个 promise service 叫$q，它又是这么创建 promise 的 12var defer = $q.defer();var promise = defer.promise; &emsp;&emsp;好了，这里已经有三种创建 promise 的方式了。其中第一种是现在最常见的，第二种和第三种看上去很像，但却有细微的差别。比如 jquery 里面是通过执行函数 promise()返回 promise，而 angular 中 defer 的属性就是 promise。如果你还有兴趣，那么我从头开始讲。 &emsp;&emsp;promise 的引入是为了规范化异步操作，随着前端的逻辑越来越复杂，异步操作的问题越来越亟待解决。首先大量的异步操作形成了 N 级的大括号，俗称“回调地狱”；其次 callback 的写法没有标准，nodejs 里面的 callback 一般是(err, data) =&gt; {…}，jquery 里面的 success callback 又是 data =&gt; {…}。在这种场景下，很多异步流程控制的类库应运而生。 &emsp;&emsp;作为前端，一般最早接触 promise 的概念是在 jquery 的 1.5 版本发布的 deferred objects。但是前端最早引入 promise 的概念的却不是 jquery，而是 dojo，而且 promise 之所以叫 promise 也是因为 dojo。Promises/A 标准的撰写者 KrisZyp 于 09 年在 google 的 CommonJS 讨论组发了一个贴子，讨论了 promise API 的设计思路。他声称想将这类 API 命名为 future，但是 dojo 已经实现的 deferred 机制中用到了 promise 这个术语，所以还是继续使用 promise 为此机制命名。之后便有了 CommonJS 社区的这个 proposal，即 Promises/A。如果你对什么是 deferred，什么是 promise 还存在疑问，不要急，先跳过，后面会讲到。 &emsp;&emsp;Promises/A 是一个非常简单的 proposal，它只阐述了 promise 的基本运行规则 promise 对象存在三种状态：unfulfilled, fulfilled 和 failed 一旦 promise 由 unfulfilled 切换为 fulfilled 或者 failed 状态，它的状态不可再改变 proposal 没有定义如何创建 promise promise 对象必须包含 then 方法：then(fulfilledHandler, errorHandler, progressHandler) 交互式 promise 对象作为 promise 对象的扩展，需要包含 get 方法和 call 方法：get(propertyName)、call(functionName, arg1, arg2, …) &emsp;&emsp;如果你研究过现在浏览器或 nodejs 的 promise，你会发现 Promises/A 好像处处相似，但又处处不同。比如三种状态是这个叫法吗？progressHandler 没见过啊！get、call 又是什么鬼？前面两个问题可以先放一放，因为后面会做出解答。第三个问题这里解释下，什么是 get，什么是 call，它们的设计初衷是什么，应用场景是什么？虽然现在你轻易见不到它们了，但是了解它们有助于理解后面的部分内容。 &emsp;&emsp;一般来说，promise 调用链存在两条管道，一条是 promise 链，就是下图一中的多个 promise，一条是回调函数中的值链，就是下图二中的多个 value 或 reason。 &emsp;&emsp;现在我们都知道，值链中前一个 callback（callback1）的返回值是后一个 callback（callback2）的入参（这里仅讨论简单值类型的 fulfilled 的情况）。但是如果我 callback1 返回的是 a，而 callback2 的入参我希望是 a.b 呢？或许你可以说那我 callback1 返回 a.b 就是了，那如果 callback1 和 callback2 都是固定的业务算法，它们的入参和返回都是固定的，不能随便修改，那又怎么办呢？如果 promise 只支持 then，那么我们需要在两个 then 之间插入一个新的 then：promise.then(callback1).then(a =&gt; a.b).then(callback2)。而 get 解决的就是这个问题，有了 get 后，可以这么写：promise.then(callback1).get(‘b’).then(callback2)，这样 promise 链条中就可以减少一些奇怪的东西。同理，当 a.b 是一个函数，而 callback2 期望的入参是 a.b(c)，那么可以这样写：promise.then(callback1).call(‘b’, c).then(callback2)。 &emsp;&emsp;我们回到之前的话题，现在常见的 promise 和 Promise/A 到底是什么关系，为什么会有花非花雾非雾的感觉？原因很简单，常见的 promise 是参照 Promises/A 的进阶版——Promises/A+定义的。 &emsp;&emsp;Promises/A 存在一些很明显的问题，如果你了解 TC39 process 或者 RFC 等标准审核流程，你会发现： 首先 Promise/A 里面用语不规范，尤其是对术语的使用 只描述 API 的用途，没有详细的算法 &emsp;&emsp;Promises/A+就是基于这样的问题产生的，要说明的是 Promises/A+的维护者不再是前面提到的 KrisZyp，而是由一个组织维护的。 &emsp;&emsp;组织的成员如下，其中圈出来的另一个 Kris 需要留意一下，之后还会提到他。 &emsp;&emsp;Promises/A+在 Promises/A 的基础上做了如下几点修正： 移除了 then 的第三个入参 progressHandler，所以你见不到了 移除了交互式 promise 的 API：get 和 call，所以你用不了了 规定 promise2 = promise1.then(…)中允许 promise1 === promise2，但是文档必须对此情况进行说明 promise 的三种状态术语化：pending，fulfilled，rejected 规定 fulfilled 传递的参数叫 value，rejected 传递的参数叫 reason 严格区分 thenable 和 promise，thenable 作为 promise 的鸭子类型存在，thenable 是什么、鸭子类型是什么，下面会解释 使用正式且标准的语言描述了 then 方法的逻辑算法，promises-aplus 还提供了验证实现的 test case &emsp;&emsp;Promises/A+没有新增任何 API，而且删掉了 Promises/A 的部分冗余设计。这样一来，Promises/A+其实只规定了，promise 对象必须包含指定算法的方法 then。接下来我会归整下所谓的 then 算法，以及它存在哪些不常见的调用方式。 &emsp;&emsp;then 的基本调用方式：promise.then(onFulfilled, onRejected)，我默认你已经掌握了基础的 then 调用，所以常见的场景以下不做举例。 onFulfilled 和 onRejected 都是可选的，如果省略了或者类型不是函数，前面流过来的 value 或者 reason 直接流到下一个 callback，我们举两个极端的例子 123456Promise.resolve("resolve") .then() .then(value =&gt; console.log(value)); // resolvePromise.reject("reject") .then() .then(void 0, reason =&gt; console.log(reason)); //reason &emsp;&emsp;&emsp;这个特性决定了我们现在可以这样写异常处理 12345Promise.reject("reason") .then(v =&gt; v) .then(v =&gt; v) .then(v =&gt; v) .catch(reason =&gt; console.log(reason)); //reason &emsp;&emsp;&emsp;但是如果你在 then 链条中，插入一个空的 onRejected，reason 就流不到 catch 了。因为 onRejected 返回了 undefined，下一个 promise 处于 fulfilled 态 12345Promise.reject("reason") .then(v =&gt; v) .then(v =&gt; v) .then(v =&gt; v, () =&gt; &#123;&#125;) .catch(reason =&gt; console.log(reason)); onFulfilled 或 onRejected 只能调用一次，且只能以函数的形式被调用，对应的是不能以属性方法的方式被调用，比如 123456789var name = "tarol";var person = &#123; name: "okal", say: function() &#123; console.log(this.name); &#125;&#125;;person.say(); //okalPromise.resolve("value").then(person.say); //tarol &emsp;&emsp;&emsp;如果你想第二行还是打印出’okal’，请使用 bind 1Promise.resolve("value").then(person.say.bind(person)); //okal onFulfilled 或者 onRejected 中抛出异常，则 promise2 状态置为 rejected 1var promise2 = promise1.then(onFulfilled, onRejected); 上面的例子中，onFulfilled 或者 onRejected 如果返回了任意值 x（如果不存在 return 语句，则是返回 undefined），则进入解析过程[Resolve]，解析过程[Resolve]算法如下： 如果 x 是 promise，则 promise2 的状态取决于 x 的状态 那么你会想，如果 x === promise2 呢？promise2 的状态取决于本身的状态？这就像把 obj 的原型设置为自身一样肯定是不允许的。所以其实在第一条规则之前，还有一条：如果 x === promise2，抛出 TypeError。之所以把这条规则放到下面，是用前一条规则引出这条规则的必要性 如果 x 不是对象，promise2 置为 fulfilled，value 为 x 如果 x 是对象 访问 x.then 时，如果抛出异常，则 promise2 置为 rejected，reason 为抛出的异常 12345678var obj = &#123; get then() &#123; throw "err"; &#125;&#125;;Promise.resolve("value") .then(v =&gt; obj) .catch(reason =&gt; console.log(reason)); // err 如果 then 不是函数，则同 3 12345678Promise.resolve("value") .then(v =&gt; &#123; return &#123; name: "tarol", then: void 0 &#125;; &#125;) .then(v =&gt; console.log(v.name)); //tarol &emsp;&emsp;&emsp;如果 then 是函数，那么 x 就是一个 thenable，then 会被立即调用，传入参数 resolve 和 reject，并绑定 x 作为 this。 如果执行过程中调用了 resolve(y)，那么进入下一个解析过程[Resolve]，可以看出解析过程实际上是一个递归函数 如果调用了 reject(r)，那么 promise2 置为 rejected，reason 为 r 调用 resolve 或 reject 后，后面的代码依然会运行 12345678910Promise.resolve("value") .then(v =&gt; &#123; return &#123; then: (resolve, reject) =&gt; &#123; resolve(v); console.log("continue"); // continue &#125; &#125;; &#125;) .then(v =&gt; console.log(v)); // value 如果既调用了 resolve、又调用了 reject，仅第一个调用有效 12345678910Promise.resolve("value") .then(v =&gt; &#123; return &#123; then: (resolve, reject) =&gt; &#123; resolve("resolve"); reject("reject"); &#125; &#125;; &#125;) .then(v =&gt; console.log(v), r =&gt; console.log(r)); // resolve 如果抛出了异常，而抛出的时机在 resolve 或 reject 前，promise2 置为 rejected，reason 为异常本身。如果抛出的时机在 resolve 或 reject 之后，则忽略这个异常。以下 case 在 chrome 66 上运行失败，promise 处于 pending 状态不切换，但是在 nodejs v8.11.1 上运行成功 12345678910Promise.resolve("value") .then(v =&gt; &#123; return &#123; then: (resolve, reject) =&gt; &#123; resolve("resolve"); throw "err"; &#125; &#125;; &#125;) .then(v =&gt; console.log(v), r =&gt; console.log(r)); // resolve 12345678910Promise.resolve("value") .then(v =&gt; &#123; return &#123; then: (resolve, reject) =&gt; &#123; throw "err"; resolve("resolve"); &#125; &#125;; &#125;) .then(v =&gt; console.log(v), r =&gt; console.log(r)); // err &emsp;&emsp;上面的例子中涉及到一个重要的概念，就是 thenable。简单的说，thenable 是 promise 的鸭子类型。什么是鸭子类型？搜索引擎可以告诉你更详尽的解释，长话短说就是“行为像鸭子那么它就是鸭子”，即类型的判断取决于对象的行为（对象暴露的方法）。放到 promise 中就是，一个对象如果存在 then 方法，那么它就是 thenable 对象，可以作为特殊类型（promise 和 thenable）进入 promise 的值链。 &emsp;&emsp;promise 和 thenble 如此相像，但是为什么在解析过程[Resolve]中交由不同的分支处理？那是因为虽然 promise 和 thenable 开放的接口一样，但过程角色不一样。promise 中 then 的实现是由 Promises/A+规定的（见 then 算法），入参 onFulfilled 和 onRejected 是由开发者实现的。而 thenable 中 then 是由开发者实现的，入参 resolve 和 reject 的实现是由 Promises/A+规定的（见 then 算法 3.3.3）。thenable 的提出其实是为了可扩展性，其他的类库只要实现了符合 Promises/A+规定的 thenable，都可以无缝衔接到 Promises/A+的实现库中。 &emsp;&emsp;Promises/A+先介绍到这里了。如果你细心，你会发现前面漏掉了一个关键的内容，就是之前反复提到的如何创建 promise。Promise/A+中并没有提及，而在当下来说，new Promise(resolver)的创建方式仿佛再正常不过了，普及程度让人忘了还有 deferred.promise 这种方式。那么 Promise 构造器又是谁提出来的，它为什么击败了 deferred 成为了 promise 的主流创建方式？ &emsp;&emsp;首先提出 Promise 构造器的标准大名鼎鼎，就是 es6。现在你见到的 promise，一般都是 es6 的实现。es6 不仅规定了 Promise 构造函数，还规定了 Promise.all、Promise.race、Promise.reject、Promise.resolve、Promise.prototype.catch、Promise.prototype.then 一系列耳熟能详的 API（Promise.try、Promise.prototype.finally 尚未正式成为 es 标准），其中 then 的算法就是将 Promises/A+的算法使用 es 的标准写法规范了下来，即将 Promises/A+的逻辑算法转化为了 es 中基于解释器 API 的具体算法。 &emsp;&emsp;那么为什么 es6 放弃了大行其道的 deferred，最终敲定了 Promise 构造器的创建方式呢？我们写两个 demo 感受下不同 1234567var Q = require("q");var deferred = Q.defer();deferred.promise.then(v =&gt; console.log(v));setTimeout(() =&gt; deferred.resolve("tarol"), 3000); 12345var p = new Promise(resolve =&gt; &#123; setTimeout(() =&gt; resolve("tarol"), 3000);&#125;);p.then(v =&gt; console.log(v)); &emsp;&emsp;前者是 deferred 方式，需要依赖类库 Q；后者是 es6 方式，可以在 nodejs 环境直接运行。 &emsp;&emsp;如果你习惯使用 deferred，你会觉得 es6 的方式非常不合理： &emsp;&emsp;首先，promise 的产生的原因之一是为了解决回调地狱的问题，而 Promise 构造器的方式在构造函数中直接注入了一个函数，如果这个函数在复杂点，同样存在一堆大括号。 &emsp;&emsp;其次，promise 基于订阅发布模式实现，deferred.resolve/reject 可以理解为发布器/触发器（trigger），deferred.promise.then 可以理解为订阅器（on）。在多模块编程时，我可以在一个公共模块创建 deferred，然后在 A 模块引用公共模块的触发器触发状态的切换，在 B 模块引用公共模块使用订阅器添加监听者，这样很方便的实现了两个没有联系的模块间互相通信。而 es6 的方式，触发器在 promise 构造时就生成了并且立即进入触发阶段（即创建 promise 到 promise 被 fulfill 或者 reject 之间的过程），自由度减少了很多。 &emsp;&emsp;我一度很反感这种创建方式，认为这是一种束缚，直到我看到了 bluebird（Promise/A+的实现库）讨论组中某个帖子的解释。大概说一下，回帖人的意思是，promise 首先应该是一个异步流程控制的解决方案，流程控制包括了正常的数据流和异常流程处理。而 deferred 的方式存在一个致命的缺陷，就是 promise 链的第一个 promise（deferred.promise）的触发阶段抛出的异常是不交由 promise 自动处理的。我写几个 demo 解释下这句话 12345678910var Q = require("q");var deferred = Q.defer();deferred.promise .then(v =&gt; &#123; throw "err"; &#125;) .catch(reason =&gt; console.log(reason)); // errsetTimeout(() =&gt; deferred.resolve("tarol")); &emsp;&emsp;以上是一个正常的异常流程处理，在值链中抛出了异常，自动触发下一个 promise 的 onRejected。但是如果在 deferred.promise 触发阶段的业务流程中抛出了异常呢？ 123456789var Q = require("q");var deferred = Q.defer();deferred.promise.catch(reason =&gt; console.log(reason)); // 不触发setTimeout(() =&gt; &#123; throw "err"; deferred.resolve("tarol");&#125;); &emsp;&emsp;这个异常将抛出到最外层，而不是由 promise 进行流程控制，如果想让 promise 处理抛出的异常，必须这么写 12345678910111213var Q = require("q");var deferred = Q.defer();deferred.promise.catch(reason =&gt; console.log(reason)); // errsetTimeout(() =&gt; &#123; try &#123; throw "err"; &#125; catch (e) &#123; deferred.reject(e); &#125;&#125;); &emsp;&emsp;deferred 的问题就在这里了，在 deferred.promise 触发阶段抛出的异常，不会自动交由 promise 链进行控制。而 es6 的方式就简单了 12345var p = new Promise(() =&gt; &#123; throw "err";&#125;);p.catch(r =&gt; console.log(r)); // err &emsp;&emsp;可见，TC39 在设计 Promise 接口时，首先考虑的是将 Promise 看作一个异步流程控制的工具，而非一个订阅发布的事件模块，所以最终定下了 new Promise(resolver)这样一种创建方式。 &emsp;&emsp;但是如果你说：我不听，我不听，deferred 就是比 new Promise 好，而且我的 promise 在触发阶段是不会抛出异常的。那好，还有另外一套标准满足你，那就是 Promises/B 和 Promises/D。其中 Promises/D 可以看做 Promises/B 的升级版，就如同 Promises/A+之于 Promises/A。这两个标准的撰写者都是同一个人，就是上面 Promises/A+组织中圈起来的大胡子，他不仅维护了这两个标准，还写了一个实现库，就是上面提到的 Q，同时 angular 中的$q 也是参照 Q 实现的。 Promises/B 和 Promises/D（以下统称为 Promises/B）都位于 CommonJS 社区，但是由于没有被社区采用，处于废弃的状态。而 Q 却是一个长期维护的类库，所以 Q 的实现和两个标准已经有所脱离，请知悉。 &emsp;&emsp;Promises/B 和 es6 可以说是 Promises/A+的两个分支，基于不同的设计理念在 Promises/A+的基础上设计了两套不同的 promise 规则。鉴于 Promises/A+在创建 promise 上的空白，Promises/B 同样提供了创建 promise 的方法，而且是大量创建 promise 的方法。以下这些方法都由实现 Promises/B 的模块提供，而不是 Promises/B 中 promise 对象的方法。 when(value, callback, errback_opt)：类似于 es6 中 Promise.resolve(value).then(callback, errback_opt) asap(value, callback, errback_opt)：基本逻辑同 when，但是 when 中 callback 的调用会放在 setTimeout(callback, 0)中，而 asap 中 callback 是直接调用，该接口在 Q 中已经废弃 enqueue(task Function)：将一个 callback 插入队列并执行，其实就是 fn =&gt; setTimeout(fn, 0)，该接口在 Q 中已经废弃 get(object, name)：类似于 Promise.resolve(object[name]) post(object, name, args)：类似于 Promise.resolve(object[name].apply(object, args)) put(object, name, value)：类似于 Promise.resolve({then: resolve =&gt; object[name] = value; resolve()})，该接口在 Q 中重命名为 set del(object, name)：类似于 Promise.resolve({then: resolve =&gt; delete object[name]; resolve()})，该接口在 Q 中 alias 为 delete makePromise：创建一个流程控制类的 promise，并自定义其 verbs 方法，verbs 方法指以上的 get、post、put、del defer：创建一个 deferred，包含一个延时类的 promise reject：创建一个 rejected 的流程控制类 promise ref：创建一个 resolve 的流程控制类 promise，该接口在 Q 中重命名为 fulfill isPromise：判断一个对象是否是 promise method：传入 verbs 返回对应的函数，如 method(‘get’)即是上面 4 中的 get，已废弃 &emsp;&emsp;不知道以上 API 的应用场景和具体用法不要紧，我们先总结一下。Promises/B 和 es6 理念上最大的出入在于，es6 更多的把 promise 定义为一个异步流程控制的模块，而 Promises/B 更多的把 promise 作为一个流程控制的模块。所以 Promises/B 在创建一个 promise 的时候，可以选择使用 makePromise 创建一个纯粹的操作数据的流程控制的 promise，而 get、post、put、del、reject、ref 等都是通过调用 makePromise 实现的，是 makePromise 的上层 API；也可以使用 defer 创建一个 deferred，包含 promise 这个属性，对应一个延时类的 promise。 &emsp;&emsp;延时类的 promise 经过前面的解释基本都了解用法和场景，那对数据进行流程控制的 promise 呢？在上面 Promises/A 部分说明了 get 和 call 两个 API 的用法和场景，Promises/B 的 get 对应的就是 Promises/A 的 get，call 对应的是 post。put/set 是 Promises/B 新增的，和前二者一样，在操作数据时进行流程控制。比如在严格模式下，如果对象 a 的属性 b 的 writable 是 false。这时对 a.b 赋值，是会抛出异常的，如果异常未被捕获，那么会影响后续代码的运行。 1234567891011"use strict";var a = &#123;&#125;;Object.defineProperty(a, "name", &#123; value: "tarol", writable: false&#125;);a.name = "okay";console.log("end"); // 不运行 &emsp;&emsp;这时候如果使用 Q 的 put 进行流程控制，就可以把赋值这部分独立开来，不影响后续代码的运行。 12345678910111213141516"use strict";var Q = require("q");var a = &#123;&#125;;Object.defineProperty(a, "name", &#123; value: "tarol", writable: false&#125;);Q.set(a, "name", "okay").then( () =&gt; console.log("success"), () =&gt; console.log("fail") // fail);console.log("end"); // end &emsp;&emsp;这部分的应用场景是否有价值呢？答案就是见仁见智了，好在 Q 还提供了 makePromise 这个底层 API，自定义 promise 可以实现比增删改查这些 verbs 更强大的功能。比如当我做数据校验的时候可以这样写 123456789101112131415161718var Q = require("q");var p = Q.makePromise(&#123; isNumber: function(v) &#123; if (isNaN(v)) &#123; throw new Error(`$&#123;v&#125; is not a number`); &#125; else &#123; return v; &#125; &#125;&#125;);p.dispatch("isNumber", ["1a"]) .then(v =&gt; console.log(`number is $&#123;v&#125;`)) .catch(err =&gt; console.log("err", err)); // 1a is not a numberp.dispatch("isNumber", ["1"]) .then(v =&gt; console.log(`number is $&#123;v&#125;`)) // number is 1 .catch(err =&gt; console.log("err", err)); &emsp;&emsp;以上不涉及任何异步操作，只是用 Q 对某个业务功能做流程梳理而已。 &emsp;&emsp;而且 Q 并未和 es6 分家，而是在后续的版本中兼容了 es6 的规范（Q.Promise 对应 es6 中的全局 Promise），成为了 es6 的父集，加之 Q 也兼容了 Promises/A 中被 A+抛弃的部分，如 progressHandler、get、call（post）。所以对于 Q，你可以理解为 promise 规范的集大成者，整体来说是值得一用的。 &emsp;&emsp;最后要提到的是最为式微的 promise 规范——Promises/KISS，它的实现库直接用 futures 命名，实现了 KrisZyp 未竟的心愿。如果比较 github 上的 star，KISS 甚至不如我没有提及的 then.js 和 when。但是鉴于和 Q 一样，是有一定实践经验后 CommonJS 社区 promise 规范的提案，所以花少量的篇幅介绍一下。 &emsp;&emsp;Promises/KISS 不将 Promises/A 作为子集，所以它没有提供 then 作为订阅器，代之的是 when 和 whenever 两个订阅器。触发器也不是常见的 resolve、reject，而是 callback、errback 和 fulfill。其中 callback 类似于 notify，即 progressHandler 的触发器，errback 类似于 reject，fulfill 类似于 resolve。 &emsp;&emsp;为什么会有两个订阅器呢？因为 KISS 不像 Promises/A，A 中的 then 中是传入三个监听器，其中 progressHandler 还可以多次触发。但是 KISS 中的 when 和 whenever 一次只能传入一个监听器，所以它要解决的是，同一种订阅方式，怎么订阅三种不同的监听器？ &emsp;&emsp;首先，怎么区分 fulfilledHandler 和 errorHandler 呢？KISS 借鉴了 nodejs 的回调函数方式，第一个参数是 err，第二个参数是 data。所以 fulfilledHandler 和 errorHandler 在一个监听器里这样进行区分： 1234function(err, data) &#123; if (err) &#123;...&#125; // errorHandler else &#123;...&#125; // fulfilledHandler&#125; &emsp;&emsp;那怎么区分多次调用的 progressHandler 呢？使用 when 注册的监听器只能调用一次，使用 whenever 注册的监听器可以调用多次。我们写个 demo 区分 Q 和 KISS 的 API 的不同： 1234567891011var Q = require("q");var defer = Q.defer();defer.promise.then( v =&gt; console.log("fulfill", v), err =&gt; console.log("reject", err), progress =&gt; console.log("progress", progress));defer.notify(20); // progress 20defer.notify(30); // progress 30defer.notify(50); // progress 50defer.resolve("ok"); // fulfill ok 123456789101112131415161718192021222324var future = require("future");var p = new future();var progressHandler = function(err, progress) &#123; if (err) &#123; console.log("err", err); &#125; else &#123; console.log("progress", progress); &#125;&#125;;p.whenever(progressHandler);p.callback(20); // progress 20p.callback(30); // progress 30p.callback(50); // progress 50p.removeCallback(progressHandler); // 需要移除监听器，不然fulfill时也会触发p.when(function(err, v) &#123; // 需要在callback调用后注册fulfill的监听器，不然callback会触发 if (err) &#123; console.log("reject", err); &#125; else &#123; console.log("fulfill", v); &#125;&#125;);p.fulfill(void 0, "ok"); // fulfill ok &emsp;&emsp;可见，实现同样的需求，使用 future 会更麻烦，而且还存在先后顺序的陷阱（我一向认为简单类库的应用代码如果存在严重的先后顺序，是设计的不合格），习惯使用 es6 的 promise 的童鞋还是不建议使用 KISS 标准的 future。 &emsp;&emsp;整篇文章就到这里，前面提到的 then.js 和 when 不再花篇幅介绍了。因为 promise 的实现大同小异，都是订阅发布+特定的流程控制，只是各个标准的出发点和侧重点不同，导致一些语法和接口的不同。而随着 es 标准的越来越完善，其他 promise 的标准要么慢慢消亡（如 future、then.js），要么给后续的 es 标准铺路（如 bluebird、Q）。所以如果你没有什么执念的话，乖乖的跟随 es 标准是最省事的做法。而这边随笔的目的，一是借机整理一下自己使用各个 promise 库时长期存在的疑惑；二是告诉自己，很多现在看来尘埃落地的技术并非天生如此，沿着前路走过来会比站在终点看到更精彩的世界。]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
        <category>ES</category>
      </categories>
      <tags>
        <tag>文章</tag>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[所谓编码--泛谈ASCII、Unicode、UTF8、UTF16、UCS-2等编码格式]]></title>
    <url>%2F2017%2F09%2F15%2F%E6%89%80%E8%B0%93%E7%BC%96%E7%A0%81--%E6%B3%9B%E8%B0%88ASCII%E3%80%81Unicode%E3%80%81UTF8%E3%80%81UTF16%E3%80%81UCS-2%E7%AD%89%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[最近在看 nodejs 的源码，看到 stream 的实现里面满地都是 encoding，不由想起以前看过的一篇文章——在前面的随笔里面有提到过——阮一峰老师的《字符编码笔记:ASCII，Unicode 和 UTF-8》。 好的文章有一个好处，你每次看都会有新的收获，它就像一款拼图，你每次看都能收获几块碎片，补齐之前的认识；而好文章与拼图不一样的是，好文章是一块无垠的世界，当你不愿局限于当前的眼界的时候，你可以主动走出去，外面要更宽广、更精彩的多。 闲话说到这，开始聊聊所谓的编码。 大家都知道，计算机只认识 0 和 1，不认识什么 abc。如果想让计算机显示 abc，那么就要有一张 1 对 1 的表，用这张表告诉计算机，什么样的二进制串——比如（010101011100）——代表的是 a，什么样的串代表的是 b，这个表描述二进制串到符号的对应关系。ASCII 就是这么一张最早也是最简单的表，这张表简单到包含 128 个符号，比如 10 个数字、26 个小写字母、26 个大写字母，和一堆标点符号（如英文句号、逗号等）还有控制字符（如回车、tab 等）。那为什么是 128，不是 100 或 182？因为 128 正好用 7 个 bit（一个 0 或者 1 为一个 bit）表示。那么为什么不是 256 对或者更多？因为对于英语地区 128 个符号够用了，而在 ASCII 推出的那个年代（1967），大家还没开始着眼全球——这点从名字就可以看出来，ASCII = American Standard Code for Information Interchange（美国信息交换标准码），根本就没打算让别人上车。 然后其他语言地区很快入场了，而且随着八位机的普及，1 字节=8bit 成为了共识，大家都盯上了多出来的 128 个位置。这个时代群魔乱舞，基本是个公司就想染指这块标准，乱象直到 1985 年才通过 ISO/IEC 8859 把 EASCII 确定下来。 而在这个过程中，有一个地区的人根本就不跟你玩，就是意表文字地区，明白的说，主要是中日韩。开玩笑，256 个位置，你全让出来都不够我做两句诗。老司机不带怎么办，只能自己开车了，首先是日本站出来，于 1978 年出台了最早的汉字编码，然后中国大陆、中国台湾、韩国都在 80 年代出台了自己的汉字编码。这个时候，大家各自玩各自的没什么问题，聚在一起，问题就来了。比如一篇文章中包含中日韩三种文字，一串 01 的组合在中国的编码对应的是某个字，在日本的编码对应的却是另一个字，那计算机最后到底显示哪个字，计算机也很为难。有冲突怎么办，开个会通通气吧，于是大家坐在一起成立了个组织，叫 CJK-JRG（China, Japan, Korea Joint Research Group）。虽然这个组织折腾了很多年，而且最终提案也被否决了，但是为另一个方案提供了足够的信息，就是 Unicode。 Unicode 项目于 1987 年启动，在吸收了 CJK-JRG 的方案后于 1992 年 6 月份发布 1.0.1 版（之前的 1.0.0 没有包含汉字），迄今为止还在增修，最新的版本是 2017.6.20 公布的 10.0.0。最早的 Unicode 被设计为 16bit，即每个符号占 2byte，最多表示 65536 个符号。而后随着内容的增加，又基于原有设计不变的原则，将最早的 65536 个字符集合称为基本多文种平面（Basic Multilingual Plane, BMP），并添加 16 个辅助平面（总共支持 65536 * 17 = 1114112 个符号）。这样一来，原来的 16bit 就不够用了，需要 21bit 才能准确描述一个符号，相当于 3byte 不到，但是为了以后扩展方便及统一，辅助平面的符号要求使用 4byte 描述。 Unicode 解决了全世界人民用一套符号编码的问题，但却没有解决另一个问题，就是怎么存储的问题。按照一般的想法，所有的符号都必须以最长的 Unicode 符号的标准来存储，也就是 4byte，这样才不会有信息丢失。但是这样的话，对于全部是英文的文档，要浪费掉 3/4 的区域，对于大多数汉字，即 BMP 中的汉字，也要浪费掉 1/2 的区域。所以野蛮的使用 4byte 进行存储是不可取的，那么就要设计一套变长的规则来处理不同类型的符号，这时候 UTF8、UTF16 等就应运而生了，也就是说 UTF8、UTF16 是 Unicode 的一种实现方案（标准的说法，是 Unicode 字符编码五层模型的第三层，如果你对五层模型感兴趣，跳转《刨根究底字符编码》）。 先说 UTF8，UTF8 是完全变长的，占用 1-6byte，乍一看，怎么比直接用 4byte 存储还多出一半呢？其实占用 4byte 的情况是很少的，少到在几乎可以忽略不计，而 5、6byte 基于当前 16 个辅助平面的情况下还用不上。一般来说，英文占用 1byte，中文占用 3byte（CJK-JRG 最早提供给 Unicode 的 20000 多个符号位于位于 U+4E00–U+9FFF，这块区域的符号统一都占 3byte），所以一般来说使用 UTF8 可以节省 1/4 到 3/4 的存储区域。这样似乎解决了存储的问题，但却带来了另一个问题，即识别的问题。比如我给你 3byte 的二进制信息，告诉你这代表了一个字，那你肯定很快能知道是什么字，但我如果不告诉你字数呢，是一个字，两个字，还是三个字？你根本识别不出来这一串二进制是什么。这就是变长的方案需要解决的第二个问题，告诉读取方哪几个 byte 是一组的，UTF8 的规则很简单，我直接从阮老师的博客里搬运过来。 对于单字节的符号，字节的第一位设为 0，后面 7 位为这个符号的 unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的。 对于 n 字节的符号（n&gt;1），第一个字节的前 n 位都设为 1，第 n+1 位设为 0，后面字节的前两位一律设为 10。剩下的没有提及的二进制位，全部为这个符号的 unicode 码。 Unicode 符号范围（十六进制） UTF-8 编码方式（二进制） 0000 0000-0000 007F 0xxxxxxx 0000 0080-0000 07FF 110xxxxx 10xxxxxx 0000 0800-0000 FFFF 1110xxxx 10xxxxxx 10xxxxxx 0001 0000-001F FFFF 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 0020 0000-03FF FFFF 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 0400 0000-7FFF FFFF 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 简单的说，你收到很多个 byte 的二进制，从第一个 byte 开始读，数第一个 0 出现之前的 1，有几个 1 就代表前面几个 byte 是一组的，0 个 1 就代表当前的这个 byte 孤家寡人一个。然后跳过这个组的所有 byte，继续之前数 1 的环节。分好组后，按组找到上表右边的规则，把规则内 x 的位置保留下来，01 的位置全部扔掉（01 代表的位置是 UTF8 的元数据，x 代表的位置才是 Unicode 的数据），拼成新的二进制串，这个串就是 Unicode 了。举个栗子： 111100110 10001000 10010001 11100110 10011000 10101111 01110100 01100001 01110010 01101111 01101100 以上有 11 个 byte，我们从第一个 byte11100110 开始，数第一个 0 前面的 1 的数量，有 3 个 1，代表 3 个 byte 是一组的。然后我们跳过这 3 个，第四个 byte 是 11100110，继续数 1 得出有 3 个 1，然后又给这 3 个 byte 分组。跳过这三个，到了第 7 个 byte，这往后的 5 个 byte 都是以 0 开头，说明每个 byte 为 1 组。现在我们分好组了，有 7 个组，分别是 1[11100110, 10001000, 10010001], [11100110, 10011000, 10101111], [01110100], [01100001], [01110010], [01101111], [01101100] 现在我们按组找到表右对应的行，第一组、第二组对应第五行，其他组对应第三行，我们把行内 x 对应的位置保留，10 的位置删除，得到新的数组 1[0110, 001000, 010001], [0110, 011000, 101111], [1110100], [1100001], [1110010], [1101111], [1101100] 然后把组内的二进制串起来得到 Unicode 1[0110001000010001], [0110011000101111], [1110100], [1110100], [1100001], [1110010], [1101111], [1101100] 这时候我们再按 byte 进行拆分以便阅读，并且在高位补 0 1[01100010 00010001], [01100110 00101111], [01110100], [01110100], [01100001], [01110010], [01101111], [01101100] 再转换成 16 进制 1[62 11], [66 2F], [74], [61], [72], [6F], [6C] 这时候我们打开 F12，在控制台输入对应的 Unicode（语法要求必须使用 4 位 16 进制数字） 1&apos;\u6211\u662f\u0074\u0061\u0072\u006f\u006c&apos; 得到了对应的字符串“我是 tarol”。 好了，以上是 UTF8 的内容，之所以叫 UTF8 是因为这个规则下的符号，最少占 8bit。那么 UTF16 就好理解了，在这个规则下，每个符号最少占 16bit。UTF16 的规则说起来更简单，当符号位于 BMP 中时，占用 2byte，在符号位于辅助平面时，占用 4byte。那既然是变长的，又碰到了上面的问题，怎么识别这一块是 4byte 为一组还是 2byte 为一组？ 这里就要提到 Unicode 的保留区块了，Unicode 规定从 U+D800 到 U+DFFF 之间是永久保留不赋予任何符号的。也就是正常情况下，2byte 如果落在这个范围内，那么就是 Unicode 的非法字节。而 UTF16 的做法就是把辅助平面的 Unicode 码进行处理，变成 4 个字节，并且两两落在非法区域内，读取方读到了非法字节，就可以界定这里是 4byte 为一组，不然就是 2byte 为一组。那么 UTF16 这个转换的算法又是怎样的呢？ 首先按现在 17 个平面的限制，辅助平面的码位是 U+10000 到 U+10FFFF，我们得到了一个辅助平面的 Unicode 码时，先减去 BMP 的码数 0x10000，得到的数介于 0 到 0xFFFFF 之间，最多用 20bit 表示 然后我们把 20bit 从中间隔开，分为高位的 10bit 和低位的 10bit 我们知道 10bit 的取值范围是 0 到 0x3FF，高位的 10bit 加上固定值 0xD800，得到的值叫做前导代理（lead surrogate），范围是 0xD800 到 0xDBFF 低位的 10bit 加上固定值 0xDC00，得到的值叫做后尾代理（tail surrogate），范围是 0xDC00 到 0xDFFF。这样一来，不仅高位和低位都落在了保留区块内，而且彼此还做了区分。 还是举个例子。 𤭢，这个字是个异体字，通“碎”，位于辅助平面，Unicode 码位是 U+24B62，我们来算一下它的 UTF16 编码结果 首先 0x24B62 减去 10000 得到 0x14B62，根据这 5 个 byte 得到 20bit，0001 0100 1011 0110 0010 然后分成高位的 10bit（0001010010）和低位的 10bit（1101100010） 高位+0xD800 得到（1101 1000 0101 0010） 低位+0xDC00 得到（1101 1111 0110 0010） 转换为 16 进制就是 0xD852 和 0xDF62，这就是 𤭢 的 UTF16 表示。 然后我们验证一下答案，照常打开控制台，键入 ‘𤭢’.charCodeAt(0).toString(16) 得到 ‘d852’，键入’𤭢’.charCodeAt(1).toString(16) 得到 ‘df62’，验证成功！而且这里还透露了一个细节，ES 规定 string 是经过 UTF16 编码的（ES5 标准文档）。 UTF16 的事还没完，如果用过 nodejs 里面的 string_decoder 接口的人肯定注意到了，其中对 UTF16 编码的支持叫 utf16le，这个 le 是什么？其实这个是 Little Endian 的简称，对应的是 Big Endian。我们之前举的例子就是 Big Endian，Little Endian 不同在于每个 2byte 组里面的顺序是反过来的，即上面的 0xD852 和 0xDF62 改成 0x52D8 和 0x62DF 就是 𤭢 的 utf16le 编码了。至于为什么会有这么蛋疼的区分，那是操作系统的遗留问题，就像 window 的 CRLF 和 unix 的 LF 一样。 UTF16 告一段落了，新问题又来了。我们有 UTF8、UTF16LE、UTF16BE 这么多种编码，那一串二进制流过来我们用哪种编码方式去解析呢？尤其是 UTF16LE 和 UTF16BE，它们大部分规则是一样的，只是反过来了罢了。这里就要提到文件的一个元数据叫 BOM（byte-order mark）了，BOM 位于文件二进制流的最前方，标识当前文件的编码格式。UTF16LE 的 BOM 为 FF FE，UTF16BE 的 BOM 为 FE FF，UTF8 的 BOM 为 EF BB BF，但是一般不建议 UTF8 文件带 BOM。举个栗子，如果文件内容只有’0‘（十六进制编码为 30），那么三种编码方式生成的文件的十六进制编码分别为 编码 十六进制内容 UTF8 EF BB BF 30 UTF16BE FE FF 00 30 UTF16LE FF FE 00 30 从上面的例子也可以看到，UTF16 最大的问题在于：哪怕是 ASCII 标准字符 0，也占用了 2byte。这不仅仅浪费了存储空间，关键在于 UTF16 和 ASCII 不兼容，比如我新建一个文件，内容为 1234567890，使用系统自带的记事本打开，再另存为 Unicode 编码（就是 UTF16LE） 然后再选择打开，选择当前文件，再 ANSI 编码 你会看到这个样子的内容 可以发现，不仅信息错乱了，每个数字之间还有空格。 本来这篇文章到此就结束了，直到我在 nodepad++里面看到了这个 UCS-2 是什么鬼，好像在哪里见过？瞬间脑子里像侦探回忆线索般闪过画面，后来整理发现这就是 UTF16 的 low 版。为什么说是 low 版，因为 USC-2 是定长的，是不支持辅助平面的 UTF16。我们验证下，把‘𤭢’复制到用 notepad++打开的以 UCS-2 编码的文件里，没看出有什么问题，这时候关闭 notepad++再打开。 可以看到，‘𤭢’字碎的只剩渣了。]]></content>
      <categories>
        <category>技术</category>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>文章</tag>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从web图片裁剪出发：了解H5中的canvas]]></title>
    <url>%2F2016%2F04%2F21%2F%E4%BB%8Eweb%E5%9B%BE%E7%89%87%E8%A3%81%E5%89%AA%E5%87%BA%E5%8F%91%EF%BC%9A%E4%BA%86%E8%A7%A3H5%E4%B8%AD%E7%9A%84canvas%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;本篇内容不针对 canvas 文档对每个 api 进行逐个的详解！ &emsp;&emsp;本篇内容不针对 canvas 文档对每个 api 进行逐个的详解！ &emsp;&emsp;本篇内容不针对 canvas 文档对每个 api 进行逐个的详解！ &emsp;&emsp;重说三，好了，现在进入正文。在上一回《从 web 图片裁剪出发：了解 H5 中的 blob》中我解释了图片在浏览器中以怎样的形式留存，并且在最后一个 example 中演示了选择图片、预览最后提交的过程。然而这个预览并没有起到什么卵用，因为只能预览不能处理，原图片还是原图片，预览变得可有可无。这一篇我们就在预览这一步里做点手脚，加入处理图片的功能。 &emsp;&emsp;我们先修改之前的 example，既然要处理图片，肯定要引入 canvas，所以我们把原来 img 这个标签去掉，取而代之的是 canvas，并在 js 中加入对应的修改。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form name='test'&gt; &lt;input type="file" name='file'&gt; &lt;input type="submit" value="提交"&gt; &lt;/form&gt; &lt;canvas width="0" height="0"&gt;&lt;/canvas&gt; &lt;script&gt; var canvas = document.querySelector('canvas'), ctx = canvas.getContext('2d'), preview = new Image(); document.test.file.addEventListener('change', function() &#123; var fr = new FileReader(); fr.onload = function() &#123; preview.src = this.result; canvas.width = preview.width; canvas.height = preview.height; drawImage(); &#125;; fr.readAsDataURL(this.files[0]); &#125;) function drawImage() &#123; ctx.drawImage(preview, 0, 0); //把图片绘制到canvas上 &#125; document.test.addEventListener('submit', function(e) &#123; e.preventDefault(); var formData = new FormData(), xhr = new XMLHttpRequest(), mime = 'image/jpeg', dataUrl = canvas.toDataURL(mime, 0.8), //取出base64 data = atob(dataUrl.split(',')[1]), n = data.length, uInt8 = new Uint8Array(n), blob; while(n--) &#123; uInt8[n] = data.charCodeAt(n); &#125; blob = new Blob([uInt8.buffer], &#123;type: mime&#125;); formData.append('file', blob, 'test.jpg'); xhr.open('post', '/upload'); xhr.send(formData); &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; &emsp;&emsp;之前 example 的 canvas 版实现了，现在我们加入处理图片的功能。首先我们加入裁剪的功能，裁剪的引入必须先引入橡皮筋功能，就是一个选取框。一般我们见过的选取框是这样的。 预览的样子选取的样子 &emsp;&emsp;我们来分析下实现这样一个功能需要做什么。首先选取框有个开始点和结束点，在鼠标按下去的时候确定开始点，在松开的时候确定结束点，在移动的时候还要不停的绘制。那么绘制一个有选取框的内容分几步呢？第一步是绘制底图，第二步是绘制阴影，第三部还是绘制底图，但是只作用于选取框内部。最后想取消选取框怎么办，我们还要有个方法重置开始点和结束点，并且只绘制底图。 &emsp;&emsp;我们一步一步来，首先确定开始点和结束点。 123456789var sPoint = &#123;&#125;, ePoint = &#123;&#125;;canvas.addEventListener("mousedown", function(e) &#123; if (e.button === 0) &#123; sPoint.x = e.offsetX; sPoint.y = e.offsetY; sPoint.drag = true; &#125;&#125;); &emsp;&emsp;然后我们确定绘制阴影的的方法，并且在鼠标按下去移动的时候不停的绘制。 1234567891011121314151617181920212223function drawCover() &#123; ctx.save(); ctx.fillStyle = "rgba(0, 0, 0, 0.3)"; ctx.fillRect(0, 0, canvas.width, canvas.height); ctx.restore();&#125;canvas.addEventListener("mousemove", function(e) &#123; if (e.button === 0 &amp;&amp; sPoint.drag) &#123; var nPoint = &#123; x: e.offsetX, y: e.offsetY &#125;; ctx.save(); //clip要通过restore回复 ctx.clearRect(0, 0, canvas.width, canvas.height); //画布全清 drawImage(); //绘制底图 drawCover(); //绘制阴影 ctx.beginPath(); //开始路径 ctx.rect(sPoint.x, sPoint.y, nPoint.x - sPoint.x, nPoint.y - sPoint.y); //设置路径为选取框 ctx.clip(); //截取路径内为新的作用区域 drawImage(); //在选取框内绘制底图 ctx.restore(); //恢复clip截取的作用范围 &#125;&#125;); &emsp;&emsp;最后我们添加松开鼠标的事件监听，松开左键为拖动结束，松开右键为复原 1234567891011121314canvas.addEventListener("mouseup", function(e) &#123; if (e.button === 0) &#123; sPoint.drag = false; ePoint.x = e.offsetX; ePoint.y = e.offsetY; &#125; else if (e.button === 2) &#123; restore(); &#125;&#125;);function restore() &#123; sPoint = &#123;&#125;; ePoint = &#123;&#125;; drawImage();&#125; &emsp;&emsp;由于右键会出现恶心的浏览器自带菜单栏，影响体验，我们屏蔽它。 12345document.addEventListener('contextmenu', function(e) &#123; e.preventDefault(); e.stopPropagation(); &#125;); ``` &emsp;&emsp;现在选取框有了，我们要开始截取了。新添加一个按钮，然后添加点击监听。 12345&lt;form name='test'&gt; &lt;input type="file" name='file'&gt; &lt;button id="clip"&gt;裁剪&lt;/button&gt; &lt;input type="submit" value="提交"&gt;&lt;/form&gt; 12345678910111213141516171819var clip = document.querySelector("#clip");clip.addEventListener("click", function(e) &#123; e.preventDefault(); //阻止默认事件，不然会触发form的submit if (sPoint.x !== undefined &amp;&amp; ePoint.x !== undefined) &#123; var imgData = ctx.getImageData( sPoint.x, sPoint.y, ePoint.x - sPoint.x, ePoint.y - sPoint.y ); //把裁剪区域的图片信息提取出来 ctx.clearRect(0, 0, canvas.width, canvas.height); //清空画布 canvas.width = Math.abs(ePoint.x - sPoint.x); //重置canvas的大小为新图的大小 canvas.height = Math.abs(ePoint.y - sPoint.y); ctx.putImageData(imgData, 0, 0); //把提取出来的图片信息放进canvas中 preview.src = canvas.toDataURL(); //裁剪后我们用新图替换底图，方便继续处理 &#125; else &#123; alert("没有选择区域"); &#125;&#125;); &emsp;&emsp;现在我们裁剪后选择提交，会发现服务器生成的是裁剪后的图片 &emsp;&emsp;裁剪的功能完成了，我们在来实现第二个功能：灰度。如果说裁剪的功能在于 clip 的用法，那么灰度的实现是基于 getImageData 返回的对象的认识。这个对象中有一个属性叫 data，这是一个数组，以 4 个为一组，分别存储了一个像素 red、green、blue、opacity 四个数据。也就是当你的 canvas 尺寸为 1*1 时，它的 ImageData.data 元素为 4 个。 &emsp;&emsp;废话不多说，直接给出实现的代码。 123456&lt;form name='test'&gt; &lt;input type="file" name='file'&gt; &lt;button id="clip"&gt;裁剪&lt;/button&gt; &lt;button id="grey"&gt;灰度&lt;/button&gt; &lt;input type="submit" value="提交"&gt;&lt;/form&gt; 12345678910111213141516171819202122var grey = document.querySelector("#grey");grey.addEventListener("click", function(e) &#123; e.preventDefault(); var startX = 0, startY = 0, width = canvas.width, height = canvas.height; ctx.clearRect(0, 0, canvas.width, canvas.height); //一如既往的先清空画布，不然会处理含有选取框的图片内容 drawImage(); //绘制底图 var imgData = ctx.getImageData(startX, startY, width, height); //把整个底图的图片内容取出来 for (var i = 0; i &lt; imgData.data.length; ) &#123; var red = imgData.data[i], green = imgData.data[i + 1], blue = imgData.data[i + 2], opacity = imgData.data[i + 3], //不处理，可以省去这一行，占位说明这一位是透明度 average = (red + green + blue) / 3; //所谓灰度其实是取三种颜色的平均值 imgData.data[i] = imgData.data[i + 1] = imgData.data[i + 2] = average; //三个颜色设为一样即是对应的灰色 i += 4; &#125; ctx.putImageData(imgData, startX, startY, 0, 0, width, height); //把处理过的imagedata放回canvas中 preview.src = canvas.toDataURL(); //保存图片信息方便再进行处理&#125;); &emsp;&emsp;选择灰度并提交，我们看服务器上生成的图片 &emsp;&emsp;最后我们结合裁剪和灰度，一起处理一张图片再提交。 &emsp;&emsp;好了，简单的两个图片处理的方式就介绍到这，至于复杂的，你可以拿到每一个像素的信息，还担心实现不了其他的功能么。]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
        <category>H5</category>
      </categories>
      <tags>
        <tag>文章</tag>
        <tag>H5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从web图片裁剪出发：了解H5中的Blob]]></title>
    <url>%2F2016%2F04%2F15%2F%E4%BB%8Eweb%E5%9B%BE%E7%89%87%E8%A3%81%E5%89%AA%E5%87%BA%E5%8F%91%EF%BC%9A%E4%BA%86%E8%A7%A3H5%E4%B8%AD%E7%9A%84Blob%2F</url>
    <content type="text"><![CDATA[刚开始做前端的时候，有个功能卡住我了，就是裁剪并上传头像。当时两个方案摆在我面前，一个是 flash，我不会。另一个是通过 iframe 上传图片，然后再上传坐标由后端裁剪，而我最终的选择是后者。有人会疑惑，为什么不用 H5 的 Canvas 和 FormData，第一要考虑 ie8 的兼容性，第二那时候眼界没到，这种新东西光是听听都怕。 后来随着 Mobile 项目越做越多，类似的功能开发得也越来越多，Canvas+FormData 成为了标配方案。但做的多了却一直没有静下心来研究，浏览器怎么使用 H5 的方式裁剪并把文件发送出去，回过头看都是知其然不知其所以然。这篇随笔先做个初步的拆解，就是当通过 input 选择一张图片后，这张图片在浏览器里是怎样的一个存在。 文件操作一直是早期浏览器的痛点，全封闭式，不给 JS 操作的空间，而随着 H5 一系列新接口的推出，这个壁垒被打破。对，是一系列接口，以下会涉及到如下概念：Blob、File、FileReader、ArrayBuffer、ArrayBufferView、DataURL 等，其他如 FormData、XMLHttpRequest、Canvas 等暂不深入。 我们先创建一个简单的页面，只有一个 input[type=file]。 12345678910&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;input type="file"&gt;&lt;/body&gt;&lt;/html&gt; 然后我们在 JS 中获取这个元素 1var input = document.querySelector("input[type=file]"); 可以看到这个元素有个属性 files，它的类型是 FileList。这个类不做过多介绍，就是一个类数组，由浏览器通过用户行为往里面添加或删除元素，JS 只有访问其元素的接口，无法对其进行操作。而 files 的元素就是 File 类型，File 是 blob 的子类，比 blob 主要多出一个 name 的属性。 现在我们选取一个文件，这里问题来了，这个元素是文件在浏览器的完整备份，还是一个指向文件系统的引用？答案是后者，我们选定文件，然后修改文件名，再上传文件，浏览器报错了。 1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form name='test'&gt; &lt;input type="file"&gt; &lt;input type="submit" value="提交"&gt; &lt;/form&gt; &lt;script&gt; var input = document.querySelector('input[type=file]'), form = document.test; form.addEventListener('submit', function(e) &#123; e.preventDefault(); var file = input.files[0], fd = new FormData(), xhr = new XMLHttpRequest(); fd.append('file', file); xhr.open('post', '/upload'); xhr.send(fd); &#125;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 使用 chrome 打开 chrome://blob-internals/，可以看到一条这样的记录 可见这仅仅是一条引用。第二个问题来了，如果我们要对图片进行处理，那么只拿到引用是不行的，肯定要在浏览器有一份数据的备份，那么怎么获取这个备份呢？答案就是 FileReader，FileReader 的对象主要有 readAsArrayBuffer、readAsBinaryString、readAsDataURL、readAsText 等方法，它们的入参都是 Blob 对象或是 File 对象，结果对应最终获取的数据类型。这几个方法是异步的，读取过程中会抛出对应的事件，其中读取完毕的事件为 load，所以数据的处理要放在 onload 下。我先给一个简单的 example： 123456789input.addEventListener("change", function() &#123; var file = this.files[0], fr = new FileReader(), blob; fr.onload = function() &#123; blob = new Blob([this.result]); &#125;; fr.readAsArrayBuffer(file);&#125;); 当用户选取图片时，调用 FileReader 的 readAsArrayBuffer 把图片数据读出来，然后生成新的 blob 对象保存在浏览器中。查看 chrome://blob-internals/，可以注意到这一项： 对应的就是刚才的 blob，可以对比 length 和图片本身的大小。上面那个 demo 很突兀，完全没有解释什么是 ArrayBuffer，为什么创建 blob 要传入一个 ArrayBuffer。那么第三个问题来了，什么是 ArrayBuffer、BinaryString、DataURL、Text，它们有什么联系和不同，Blob 类到底是个什么东西？首先，图片是个二进制文件，它的内容也是由 0 和 1 组成的。用户肯定是看不懂 0 和 1 的组合的，能看懂的只有最终展示的图片，而程序员也看不懂 0 和 1，但程序员能看懂另外几种 0 和 1 变换后的组合。它们就是以上的 4 种：ArrayBuffer、BinaryString、DataURL 和 Text。 其中 ArrayBuffer 是最接近二进制数据的表现的，可以理解为它就是二进制数据的存储器，这也是为什么二进制文件的 Blob 需要传入 ArrayBuffer。正因为它的内部是二进制数据，所以我们是不可以直接操作的。这时候就需要一个代理者帮助我们读或写，这个代理者就是 ArrayBufferView。 ArrayBufferView 不是一个类，而是一个类的集合，包括：Int8Array、Uint8Array、Uint8ClampedArray、Int16Array、Uint16Array、Int32Array、Uint32Array、Float32Array、Float64Array 和 DataView，分别表示以 8 位、16 位、32 位、64 位数字为元素对 ArrayBuffer 内的二进制数据进行展现，它们都有统一的属性 buffer 指向对应的 ArrayBuffer。栗子暂时不举，之后会用到。 ArrayBuffer 简单介绍了，那什么是 BinaryString 呢？是二进制数据直接以 byte 的形式展现的字符串，比如 1100001，用 Uint8 表示就是 97，用 BinaryString 表示就是’a’。对，前者是 charCode，后者是 char，所以 BinaryString 和 Uint8Array 之间是可以自由转换的。 接下来是 DataURL 了，这是一个经过 base64 编码的字符串，它的组成如下：data:[mimeType];base64,[base64(binaryString)] 除了固定的字符串部分，它主要包含两个重要信息即中括号括起的部分，mimeType 和 base64 编码后的 binaryString，从它里面我们可以这样取到这两个信息。 12var binaryString = atob(dataUrl.split(",")[1]), mimeType = dataUrl.split(",")[0].match(/:(.\*?);/)[1]; 最后，Text 是什么呢？在 ftp 上，文本传输和二进制传输的区别是什么，那 Text 类型和 BinaryString 类型的区别就是什么了，也就是 Text 类型是经过一定转换的 BinaryString，对于图片来说，这个类型是用不到的。 好了，现在我们了解了一张图片在浏览器里以数据的形式可以表现为 ArrayBuffer、BinaryString、DataURL，那么第四个问题来了，它们各有实际用途呢？我们从应用场景出发，回到文章开头的问题，图片的裁剪和上传。图片的裁剪我们要倚仗牛逼的 canvas，而 canvas 的 context 有这么一个方法 toDataURL，就是把 canvas 的内容转换为图片数据，而数据的表现形式就是 DataURL！图片的上传我们用的是 FormData，它可以添加 Blob 类型的对象进去，那 Blob 类型除了从 input[type=file]中直接获取，还能靠什么生成呢？自然是 ArrayBuffer！好了，裁剪图片的功能要用到 DataURL，上传图片的功能要用到 ArrayBuffer，那怎么从 DataURL 转换为 ArrayBuffer 呢？我们知道 DataURL 很重要的组成部分就是经过 base64 编码的 BinaryString，那么很显然我们可以从 DataURL 中提取 BinaryString，而 BinaryString 就是 ArrayBuffer 对应的 Uint8Array 的字符形式的表现，所以可以由 BinaryString 生成 ArrayBuffer，那么 DataURL 到 ArrayBuffer 之间的桥就是 BinaryString！ 到现在为止，我们说了很多概念，然而这并没有什么卵用，验证概念的方法不是提出新的概念，而是建立一个 example。以下的 example 就是把图片数据从 input 中取出，然后以 DataURL 的格式进行预览，提交时把预览生成图片上传的整个流程。 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form name='test'&gt; &lt;input type="file" name='file'&gt; &lt;input type="submit" value="提交"&gt; &lt;/form&gt; &lt;img src="" alt=""&gt; &lt;script&gt; var img = document.querySelector('img'), preview; document.test.file.addEventListener('change', function() &#123; var fr = new FileReader(); fr.onload = function() &#123; preview = this.result; img.src = preview; &#125;; fr.readAsDataURL(this.files[0]); &#125;) document.test.addEventListener('submit', function(e) &#123; e.preventDefault(); var binaryString = atob(preview.split(',')[1]), mimeType = preview.split(',')[0].match(/:(.*?);/)[1], length = binaryString.length, u8arr = new Uint8Array(length), blob, fd = new FormData(), xhr = new XMLHttpRequest(); while(length--) &#123; u8arr[length] = binaryString.charCodeAt(length); &#125; blob = new Blob([u8arr.buffer], &#123;type: mimeType&#125;); fd.append('file', blob); xhr.open('post', '/upload'); xhr.send(fd); &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 现在图片已经被我们发射出去了，那么图片在协议包里是以怎样的数据形式存在的呢？当然是以二进制的形式，我们抓一下包，发现在 fiddler 里面这个二进制串会转换为字符串，即上面的 binaryString。 既然通过发送的 blob 到最后在数据包里都是以 binaryString 的形式展示，那么是否可以直接使用 xhr.send(binaryString)发送图片呢？貌似是可以的，但我们试一下就会发现问题，服务器获取到的信息不能生成一张图片，说明数据被破坏了。那么数据是谁破坏的呢？这个罪魁祸首就是 send，当 send 的参数是字符串的时候，会对字符串进行 utf8 编码。我们看下相同的图片通过 blob 发送出去和通过 binaryString 直接发送出去的数据会有什么不同。这里我们用 wireshark 抓包，因为 wireshark 会自动对数据块进行分割，可以比较直观的看到图片所对应的数据。PS: 这张图片一张 1px 白色的 png。 前面是正常的图片数据，后面是经过了 utf8 编码的图片数据。我们可以看到数据确实被破坏了，当然在知道元数据是 binaryString 的情况下，这种破坏是可以恢复的，不过不是这里讨论的范畴了，感兴趣的可以跳转阮老师的博客 《字符编码笔记:ASCII，Unicode 和 UTF-8》。 好了，整个图片在浏览器端的拆解到此结束。理解了这些，就走完了写出牛逼的客户端图片裁剪工具的第一步。]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
        <category>H5</category>
      </categories>
      <tags>
        <tag>文章</tag>
        <tag>H5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[玩一把JS的链式调用]]></title>
    <url>%2F2016%2F03%2F30%2F%E7%8E%A9%E4%B8%80%E6%8A%8AJS%E7%9A%84%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8%2F</url>
    <content type="text"><![CDATA[链式调用我们平常用到很多，比如 jQuery 中的 $(ele).show().find(child).hide()，再比如 angularjs 中的 $http.get(url).success(fn_s).error(fn_e)。但这都是已经包装好的链式调用，我们只能体会链式调用带来的方便，却不知道形成这样一条函数链的原理是什么。 随着链式调用的普及，实现的方案也越来越多。最常见的，是 jQuery 直接返回 this 的方式，underscore 的可选式的方式，和 lodash 惰性求值的方式。我们分别来了解，并逐个完成它们的 demo。 我们从最简单的开始，直接返回 this 是最常见的方式，也是所有方式的基础。我们实现一个简单的链式运算类，首先它得有个字段保留结果。 123function A(num) &#123; this.value = num || 0; //不做传参校验了&#125; 然后添加进行运算并返回 this 的方法。 12345678A.prototype.add = function(a) &#123; this.value += a; return this;&#125;;A.prototype.reduce = function(a) &#123; this.value -= a; return this;&#125;; 最后为了显示正常修改两个继承的方法。 123456A.prototype.valueOf = function() &#123; return this.value;&#125;;A.prototype.toString = function() &#123; return this.value + "";&#125;; 进行验证。 12var a = new A(2);alert(a.add(1).reduce(2)); 这个 demo 应该简单到不用对任何代码进行说明，我们快速来到第二个，就是 underscore 中用到 chain。underscore 规定了两种调用方式，_.forEach(arr, fn);_.map(arr, fn); 和 _.chain(arr).forEach(fn).map(fn)。 我们先实现前面一种调用方式，因为这里不是讲解 underscore，所以我们只是简单实现 forEach 和 map 的功能，不对对象而仅对数组进行处理。 1234567891011var _ = &#123;&#125;;_.forEach = function(array, fn) &#123; array.forEach(function(v, i, array) &#123; fn.apply(v, [v, i, array]); &#125;);&#125;;_.map = function(array, fn) &#123; return array.map(function(v, i, array) &#123; return fn.apply(v, [v, i, array]); &#125;);&#125;; 上面的代码很简单，直接调用 ES5 中数组原型的方法。接下来问题就来了，要实现链式调用，我们首先要做什么？我们看到第二种调用方式中，所有的操作无论是 forEach 还是 map 都是在 _.chain(arr) 上调用的，所以 _.chain(arr) 应该是返回了一个对象，这个对象上有和 _ 上相同的方法，只是实现上传参由 2 个变成了 1 个，因为原来的第一个参数永远是 _.chain 中传入的参数的拷贝。 好了，确定 _.chain(arr) 要返回一个对象了，那这个对象的构造函数怎么写呢？我们借用一个现成的变量来保存这个构造函数，就是 _。函数也是对象，所以当 _ 由对象变成函数，不会影响原来的逻辑，而这个函数要传入一个 array，并返回一个新的对象。所以上面的代码应该改成这样。 12345678910111213141516var _ = function(array) &#123; this._value = Array.prototype.slice.apply(array);&#125;;_.forEach = function(array, fn) &#123; array.forEach(function(v, i, array) &#123; fn.apply(v, [v, i, array]); &#125;);&#125;;_.map = function(array, fn) &#123; return array.map(function(v, i, array) &#123; return fn.apply(v, [v, i, array]); &#125;);&#125;;_.chain = function(array) &#123; return new _(array);&#125;; 新的构造函数有了，但它生成的对象除了 _value 就是一片空白，我们要怎么把原本 _ 上的方法稍加修改的移植到 _ 生成的对象上呢？代码如下： 12345678910111213141516171819202122for (var i in _) &#123; //首先我们要遍历_ if (i !== "chain") &#123; //然后要去除chain _.prototype[i] = (function(i) &#123; //把其他的方法都经过处理赋给_.prototype return function() &#123; //i是全局变量，我们要通过闭包转化为局部变量 var args = Array.prototype.slice.apply(arguments); //取出新方法的参数，其实就fn一个 args.unshift(this._value); //把_value放入参数数组的第一位 if (i === "map") &#123; //当方法是map的时候，需要修改_value的值 this._value = _[i].apply(this, args); &#125; else &#123; //当方法是forEach的时候，不需要修改_value的值 _[i].apply(this, args); &#125; return this; &#125;; &#125;)(i); &#125;&#125; 最后我们模仿 underscore 使用 value 返回当前的 _value。 123_.prototype.value = function() &#123; return this._value;&#125;; 进行验证。 12345678910111213141516171819var a = [1, 2, 3];_.forEach(a, function(v) &#123; console.log(v);&#125;);alert( _.map(a, function(v) &#123; return ++v; &#125;));alert( _.chain(a) .map(function(v) &#123; return ++v; &#125;) .forEach(function(v) &#123; console.log(v); &#125;) .value()); 以上是 underscore 中用到的链式调用的简化版，应该不难理解。那最复杂的来了，lodash 惰性调用又是怎样的呢？首先我来解释下什么是惰性调用，比如上面的 _.chain(arr).forEach(fn).map(fn).value()，当执行到 chain(arr) 的时候，返回了一个对象，执行到 forEach 的时候开始轮询，轮询完再返回这个对象，执行到 map 的时候再次开始轮询，轮询完又返回这个对象，最后执行到 value，返回对象中 _value 的值。其中每一步都是独立的，依次进行的。而惰性调用就是，执行到 forEach 的时候不执行轮询的操作，而是把这个操作塞进队列，执行到 map 的时候，再把 map 的操作塞进队列。那什么时候执行呢？当某个特定的操作塞进队列的时候开始执行之前队列中所有的操作，比如当 value 被调用时，开始执行 forEach、map 和 value。 惰性调用有什么好处呢，为什么把一堆操作塞在一起反倒是更优秀的方案的？我们看传统的链式操作都是这样的格式，obj.job1().job2().job3()，没错整个函数链都是 job 链，如果这时候有一个简单的需求，比如连续执行 100 遍 job1-3，那么我们就要写 100 遍，或者用 for 把整个链条断开 100 次。所以传统链式操作的缺点很明显，函数链中都是 job，不存在 controller。而一旦加上 controller，比如上面的需求我们用简单的惰性调用来实现，那就是 obj.loop(100).job1().job2().job3().end().done()。其中 loop 是声明开启 100 次循环，end 是结束当前这次循环，done 是开始执行任务的标志，代码多么简单！ 现在我们实现一下惰性链式调用，由于 lodash 就是 underscore 的威力加强版，大体架构都差不多，而上面已经有 underscore 的基本链式实现，所以我们脱离 lodash 和 underscore 的其他代码，仅仅实现一个类似的惰性调用的 demo。 首先我们要有一个构造函数，生成可供链式调用的对象。之前提到的，任何 controller 或者 job 的调用都是把它塞入任务队列，那么这个构造函数自然要有一个队列属性。有了队列，肯定要有索引指明当前执行的任务，所以要有队列索引。那么这个构造函数暂时就这样了。 1234function Task() &#123; this.queen = []; this.queenIndex = 0;&#125; 如果我们要实现 loop，那么还要有个 loop 的总次数和当前 loop 的次数，而如果一次 loop 结束，我们要回到任务队列哪里呢？所以还要有个属性记录 loop 开始的地方。构造函数最终的形态如此： 1234567function Task() &#123; this.queen = []; this.queenIndex = 0; this.loopCount = 0; this.loopIndex = 0; this.loopStart = 0;&#125; 现在我们开始实现 controller 和 job，比如上面这个例子中说到的：job()、loop()、end()、done()。它们应该都包含两种形态，一种是本来的业务逻辑，比如 job 的业务就是 do something，而 loop 的控制逻辑就是记录 loopCount 和 loopStart，end 的控制逻辑就是 loopIndex+1 和检查 loopIndex 看是否需要回到 loopStart 的位置再次遍历。而另一种形态是不管业务逻辑是什么，把业务逻辑对应的代码统一塞进任务队列，这种形态可以称之为第一种形态的包装器。 如果我们最终的调用格式是 new Task().loop(100).job().end().done()，那么方法链上的方法肯定是包装器，这些方法自然应该放在 Task.prototype 上，那第一种形态的方法何去何从呢？那就放在 Task.prototype.__proto__ 上吧。我们这样写 123456789101112131415161718192021var _task_proto = &#123; loop: function(num) &#123; this.loopStart = this.queenIndex; this.loopCount = num; &#125;, job: function(str) &#123; console.log(str); &#125;, end: function() &#123; this.loopIndex++; if (this.loopIndex &lt; this.loopCount) &#123; this.queenIndex = this.loopStart; &#125; else &#123; this.loopIndex = 0; &#125; &#125;, done: function() &#123; console.log("done"); &#125;&#125;;Task.prototype.__proto__ = _task_proto; 然后在遍历 _task_proto 在 Task.prototype 上生成包装器，并让每个包装器返回 this 以供链式调用（看见没，其实每一种链式调用的方式都要这么做） 12345678910111213for (var i in _task_proto) &#123; (function(i) &#123; var raw = Task.prototype[i]; Task.prototype[i] = function() &#123; this.queen.push(&#123; name: i, fn: raw, args: arguments &#125;); //保存具体的实现方法、名字和参数到任务队列 return this; &#125;; &#125;)(i);&#125; 现在问题来了，我们什么时候开始执行具体的任务，又怎样让任务有条不紊的执行和跳转呢？这时候我们要在 Task.prototype 上定义一个新的方法，这个方法专门用来控制任务的执行的，因为任务队列是依次执行并由索引定位的，跟迭代器有那么一点相像，我们定义这个新的方法叫 next 1234567891011Task.prototype.next = function() &#123; var task = this.queen[this.queenIndex]; //取出新的任务 task.fn.apply(this, task.args); //执行任务中指向的具体的实现方法，并传入之前保存的参数 if (task.name !== "done") &#123; this.queenIndex++; this.next(); //如果没执行完，任务索引+1并再次调用next &#125; else &#123; this.queen = []; this.queenIndex = 0; //如果执行完了，清空任务队列，重置任务索引 &#125;&#125;; 添加了 next，我们需要在 done 的包装器上加点东西以便让任务队列开始执行，修改之前生成包装器的代码 12345678910111213141516for (var i in _task_proto) &#123; (function(i) &#123; var raw = Task.prototype[i]; Task.prototype[i] = function() &#123; this.queen.push(&#123; name: i, fn: raw, args: arguments &#125;); //保存具体的实现方法、名字和参数到任务队列 if (i === "done") &#123; this.next(); &#125; return this; &#125;; &#125;)(i);&#125; 最后我们进行验证。 12345678910111213141516171819202122232425var t = new Task();console.log("1");t.job("fuck") .loop(3) .job("world") .end() .loop(3) .job("world") .end() .job("!") .done();console.log("2");t.job("fuck") .loop(3) .job("world") .job("!") .end() .done();console.log("3");t.job("fuck") .loop(3) .job("world") .job("!") .end() .job("!"); 好了，链式调用玩到这里了。这几个 demo 尤其是惰性调用稍加改造后，功能可以大大加强，但是这里就不再讨论了。]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
        <category>JS</category>
      </categories>
      <tags>
        <tag>文章</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript中你所不知道的Object（二）-- Function 篇]]></title>
    <url>%2F2015%2F07%2F25%2FJavaScript%E4%B8%AD%E4%BD%A0%E6%89%80%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84Object%EF%BC%88%E4%BA%8C%EF%BC%89-Function%20%E7%AF%87%2F</url>
    <content type="text"><![CDATA[上一篇（JavaScript 中你所不知道的 Object（一））说到，Object 对象有大量的内部属性，而其中多数和外部属性的操作有关。最后留了个悬念，就是 Boolean、Date、Number、String、Function 等有更多的内部属性，而它们分别是什么呢？ 这些内部属性不能像 Object 的内部属性一样一言以蔽之，因为它们各有各的用处和特点。其中核心的部分自然是最特殊的对象，Function 对象。我们先从简单的开始： [[PrimitiveValue]]: 值的类型是基础数据类型。所以所有的包装类比如 Boolean、Number、String 都有此内部属性，其中 Date 也有，用来存储时间戳。 [[Construct]]: 值的类型是方法。传入参数列表，返回 Object。Function 对象特有，当使用 new func()调用的就是这个内部属性。所以拥有这个属性的方法也可以叫做构造器。注意区分构造器的 prototype 对象下的 constructor 属性。 [[Call]]: 值的类型是方法。传入参数列表，返回任意数据类型。Function 对象特有，当使用 func()调用的就是这个内部属性。 [[HasInstance]]: 值的类型是方法。传入任意值，返回 Boolean。检测这个参数的原型链上是否有此函数的 prototype，即检测参数及其原型中是否有对象是此函数作为构造器时创建的。 [[Scope]]: Function 对象特有，每当函数执行时使用此内部属性新建作用域链加入到新的执行环境中。 [[FormalParameters]]: 形参列表。Function 对象特有。 [[Code]]: JS 代码。Function 对象特有。 [[TargetFunction]]: 如下 [[BoundThis]]: 如下 [[BoundArguments]]: 如下 [[ParameterMap]]: 形参列表。arguments 对象特有。 以上三个为 Function.prototype.bind 创建的函数特有的内部属性。 12345678var arr1 = [1, 4, 5], arr2 = [2, 3];var func = Array.prototype.splice.bind(arr1, 1, 0);func.apply(arr1, arr2);console.log(arr1); //[1, 2, 3, 4, 5] 例子中，func 是通过 bind 创建的函数，其内部属性[[TargetFunction]]对应 Array.prototype.splice，[[BoundThis]]对应 arr1，[[BoundArguments]]对应 1,0 组成的列表。 上面列出的属性乍看一下好像都能理解，但细思恐极，比如标红的作用域和执行环境，都是很抽象的概念，我们现在就来完整的剖析下这些概念。 首先引入的概念就是可执行代码。ES 规定三种可执行代码：全局代码、Eval 代码、函数代码。当执行到这三种代码的时候，解释器会创建并进入新的执行环境，当代码运行完毕的时候，解释器会退出并销毁当前执行环境，并回到前一个执行环境。 到现在为止执行环境还是一个抽象的概念，那执行环境的具体实现是怎样的呢？首先，它有三个要素：词法环境、变量环境、this 绑定。this 绑定我们都比较熟悉，那词法环境和变量环境分别是干什么用的呢？简单而不太严谨的说，词法环境就是作用域链，用来取变量的值；而变量环境暂时理解为当前作用域吧，用来赋变量的值。我们举个栗子吧： 12345678910111213141516171819202122var a = 0;function test0() &#123; console.log(a); //0 console.log(window.a); //0&#125;function test1() &#123; a = 1; console.log(a); //1 console.log(window.a); //1&#125;function test2() &#123; var a = 2; console.log(a); //2 console.log(window.a); //1&#125;test0();test1();test2(); 这里涉及 4 个执行环境：全局执行环境、test0-2 的执行环境。 进入 test0 的执行环境以后，要打印出 a，当前的作用域中没有定义这个变量，于是沿着作用域链找，找到了全局执行环境中定义的 a，于是打印出来 0，相信这里没什么问题。 进入 test1 的执行环境后，这时已经退出了 test0 的执行环境。这时候给 a 赋了一个值，可能就有人立即想到，赋值？ok，变量环境，作用于当前作用域，所以 a 应该是 1，window.a 应该还是 0，但结果却不是这样的。我们把 a = 1 拆开来看，首先是取 a 这个变量，当前作用域是没有这个变量的，所以 a 这个变量指向了全局执行环境中的 a，然后才是赋值，1 自然赋给了全局执行环境中的 a。那么怎么让当前作用域中有这个变量呢？声明！即 test2 中的 var a = 2，我们同样拆开来看，先是声明了 a，所以在当前作用域中绑定了 a 这个变量，即在变量环境中添加了 a，然后取 a 这个变量，从作用域链中的当前作用域就找到了 a，最后把 2 赋给 a。 所以我们来规范一下上面的定义：词法环境用于查找变量，可以理解为作用域链。变量环境呢，不能再理解为作用域了，它是一个用来存储当前执行环境和变量之间的绑定信息的对象。注意这里隐藏了一个关键点：取变量是以作用域为单位查找的，而声明变量是以执行环境为单位存储的。不理解没关系，继续往下走。 例子中细心的话可能察觉到一丝不对劲：为什么我在全局执行环境中声明的变量可以通过全局对象访问呢，那么我在 test2 中声明的 a 可以通过 test2.a 访问吗？ 当然是不行的。因为作用域分为两类：一种是声明式的，一种是对象式的。function 产生的作用域是声明式的，而全局执行环境对应的作用域是对象式的。对象式作用域中声明的所有变量都可以通过此对象的属性进行访问，而声明式则可以定义不可以被修改的变量，你在严格模式下修改 function 中的 arguments 试试。 相信看到这里基本已经陷入混乱了。我来整理几个问题：作用域和执行环境到底什么关系？声明式和对象式作用域只对应 function 和全局吗？ 首先，一个执行环境中是可以产生多个作用域的，但都有一个基础作用域。然后其他作用域怎么生成呢？声明式的作用域还有一种方式生成，就是 catch 语句，我们在 catch(e){}的语句中可以通过 e 访问到错误对象，就是生成了一个声明式的作用域，并在这个作用域里添加了变量 e。而对象式的作用域也同样还有一种方式生成，就是 with 语句。 12345678910111213141516var a = &#123; name: "tarol" &#125;, name = "okal";with (a) &#123; console.log(name); //tarol console.log(window.name); //okal name = "ctarol"; console.log(name); //ctarol console.log(window.name); //okal var age = 18;&#125;console.log(a.age); //undefinedconsole.log(window.age); //18 例子中，进入 with 语句后，生成了一个新的对象式作用域，并添加到了作用域链的头部，所以在语句中对变量 name 的访问是取 a.name 的值，对变量 name 的赋值也是对 a.name 的赋值。疑难点在 var age = 18 后，age 这个属性没有赋给 a，而是赋给了 window。就像小伙 a 看上了姑娘 age，说好了也订了婚，最后姑娘嫁给了 a 的老大 window（怎么有种曹操和关羽的既视感）。其实原因就在上面，with 语句修改了执行环境的词法环境，所以把访问变量的规则改了，但是没有修改变量环境，所以声明的变量统统都给了全局执行环境中的基础作用域（a：我怎么把这茬给忘了？）。 另外把 var age = 18 中的 var 去掉，结果还是一样的。因为娶变量的时候，媒婆找啊找，找到最后一个作用域了都没找到，于是就停到那里了，突然看到有个值送上门来，也懒得换地方了，当场就在这个作用域把这个值打扮成了个变量。所以前一个例子中去掉 var a = 0 也不影响 test1()的结果。 注意！注意！注意！对整个作用域链中未定义的变量赋值，这个变量会绑定到作用域链的尾部，而给这个原型链中未定义的属性赋值，这个属性会绑到原型链的头部即当前的对象中。一次给两个栗子： 12345678var a = &#123;&#125;;function test() &#123; with (a) &#123; age = 19; &#125;&#125;test();console.log(window.age); //19 1234567var a = &#123;&#125;, b;b = Object.create(a);b.age = 18;console.log(a.age); //undefined 好了，说了那么多，回到之前的内部属性[[Scope]]。它是在创建函数生成，值是创建时的作用域链；并在执行函数时取用，生成新执行环境中的作用域链。 注意这个[[Scope]]是创建函数是生成！ 注意这个[[Scope]]是创建函数是生成！ 注意这个[[Scope]]是创建函数是生成！所以无论在哪里执行这个函数作用域链都是一样的。 给个栗子： 12345678910111213141516171819202122232425262728var a = &#123; age: 18 &#125;, age = 19;with (a) &#123; var test0 = function() &#123; console.log(age); &#125;; function test1() &#123; console.log(age); &#125; test0(); //18 test1(); //19&#125;!(function() &#123; var age = 20; function test2() &#123; console.log(age); &#125; test0(); //18 test1(); //19 test2(); //20&#125;)();test0(); //18test1(); //19 需要注意的是，在 with 语句中新建函数，如果此函数的作用域链中想插入 a，要用 test0 的声明方式，而不是 test1。至于为什么？那是变量声明和函数声明的时序问题，在进入执行环境后，会先遍历所有的变量声明和函数声明，会生成函数对象，但不会对变量赋值。这也是为什么 JS 中函数可以先调用后声明，因为你随便写在哪里，一进入执行环境就函数就生成了。而 test1 函数生成的时候还没有 run 到 with 语句，[[Scope]]自然是全局执行环境的基础作用域链。test0 开始只声明个 undefined 的变量，到 with 语句才进行赋值，所以这个函数的[[Scope]]中加入了 a。 那么，[[Scope]]又是怎么生成作用域的呢，还有之前说到，全局代码和 function 代码都存在基础作用域，甚至是 with 语句，它们的作用域都是怎么生成的呢？ 首先，作用域都是在开始执行的时候生成的。 全局代码和 with 语句生成作用域的过程是类似的，会绑定原型链上所有属性名和属性值作为变量名和变量值到作用域上。 而 function 代码是先通过[[Scope]]生成新的作用域链，并绑定形参名和实参值作为变量名和变量值到作用域链的顶部即当前的作用域上。另外还有个特殊的变量，即 arguments。arguments 是一个特殊的对象，但不是数组对象，它在原型链上的位置处于倒数第三位，也就是原生 Object 对象的位置。那么，要把 arguments 装作用域，拢共分几步？ 四步： 通过 Object 构建对象，并用实参数组的长度初始化此对象的 length 属性 遍历实参数组，以 index 为属性名，对应实参为属性值给此对象添加属性 将形参数组赋给此对象的[[ParameterMap]]（arguments 特有的内部属性），如果不在严格模式下，给此对象添加 callee 和 caller 属性 绑定 arguments 到作用域，并指向此对象 写的比较乱，而且为了便于理解，并没有规范化一些概念，比如 Environment Records 变成了作用域，Lexical Environments 变成了作用域链，以后再行整理。]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
        <category>ES</category>
      </categories>
      <tags>
        <tag>文章</tag>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript中你所不知道的Object（一）]]></title>
    <url>%2F2015%2F07%2F23%2FJavaScript%E4%B8%AD%E4%BD%A0%E6%89%80%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84Object%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Object 实在是 JavaScript 中很基础的东西了，在工作中，它只有那么贫瘠的几个用法，让人感觉不过尔尔，但是我们真的了解它吗？ 当我们习惯用 1234567var a = &#123; name: "tarol", age: 18&#125;;console.log(a.age); //18a.age = 19;console.log(a.age); //19 初始化和访问对象的时候，谁会在意这种方式也是合法的： 12345678910111213var a = &#123; name: "tarol", _age: 18, set age(value) &#123; this._age = value; &#125;, get age() &#123; return this._age; &#125;&#125;;console.log(a.age); //18a.age = 19;console.log(a.age); //19 当我们习惯用 123456789101112131415function A() &#123; this.name = "tarol";&#125;var a = new A();function B() &#123; this.age = 18;&#125;B.prototype = a;var b = new B();console.log(b.name); //tarol 实现继承的时候，谁会在意其实也可以这样： 1234567var a = &#123; name: "tarol"&#125;;var b = Object.create(a);b.age = 18;console.log(b.name); //tarol 当我们知道原型链以后，想恶作剧修改内置函数的原型，却发现没有办法 12345var a = &#123;&#125;;Object.prototype = a;console.log(Object.prototype === a); //false 如果你感兴趣，那么我从头说起： 首先，JavaScript 中的对象是什么？ES5 中只给出一句话，对象是属性的集合。它只是一个盒子，它能做什么，取决于盒子里有什么。 那么，属性是什么，一般看来，属性是一个 key, value 对，这个说法是对的吗？我们来剖析下属性。 从一个程序员的角度来说，属性分为可通过 JS 调用的的和不可通过 JS 调用的。不可调用的叫做内部属性，那么可调用的我们对应着叫外部属性吧。内部属性是 JS 解释器实现各种接口的时候使用的算法中需要调用的属性，举个栗子，有个内部属性叫[[Put]]，这是一个内部方法，传入属性名和值，它的作用就是为属性赋值。所以当我们使用 a.age = 18 的时候，实际就调用到了这个内部属性。而外部属性又分为两种，一种是数据属性，一种是访问器属性。上面的例一中，第二种方式给对象 a 添加了三个属性，其中 name、_age 是数据属性，age 是访问器属性。当属性是数据属性的时候，属性是 key、value 对的说法好像是对的，但当属性是访问器属性的时候，这个说法好像有问题了，因为一个 key 对应的是一个 setter 和一个 getter。所以，这个说法是错的？ 其实，属性不是我们看到的那样，单单就一个 key 对应一个数据或者一个 setter 加一个 getter。属性还存在其他一些状态，我们称之为特性，无论是数据属性还是访问器属性，都存在四个特性。数据属性的特性为：[[Value]]、[[Writable]]、[[Enumerable]]、[[Configuration]]，访问器属性的特性为：[[Get]]、[[Set]]、[[Enumerable]]、[[Configuration]]。其中[[Value]]、[[Get]]、[[Set]]相信已经很好理解了，[[Writable]]描述数据属性是否可被重新赋值，[[Enumerable]]描述属性是否可被 for-in 遍历，[[Configuration]]描述属性特性是否可被修改（一旦设置为 false 则不可以再修改此特性）。 JS 开放了三个接口用于设置和获取属性的特性，分别是 Object.defineProperty、Object.defineProperties 和 Object.getOwnPropertyDescriptor。 12345678910111213141516171819202122232425262728var a = &#123; name: "tarol", age: 18, job: "coder"&#125;;Object.defineProperty(a, "name", &#123; value: "ctarol", writable: true, enumerable: true, configuration: true&#125;);Object.defineProperties(a, &#123; age: &#123; value: 19, writable: true, enumerable: true, configuration: true &#125;, job: &#123; value: "mental", writable: true, enumerable: true, configuration: true &#125;&#125;);console.log(a.name); //tarolconsole.log(a.age); //19console.log(Object.getOwnPropertyDescriptor(a, "job")); //Object &#123;value: "mental", writable: true, enumerable: true, configurable: true&#125; 总的看来，属性还是可以作为一个 key, value 对的，但这个 value 不是我们赋的值，而是整个属性特性的集合，我们称之为属性描述。 外部属性的问题解决了，内部属性我们还只是蜻蜓点水般浅尝辄止，所以接下来我们开始从内部属性入手，对 JS 中的对象做一个更深刻的认识。以下是内部属性的表格： 属性名 用途 属性类型 方法返回值（仅适用方法） 他处引用（仅适用数据） 他处赋值（仅适用数据） 他处调用（仅适用方法） 调用其他（仅适用方法） [[Prototype]] 对象原型 Object proto etc. [[Class]] 对象类型 String Object.prototype.toString() [[Extensible]] 可否添加属性 Boolean Object.seal(obj) –&gt; false Object.freeze(obj) –&gt; false Object.preventExtensions(obj) –&gt; false [[GetOwnProperty]] 返回自身指定的属性描述 func(‘prop’) 属性描述 Object.getOwnPropertyDescriptor(obj, ‘prop’) [[GetProperty]] [[GetProperty]] 返回原型链上指定的属性描述 func(‘prop’) 属性描述 [[GetOwnProperty]] [[HasProperty]] 返回原型链上是否有指定属性 func(‘prop’) Boolean [[GetProperty]] [[DefineOwnProperty]] 创建或修改自身的属性描述 func(‘prop’, desc, Boolean) Boolean Object.defineProperty(obj, ‘prop’, desc) Object.defineProperties(obj, descs) [[DefaultValue]] 将对象转换为对应的基础类型 func(String/Number) String / Number toString() valueOf() [[Delete]] 删除对象的属性 func(‘prop’, Boolean) Boolean [[GetOwnProperty]] [[CanPut]] 可否设置属性的值 func(‘prop’) Boolean [[GetOwnProperty]] [[GetProperty]] [[Extensible]] [[Get]] 获取属性的值 func(‘prop’) mixin [[GetProperty]] [[Put]] 设置属性的值 func(‘prop’, mixin, Boolean) Boolean [[CanPut]] [[GetOwnProperty]] [[GetProperty]] [[DefineOwnProperty]] 上面的表格稍显晦涩，看不懂不要紧，我们来分下类。内部属性中除了 [[Class]]、[[DefaultValue]] 用于展示信息以外，其他都是用来操作外部属性的，可见对象的核心就是属性。其中我列出 [[CanPut]] 和 [[Put]] 的算法实现，因为这两个方法的实现涵盖了基本所有的属性操作和思想。 [[CanPut]]: [[Put]]: 前面提到过，我们使用 a.age = 18 进行赋值的时候，调用的就是 [[Put]] 这个内部方法。由上图算法可知，当对属性赋值时，只要这个属性不是原型链上的访问器属性，那么就会修改或产生自身的数据属性，即不存在一种情况，就是修改原型链上的数据属性。我们测试下： 123456789101112131415161718192021var a = &#123; name: 'tarol', _age: 18, set age(value) &#123; this._age = value; &#125;, get age() &#123; return this._age; &#125;&#125;;var b = Object.create(a);console.log(b.hasOwnProperty('name')); //falseconsole.log(b.hasOwnProperty('_age')); //falseconsole.log(b.hasOwnProperty('age')); //falseb.name = 'okal';b.age = 19;console.log(b.hasOwnProperty('name')); //trueconsole.log(b.hasOwnProperty('_age')); //trueconsole.log(b.hasOwnProperty('age')); //falseconsole.log(a.name); //tarolconsole.log(a.age); //18 由结果可知，我们在对 name 这个原型链上的数据属性进行赋值时，实际上是重新创建了一个自身属性，对原型上的数据属性是没有影响的。而调用访问器属性 age 的 [[Set]] 方法的时候，传入的 this 也是当前的对象而不是访问器属性的拥有者，所以在当前对象上创建了一个自身属性 _age。 好了，上面说的是通用的内部属性，即 Object 类型的内部属性，而像 Boolean、Date、Number、String、Function 等拥有更多的内部属性，就留到下一篇再说。]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
        <category>ES</category>
      </categories>
      <tags>
        <tag>文章</tag>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从 Object 和 Function 说说JS的原型链]]></title>
    <url>%2F2015%2F07%2F21%2F%E4%BB%8EObject%E5%92%8CFunction%E8%AF%B4%E8%AF%B4JS%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%2F</url>
    <content type="text"><![CDATA[ECMAScript 规定了两个特殊的内置对象：Object 和 Function。他们的特殊性在于，他们本身既是对象又是函数，而他们同时也是对象和函数的构造器。这种自己生自己的逻辑显然违反人性，如果还停留在类的继承的思想上，那么更加无法理解。 然而 ECMAScript 是基于原型链的，所以忘掉类的继承，从原型链入手：原型链是对象的集合，每个对象都有内部属性 [[Prototype]]（注 1）指向另一个对象；当访问对象某一属性的时候，如果此属性不为此对象的自身属性（注 2），则继续去 [[Prototype]] 指向的对象上查找此属性。[[Prototype]] 形成的对象的链式集合即原型链。这里可以得出：原型链上的所有元素都是对象。 ECMASciprt 规定：原型链必须是有限长度（注 3），而且终点必须是 null。现在终点是唯一的，那么原型链上倒数第二个元素是不是唯一的呢？ECMAScript 没有规定，但从实现上来看，是唯一的。因为原型链上所有的元素都是对象，所以倒数第二个元素应该是所有对象的基础对象。这个对象在实现中只给出一个引用，就是 Object.prototype。这里可以得出：原型链上有两个元素是固定的，终点是 null，倒数第二的元素是 Object.prototype 指向的对象（注 4）。 那么倒数第三个元素是不是固定的呢？不是。从倒数第二个元素是 Object.prototype 来看，通过{}字面量和 new Object()创建的对象都在倒数第三这个位置，即 POJO 都在倒数第三。另外还有两个特例，一个是除内置函数之外的内置对象，如 Math、JSON；一个是除 Object 之外的内置函数的 prototype 属性指向的对象，如 Function.prototype。这里可以得出：原型链上倒数第三的元素一般是 POJO+Math/JSON+(Function/Array/String/Boolean/Number/Date/RegExp/Error).prototype。 倒数第三的位置出现了这么多的 prototype，那么倒数第四的位置就好推测了，所有除 Object 之外的内置函数作为构造器调用（注 5）时生成的实例对象都在倒数第四。其中需要注意的是，所有的内置函数本身是 Function 作为构造器调用生成的实例对象，所以都在这个位置。这里可以得出：原型链上倒数第四的元素一般是(Function/Array/String/Boolean/Number/Date/RegExp/Error)实例，其中包括（Object/Function/Array/String/Boolean/Number/Date/RegExp/Error），注意这个括号里面 Object 回来了。 原型链基本结构如下图： 从图上看来： array 等非 POJO 对象在原型链上和他们的构造器属于同一级别 POJO 在原型链上比他的构造器还靠后一个级别 参考文档：ES5 注： 内部属性是不开放给 JS 访问的属性，但现代浏览器已经可以通过proto属性访问和设置[[Prototype]] own property，即直接设置在此对象上的属性 执行以下代码感受下： 12var a = &#123;&#125;;a.__proto__ = a; Object.prototype 和基础对象的关系好比快捷方式和应用程序，本身没有任何关系，现在可以指向基础对象，以后也可以指向其他对象。当然原则上是不允许的，基础对象没有引用内存会被回收，所以 ECMAScript 规定 Object 下的 prototype 属性的 writable 和 configuration 特性都是 false（特性的问题以后另起一篇） 假设 func 为一个函数，func()即作为函数调用（调用内部函数属性[[Call]]），new func()即作为构造器调用（调用内部函数属性[[Construct]]）]]></content>
  </entry>
  <entry>
    <title><![CDATA[关于 javascript 原型链的个人理解]]></title>
    <url>%2F2015%2F02%2F09%2F%E5%85%B3%E4%BA%8Ejavascript%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[首先 js 是一种面对对象的语言，虽然大多数时候是以面对过程的形式展现出来。先来看一段代码： 12345678910function Base() &#123; this.name = "tarol";&#125;function Sub() &#123; this.age = 18;&#125;var b = new Base();Sub.prototype = b;var s = new Sub();console.log(s.name); //'tarol' 结果相信都知道，但是实现的原理却不明，于是逐行解析： 1Sub.prototype = b; prototype 是函数对象（函数也是对象）的特有属性，普通对象是不存在这个属性的，该属性默认为{}。这个属性的作用就是，将这个属性赋予给、使用此函数作为构造函数进行实例化的对象、作为该对象[[Propertype]]的内部属性。所谓内部属性就是通过 js 不能访问的属性，庆幸的是现代浏览器开放了这个属性的访问，一般属性名为 __proto__。所以： 1var s = new Sub(); 这一段（也可以说每个 new 操作）可以展开： 123var s = &#123;&#125;;s.__proto__ = Sub.prototype;Sub.call(s); 可见，对象实例化后，与构造函数的耦合在于前者的 __proto__ 属性和后者的 prototype 属性为同一个对象的引用。 然后 __proto__ 这个内部属性是用来做什么的呢，是用来实现 js 中的“继承”的。这个“继承”之所以打引号是用来区别 c++ 和 java 中的类式继承的思想，这种方式称之为原型继承。 原型继承的原理是：每个对象都保有一个指向其他对象的引用（也就是 __proto__ 即原型），这条引用最终指向 null（null 也是对象），当访问这个对象的任一属性时，如果在本对象中没有找到，则向其 __proto__ 指向的对象中寻找，直到原型链的尽头 null。需要注意的是：原型链中的所有元素都是实例化的对象。 现在回到上面的代码，当访问对象 s 的属性 name 时，在 s 中没有找到，于是跑到 s 的 __proto__ 指向的 Base 的实例对象中寻找，找到了 name 为’tarol’。 但如果访问 s 的属性 gender 时，在 s 和 s.__proto__ 中都没有找到，于是继续向 s.__proto__.__proto__ 中寻找。由 s.__proto__ === new Base，可知 s.__proto__.__proto__ === Base.prototype（即(new Constructor()).__proto__ === Constructor.prototype）。上面说到，prototype 默认是{}，于是继续在 Base.prototype.__proto__ 中找，即 (new Object()).__proto__ === Object.prototype。如果没有添加一些自定义的属性，Object.prototype 同样是{}，这样看来，似乎要陷入无限的循环当中，但其实到这里原型链就走向了尽头，因为浏览器会定义 Object.prototype.__proto__ = null。用下面的流程梳理下，–&gt;代表原型链上的传递，===代表对象不同引用间的替换。 1s.gender --&gt; s.__proto__.gender === Sub.prototype.gender === b.gender --&gt; b.__proto__.gender === Base.prototype.gender === (new Object()).gender --&gt; (new Object()).__proto__.gender === Object.prototype.gender --&gt; Object.prototype.__proto__ === null Object.prototype.__proto__也是所有对象原型链的尽头，包括 Function（函数的构造函数本身也是对象）、Date（普通对象）、Math（单体内置对象），因为 Function.prototype 是默认的{}，即进入上面流程中 (new Object()).gender 这一阶段。 最后举个栗子： 12345function Class() &#123;&#125;var a = new Class();Class.prototype = new Class();var b = new Class();console.log(b.__proto__.__proto__ === a.__proto__); 其中最让人困惑的估计是 1Class.prototype = new Class(); 如果用类式继承来理解，会误以为这句代码会陷入死循环调用当中，但注意上面红字标明那句话：原型链中的所有元素都是实例化的对象。也就是，这里只是将一个对象插入 Class 对象的原型链最前端（除对象本身外），至于这个对象是 new Class 还是 new Glass（见第一段红字，这句代码修改了构造函数的引用，使 __proto__ 和 prototype 之间的耦合解除了，可以说这个对象和构造函数“分家”了），都不影响调用的过程。所以，这句代码的目的是修改了 Class 构造函数，让其实例化的对象的原型链长度+1。 写的有些凌乱，如果过段时间我看不懂了再回来改一改。 参考： 《理解 JavaScript 面向对象的思路》 By 温神 《关于__proto__和 prototype 的一些理解》By TonyCoolZhu 《JavaScript 高级程序设计》By Nicholas C.Zakas]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
        <category>ES</category>
      </categories>
      <tags>
        <tag>文章</tag>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JSONP的实现流程]]></title>
    <url>%2F2015%2F01%2F04%2FJSONP%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;在进行 AJAX 的时候会经常产生这样一个报错： &emsp;&emsp;看红字，这是浏览器的同源策略，使跨域进行的 AJAX 无效。注意，不是不发送 AJAX 请求（其实就是 HTTP 请求），而是请求了，也返回了，但浏览器‘咔擦’一声，下面没有了。对比下 fiddler 和浏览器抓的包的异同： fiddler chrome &emsp;&emsp;简而言之，浏览器这边就是头（response header）给看，身体（response body）不给看。 &emsp;&emsp;什么是同源策略？为什么会有同源策略？这一点在吴翰清老师著的《白帽子讲 Web 安全》一书中由阐述，这里就不赘述了。下面要做的，就是使用 JSONP 让上面的报错消失，按正确的流程进行下去。 &emsp;&emsp;首先介绍下我这里的环境，两个 Web 服务器，Tomcat 监听 8081，Node 监听 3000，Tomcat 这边实现一个处理 AJAX 的 JSP 文件，很简单，返回一个 JSON 12&lt;%@ page contentType="application/json; charset=utf-8" %&gt;&#123;"status": true&#125; &emsp;&emsp;Tomcat 的页面对这个 URL 发出 AJAX 请求，并打印出了返回值 &emsp;&emsp;但 Node 的页面发出 AJAX 请求，则像上面那样报错了，因为 AJAX 有同源策略保护。怎么绕过这个保护呢？平时我们页面引入的 CSS、JS 可能是从其他的服务器比如静态服务器、CDN 获取内容，都在不同的域，可知页面内的标签引入 JS 是没有同源策略一说的，而且也是进行 request 和处理 response，于是我们把这个 AJAX 请求改为如下代码： 123var script = document.createElement("script");script.src = "http://localhost:8081/test/true.jsp";document.body.insertBefore(script, document.body.lastChild); &emsp;&emsp;但还是残忍的报错了 &emsp;&emsp;因为返回的 JSON({“status”: true})成为了一个独立的 js 片段，而这个片段明显是不符合语法的，如果返回的是符合语法规范的处理 JSON 的 js 片段而不仅仅是 JSON 就好了。比如我们将服务器端的代码改成这样： 12&lt;%@ page contentType="application/javascript; charset=utf-8" %&gt;console.log(&#123;"status": true&#125;); &emsp;&emsp;再在 Node 的页面进行 AJAX &emsp;&emsp;目的是达到了，但问题是，这个 AJAX 的 servlet 不仅返回了数据，还返回了行为，难道我要把处理 DOM 的 js 写在这里面吗？页面重构了又跑到这里来修改？问题太美不敢想，所以请求成功的方法必须写在页面的 js 里面，比如这样 123456function callback(data) &#123; console.log(data);&#125;var script = document.createElement("script");script.src = "http://localhost:8081/test/true.jsp";document.body.insertBefore(script, document.body.lastChild); &emsp;&emsp;而服务器返回的 js 片段直接调用这个 function 就行了，这个就叫回调函数了 12&lt;%@ page contentType="application/javascript; charset=utf-8" %&gt;callback(&#123;"status": true&#125;); &emsp;&emsp;可以看到，这个方案比之前好多了，servlet 和请求页面的耦合度低了很多，但没完全解决，比如 callback 这个回调函数的名字，如果把这个名字放在请求的 parameter 中，比如这样 123456function callback(data) &#123; console.log(data);&#125;var script = document.createElement("script");script.src = "http://localhost:8081/test/true.jsp?cb=callback";document.body.insertBefore(script, document.body.lastChild); &emsp;&emsp;服务器对这个 parameter 进行处理 12&lt;%@ page contentType="application/javascript; charset=utf-8" %&gt;&lt;%= request.getParameter("cb") %&gt;(&#123;"status": true&#125;); &emsp;&emsp;优化一下，对没有 cb 参数的请求仅返回 JSON 1234567891011121314&lt;% String callback = request.getParameter("cb"); if(null == callback) &#123; response.setContentType("application/json; charset=utf-8");%&gt; &#123;"status": true&#125;&lt;% &#125;else &#123; response.setContentType("application/javascript; charset=utf-8");%&gt; &lt;%= callback %&gt;(&#123;"status": true&#125;)&lt;% &#125;%&gt; &emsp;&emsp;那么整个 JSONP 的功能就实现了。但还有一点瑕疵，代码执行完 html 中留下了一个 script 标签，强迫症能忍？处女座能忍？ &emsp;&emsp;解决方法：可以使用 jQuery 的方法，jQuery 会清除掉留下的 script 标签。 12345678$.ajax(&#123; url: "http://localhost:8081/test/true.jsp", dataType: "jsonp", jsonp: "cb", success: function(data) &#123; console.log(data); &#125;&#125;); &emsp;&emsp;也可以自己实现一个，我抛个砖，在 js 加载完成后删除节点。 123456789function callback(data) &#123; console.log(data);&#125;var script = document.createElement("script");script.src = "http://localhost:8081/test/true.jsp?cb=callback";document.body.insertBefore(script, document.body.lastChild);script.onload = function() &#123; this.parentNode.removeChild(this);&#125;; &emsp;&emsp;至此，不知道有人发现没有，JSONP 这种方式有一个致命的缺陷：就是由于它是通过引入 script 节点实现的，所以只支持 GET 方法。如果你任性，你无理取闹，你一定要用 post 跨域，那么只能考虑使用 CORS 了。 &emsp;&emsp;JSONP 的东西就到此结束了，其实做完才发现，实际上这是个很简单的概念，取了个比较唬人的名字而已。]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
        <category>H5</category>
      </categories>
      <tags>
        <tag>文章</tag>
        <tag>H5</tag>
      </tags>
  </entry>
</search>
