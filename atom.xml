<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tarol 的碎碎念</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tarol.github.io/"/>
  <updated>2018-11-01T13:30:32.089Z</updated>
  <id>https://tarol.github.io/</id>
  
  <author>
    <name>C tarol</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>管道（|&gt;）提案怎么了？</title>
    <link href="https://tarol.github.io/2018/11/01/%E7%AE%A1%E9%81%93%E6%8F%90%E6%A1%88%E6%80%8E%E4%B9%88%E4%BA%86%EF%BC%9F/"/>
    <id>https://tarol.github.io/2018/11/01/管道提案怎么了？/</id>
    <published>2018-11-01T12:56:02.000Z</published>
    <updated>2018-11-01T13:30:32.089Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在发布的 &lt;a href=&quot;https://github.com/babel/babel/releases/tag/v7.0.0-beta.52&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;babel@7.0.0-beta52&lt;/a&gt; 中，我们为
        
      
    
    </summary>
    
      <category term="翻译" scheme="https://tarol.github.io/categories/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="前端" scheme="https://tarol.github.io/categories/%E7%BF%BB%E8%AF%91/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ES" scheme="https://tarol.github.io/categories/%E7%BF%BB%E8%AF%91/%E5%89%8D%E7%AB%AF/ES/"/>
    
    
      <category term="ES" scheme="https://tarol.github.io/tags/ES/"/>
    
      <category term="翻译" scheme="https://tarol.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>私有成员语法 FAQ</title>
    <link href="https://tarol.github.io/2018/10/28/%E7%A7%81%E6%9C%89%E6%88%90%E5%91%98%E8%AF%AD%E6%B3%95FAQ/"/>
    <id>https://tarol.github.io/2018/10/28/私有成员语法FAQ/</id>
    <published>2018-10-28T12:58:12.000Z</published>
    <updated>2018-10-30T14:38:55.129Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;翻译自&quot;&gt;&lt;a href=&quot;#翻译自&quot; class=&quot;headerlink&quot; title=&quot;翻译自&quot;&gt;&lt;/a&gt;翻译自&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a
        
      
    
    </summary>
    
      <category term="翻译" scheme="https://tarol.github.io/categories/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="前端" scheme="https://tarol.github.io/categories/%E7%BF%BB%E8%AF%91/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ES" scheme="https://tarol.github.io/categories/%E7%BF%BB%E8%AF%91/%E5%89%8D%E7%AB%AF/ES/"/>
    
    
      <category term="ES" scheme="https://tarol.github.io/tags/ES/"/>
    
      <category term="翻译" scheme="https://tarol.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>TC39 标准追踪：babel 中的 decorators</title>
    <link href="https://tarol.github.io/2018/09/22/TC39%20%E6%A0%87%E5%87%86%E8%BF%BD%E8%B8%AA%EF%BC%9Ababel%20%E4%B8%AD%E7%9A%84%20decorators/"/>
    <id>https://tarol.github.io/2018/09/22/TC39 标准追踪：babel 中的 decorators/</id>
    <published>2018-09-22T12:10:42.000Z</published>
    <updated>2018-10-29T13:30:11.844Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;翻译自&quot;&gt;&lt;a href=&quot;#翻译自&quot; class=&quot;headerlink&quot; title=&quot;翻译自&quot;&gt;&lt;/a&gt;翻译自&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a
        
      
    
    </summary>
    
      <category term="翻译" scheme="https://tarol.github.io/categories/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="前端" scheme="https://tarol.github.io/categories/%E7%BF%BB%E8%AF%91/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ES" scheme="https://tarol.github.io/categories/%E7%BF%BB%E8%AF%91/%E5%89%8D%E7%AB%AF/ES/"/>
    
    
      <category term="ES" scheme="https://tarol.github.io/tags/ES/"/>
    
      <category term="翻译" scheme="https://tarol.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>聊一聊promise的前世今生</title>
    <link href="https://tarol.github.io/2018/05/22/%E8%81%8A%E4%B8%80%E8%81%8Apromise%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/"/>
    <id>https://tarol.github.io/2018/05/22/聊一聊promise的前世今生/</id>
    <published>2018-05-22T13:56:55.000Z</published>
    <updated>2018-10-28T10:02:12.363Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&amp;emsp;&amp;emsp;promise 的概念已经出现很久了，浏览器、nodejs 都已经全部实现 promise 了。现在来聊，是不是有点过时了？&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;确实，如果不扯淡，这篇随笔根本不会有太多内容。所以，我就尽可能的，多扯一扯，聊一聊
        
      
    
    </summary>
    
      <category term="技术" scheme="https://tarol.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="https://tarol.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ES" scheme="https://tarol.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/ES/"/>
    
    
      <category term="文章" scheme="https://tarol.github.io/tags/%E6%96%87%E7%AB%A0/"/>
    
      <category term="ES" scheme="https://tarol.github.io/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>所谓编码--泛谈ASCII、Unicode、UTF8、UTF16、UCS-2等编码格式</title>
    <link href="https://tarol.github.io/2017/09/15/%E6%89%80%E8%B0%93%E7%BC%96%E7%A0%81--%E6%B3%9B%E8%B0%88ASCII%E3%80%81Unicode%E3%80%81UTF8%E3%80%81UTF16%E3%80%81UCS-2%E7%AD%89%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F/"/>
    <id>https://tarol.github.io/2017/09/15/所谓编码--泛谈ASCII、Unicode、UTF8、UTF16、UCS-2等编码格式/</id>
    <published>2017-09-15T10:18:38.000Z</published>
    <updated>2018-10-30T14:53:15.420Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;最近在看 nodejs 的源码，看到 stream 的实现里面满地都是 encoding，不由想起以前看过的一篇文章——在前面的随笔里面有提到过——阮一峰老师的&lt;a
        
      
    
    </summary>
    
      <category term="技术" scheme="https://tarol.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="计算机" scheme="https://tarol.github.io/categories/%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="文章" scheme="https://tarol.github.io/tags/%E6%96%87%E7%AB%A0/"/>
    
      <category term="计算机" scheme="https://tarol.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>从web图片裁剪出发：了解H5中的canvas</title>
    <link href="https://tarol.github.io/2016/04/21/%E4%BB%8Eweb%E5%9B%BE%E7%89%87%E8%A3%81%E5%89%AA%E5%87%BA%E5%8F%91%EF%BC%9A%E4%BA%86%E8%A7%A3H5%E4%B8%AD%E7%9A%84canvas/"/>
    <id>https://tarol.github.io/2016/04/21/从web图片裁剪出发：了解H5中的canvas/</id>
    <published>2016-04-21T09:42:00.000Z</published>
    <updated>2018-10-28T10:02:12.327Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&amp;emsp;&amp;emsp;&lt;font color=&quot;#E21918&quot;&gt;本篇内容不针对 canvas 文档对每个 api 进行逐个的详解！&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;&lt;font color=&quot;#E21918&quot;&gt;本篇内容不针对 canvas 文档对每个
        
      
    
    </summary>
    
      <category term="技术" scheme="https://tarol.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="https://tarol.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="H5" scheme="https://tarol.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/H5/"/>
    
    
      <category term="文章" scheme="https://tarol.github.io/tags/%E6%96%87%E7%AB%A0/"/>
    
      <category term="H5" scheme="https://tarol.github.io/tags/H5/"/>
    
  </entry>
  
  <entry>
    <title>从web图片裁剪出发：了解H5中的Blob</title>
    <link href="https://tarol.github.io/2016/04/15/%E4%BB%8Eweb%E5%9B%BE%E7%89%87%E8%A3%81%E5%89%AA%E5%87%BA%E5%8F%91%EF%BC%9A%E4%BA%86%E8%A7%A3H5%E4%B8%AD%E7%9A%84Blob/"/>
    <id>https://tarol.github.io/2016/04/15/从web图片裁剪出发：了解H5中的Blob/</id>
    <published>2016-04-15T08:11:00.000Z</published>
    <updated>2018-10-28T10:02:12.328Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;刚开始做前端的时候，有个功能卡住我了，就是裁剪并上传头像。当时两个方案摆在我面前，一个是 flash，我不会。另一个是通过 iframe 上传图片，然后再上传坐标由后端裁剪，而我最终的选择是后者。有人会疑惑，为什么不用 H5 的 Canvas 和
        
      
    
    </summary>
    
      <category term="技术" scheme="https://tarol.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="https://tarol.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="H5" scheme="https://tarol.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/H5/"/>
    
    
      <category term="文章" scheme="https://tarol.github.io/tags/%E6%96%87%E7%AB%A0/"/>
    
      <category term="H5" scheme="https://tarol.github.io/tags/H5/"/>
    
  </entry>
  
  <entry>
    <title>玩一把JS的链式调用</title>
    <link href="https://tarol.github.io/2016/03/30/%E7%8E%A9%E4%B8%80%E6%8A%8AJS%E7%9A%84%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8/"/>
    <id>https://tarol.github.io/2016/03/30/玩一把JS的链式调用/</id>
    <published>2016-03-30T08:00:31.000Z</published>
    <updated>2018-10-31T14:06:50.286Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;链式调用我们平常用到很多，比如 jQuery 中的 &lt;code&gt;$(ele).show().find(child).hide()&lt;/code&gt;，再比如 angularjs 中的
        
      
    
    </summary>
    
      <category term="技术" scheme="https://tarol.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="https://tarol.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="https://tarol.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/JS/"/>
    
    
      <category term="文章" scheme="https://tarol.github.io/tags/%E6%96%87%E7%AB%A0/"/>
    
      <category term="JS" scheme="https://tarol.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中你所不知道的Object（二）-- Function 篇</title>
    <link href="https://tarol.github.io/2015/07/25/JavaScript%E4%B8%AD%E4%BD%A0%E6%89%80%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84Object%EF%BC%88%E4%BA%8C%EF%BC%89-Function%20%E7%AF%87/"/>
    <id>https://tarol.github.io/2015/07/25/JavaScript中你所不知道的Object（二）-Function 篇/</id>
    <published>2015-07-25T09:12:33.000Z</published>
    <updated>2018-11-01T14:40:07.167Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;上一篇（JavaScript 中你所不知道的 Object（一））说到，Object 对象有大量的内部属性，而其中多数和外部属性的操作有关。最后留了个悬念，就是 Boolean、Date、Number、String、Function
        
      
    
    </summary>
    
      <category term="技术" scheme="https://tarol.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="https://tarol.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ES" scheme="https://tarol.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/ES/"/>
    
    
      <category term="文章" scheme="https://tarol.github.io/tags/%E6%96%87%E7%AB%A0/"/>
    
      <category term="ES" scheme="https://tarol.github.io/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中你所不知道的Object（一）</title>
    <link href="https://tarol.github.io/2015/07/23/JavaScript%E4%B8%AD%E4%BD%A0%E6%89%80%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84Object%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://tarol.github.io/2015/07/23/JavaScript中你所不知道的Object（一）/</id>
    <published>2015-07-23T08:27:02.000Z</published>
    <updated>2018-11-01T14:40:04.368Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Object 实在是 JavaScript 中很基础的东西了，在工作中，它只有那么贫瘠的几个用法，让人感觉不过尔尔，但是我们真的了解它吗？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当我们习惯用&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight
        
      
    
    </summary>
    
      <category term="技术" scheme="https://tarol.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="https://tarol.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ES" scheme="https://tarol.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/ES/"/>
    
    
      <category term="文章" scheme="https://tarol.github.io/tags/%E6%96%87%E7%AB%A0/"/>
    
      <category term="ES" scheme="https://tarol.github.io/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>从 Object 和 Function 说说JS的原型链</title>
    <link href="https://tarol.github.io/2015/07/21/%E4%BB%8EObject%E5%92%8CFunction%E8%AF%B4%E8%AF%B4JS%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>https://tarol.github.io/2015/07/21/从Object和Function说说JS的原型链/</id>
    <published>2015-07-21T08:45:03.000Z</published>
    <updated>2018-11-01T13:30:32.087Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;ECMAScript 规定了两个特殊的内置对象：Object 和 Function。他们的特殊性在于，他们本身既是对象又是函数，而他们同时也是对象和函数的构造器。这种自己生自己的逻辑显然违反人性，如果还停留在类的继承的思想上，那么更加无法理解。&lt;/p&gt;
&lt;p&gt;然而
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于 javascript 原型链的个人理解</title>
    <link href="https://tarol.github.io/2015/02/09/%E5%85%B3%E4%BA%8Ejavascript%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/"/>
    <id>https://tarol.github.io/2015/02/09/关于javascript原型链的个人理解/</id>
    <published>2015-02-09T08:31:13.000Z</published>
    <updated>2018-10-31T14:43:01.794Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;首先 js 是一种面对对象的语言，虽然大多数时候是以面对过程的形式展现出来。先来看一段代码：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
        
      
    
    </summary>
    
      <category term="技术" scheme="https://tarol.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="https://tarol.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ES" scheme="https://tarol.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/ES/"/>
    
    
      <category term="文章" scheme="https://tarol.github.io/tags/%E6%96%87%E7%AB%A0/"/>
    
      <category term="ES" scheme="https://tarol.github.io/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>JSONP的实现流程</title>
    <link href="https://tarol.github.io/2015/01/04/JSONP%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B/"/>
    <id>https://tarol.github.io/2015/01/04/JSONP的实现流程/</id>
    <published>2015-01-04T11:26:36.000Z</published>
    <updated>2018-10-28T10:02:12.336Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&amp;emsp;&amp;emsp;在进行 AJAX 的时候会经常产生这样一个报错：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/image/jsonp/1.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;看红字，这是浏览器的同源策略，使跨域进行的 AJAX
        
      
    
    </summary>
    
      <category term="技术" scheme="https://tarol.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="https://tarol.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="H5" scheme="https://tarol.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/H5/"/>
    
    
      <category term="文章" scheme="https://tarol.github.io/tags/%E6%96%87%E7%AB%A0/"/>
    
      <category term="H5" scheme="https://tarol.github.io/tags/H5/"/>
    
  </entry>
  
</feed>
